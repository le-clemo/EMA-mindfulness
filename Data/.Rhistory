rum.base.BF1 / rum.base.BF2
rum.base.BF3 <- lmBF(ruminating ~ group * gameNumSubject + distracted + meanNA + meanPA +
propCor_NoGo + subject,
whichRandom = c("subject"),
data = baseSart[which(!is.na(baseSart$propCor_NoGo)),])
rum.base.BF1 / rum.base.BF3
dist.base1 <- lmer(distracted ~ group * gameNumSubject + ruminating + meanNA + meanPA +
meanRT + propCor_NoGo +
(1|subject),
data = baseSart)
summary(dist.base1)
param_tab <- parameters::model_parameters(dist.base1, effects = "fixed")
d <- t_to_d(param_tab$t[2:9], param_tab$df_error[2:9])
interpret_cohens_d(d[1])
dist.base.BF1 <- lmBF(distracted ~ group * gameNumSubject + ruminating + meanNA +
meanRT + propCor_NoGo + subject,
whichRandom = c("subject"),
data = baseSart[which(!is.na(baseSart$propCor_NoGo)),])
dist.base.BF2 <- lmBF(distracted ~ group * gameNumSubject + ruminating + meanNA +
meanRT + subject,
whichRandom = c("subject"),
data = baseSart[which(!is.na(baseSart$propCor_NoGo)),])
dist.base.BF1 / dist.base.BF2
dist.base.BF3 <- lmBF(distracted ~ group * gameNumSubject + ruminating + meanNA +
propCor_NoGo + subject,
whichRandom = c("subject"),
data = baseSart[which(!is.na(baseSart$propCor_NoGo)),])
dist.base.BF1 / dist.base.BF3
rum.peri1 <- lmer(ruminating_gam ~ group + intervention * gameNumSubjB +
meanNA_gam + meanPA_gam + distracted_gam +
meanRT_gam + propCor_NoGo_gam +
(1 | subjB),
data = sart[which(!is.na(sart$meanRT_gam)),])
summary(rum.peri1)
param_tab <- parameters::model_parameters(rum.peri1, effects = "fixed")
d <- t_to_d(param_tab$t[2:10], param_tab$df_error[2:10])
interpret_cohens_d(d[1])
rum.peri.BF1 <- lmBF(ruminating_gam ~ group + intervention * gameNumSubjB +
meanNA_gam + meanPA_gam + distracted_gam +
meanRT_gam + propCor_NoGo_gam + subjB,
whichRandom = c("subjB"),
data = sart[which(!is.na(sart$meanRT_gam)),])
rum.peri.BF1 <- lmBF(ruminating_gam ~ group + intervention * gameNumSubjB +
meanNA_gam + meanPA_gam + distracted_gam +
meanRT_gam + propCor_NoGo_gam + subjB,
whichRandom = c("subjB"),
data = sart[which((!is.na(sart$meanRT_gam)) & (!is.na(sart$propCor_NoGo))),])
rum.peri.BF2 <- lmBF(ruminating_gam ~ group + intervention * gameNumSubjB +
meanNA_gam + meanPA_gam + distracted_gam +
meanRT_gam + subjB,
whichRandom = c("subjB"),
data = sart[which((!is.na(sart$meanRT_gam)) & (!is.na(sart$propCor_NoGo))),])
rum.peri.BF1 / rum.peri.BF2
rum.peri.BF3 <- lmBF(ruminating_gam ~ group + intervention * gameNumSubjB +
meanNA_gam + meanPA_gam + distracted_gam +
propCor_NoGo_gam + subjB,
whichRandom = c("subjB"),
data = sart[which((!is.na(sart$meanRT_gam)) & (!is.na(sart$propCor_NoGo))),])
rum.peri.BF1 / rum.peri.BF3
dist.peri.BF1 <- lmBF(distracted_gam ~ group + intervention * gameNumSubjB +
meanNA_gam + meanPA_gam + ruminating_gam +
meanRT_gam + propCor_NoGo_gam + subjB,
whichRandom = c("subjB"),
data = sart[which((!is.na(sart$meanRT_gam)) & (!is.na(sart$propCor_NoGo))),])
dist.peri1 <- lmer(distracted_gam ~ group + intervention * gameNumSubjB +
meanNA_gam + meanPA_gam + ruminating_gam +
meanRT_gam + propCor_NoGo_gam +
(1 | subjB),
data = sart[which(!is.na(sart$meanRT_gam)),])
summary(dist.peri1)
param_tab <- parameters::model_parameters(rum.peri1, effects = "fixed")
d <- t_to_d(param_tab$t[2:10], param_tab$df_error[2:10])
interpret_cohens_d(d[1])
param_tab <- parameters::model_parameters(dist.peri1, effects = "fixed")
d <- t_to_d(param_tab$t[2:10], param_tab$df_error[2:10])
interpret_cohens_d(d[1])
dist.peri.BF1 <- lmBF(distracted_gam ~ group + intervention * gameNumSubjB +
meanNA_gam + meanPA_gam + ruminating_gam +
meanRT_gam + propCor_NoGo_gam + subjB,
whichRandom = c("subjB"),
data = sart[which((!is.na(sart$meanRT_gam)) & (!is.na(sart$propCor_NoGo))),])
dist.peri.BF2 <- lmBF(distracted_gam ~ group + intervention * gameNumSubjB +
meanNA_gam + meanPA_gam + ruminating_gam +
meanRT_gam + subjB,
whichRandom = c("subjB"),
data = sart[which((!is.na(sart$meanRT_gam)) & (!is.na(sart$propCor_NoGo))),])
dist.peri.BF1 / dist.peri.BF2
dist.peri.BF3 <- lmBF(distracted_gam ~ group + intervention * gameNumSubjB +
meanNA_gam + meanPA_gam + ruminating_gam +
propCor_NoGo_gam + subjB,
whichRandom = c("subjB"),
data = sart[which((!is.na(sart$meanRT_gam)) & (!is.na(sart$propCor_NoGo))),])
dist.peri.BF1 / dist.peri.BF3
data$commissionError <- 1 - data$propCor
data$commissionError <- 1 - data$propCor_NoGo
data$commissionError <- 1 - data$propCor_NoGo
rum.base1 <- lmer(ruminating ~ group * gameNumSubject + meanRT +
commissionError + distracted + meanNA + meanPA +
(1|subject),
data = baseSart)
###########################################################################################################
############################################ Scaling Data #################################################
###########################################################################################################
#creating variables minus baseline means per subject
met.vars <- c('ruminating', 'stickiness', 'meanNA',  'down', 'irritated', 'restless', 'anxious',
'meanPA', 'wakeful', 'satisfied', 'energetic',
'stressed', 'listless',  'distracted',
'thoughtsPleasant', 'restOfDayPos',
'posMax', 'posIntensity', 'negMax', 'negIntensity',
"sleepQuality", "sleepLatency", "sleepDuration", "restednessWakeup",
"meanRT", "meanRT_Go", "meanRT_NoGo", "propCor", "propCor_Go", "propCor_NoGo")
###########################################################################################################
############################################ Scaling Data #################################################
###########################################################################################################
#creating variables minus baseline means per subject
met.vars <- c('ruminating', 'stickiness', 'meanNA',  'down', 'irritated', 'restless', 'anxious',
'meanPA', 'wakeful', 'satisfied', 'energetic',
'stressed', 'listless',  'distracted',
'thoughtsPleasant', 'restOfDayPos',
'posMax', 'posIntensity', 'negMax', 'negIntensity',
"sleepQuality", "sleepLatency", "sleepDuration", "restednessWakeup",
"meanRT", "meanRT_Go", "meanRT_NoGo", "propCor", "propCor_Go", "propCor_NoGo",
"commissionError")
#in addition we create a new list which includes both the changed and unchanged met.vars for scaling later on
scale.vars <- c(rep(NA, length(met.vars)*3))
i = 0
for(v in met.vars){
new_var <- paste(v, "_diff", sep = "")
data[[new_var]] <- NA
gam_var <- paste(v, "_gam", sep = "")
data[[gam_var]] <- NA
i = i+1
scale.vars[[i]] <- v
i = i+1
scale.vars[[i]] <- new_var
i = i+1
scale.vars[[i]] <- gam_var
for(id in unique(data$subject)){
for(b in 1:2){
pre_rows <- which((data$subject == id) & (data$phase=="pre") & (data$block==b))
peri_rows <- which((data$subject == id) & (data$phase=="peri") & (data$block==b))
s_rows <- which((data$subject == id) & (data$block==b))
baselineMean <- mean(data[[v]][pre_rows], na.rm=TRUE)
if(is.na(baselineMean)){
baselineMean <- 0
}
data[[new_var]][s_rows] <- round(data[[v]][s_rows] - baselineMean, 2)
data[[gam_var]][pre_rows] <- NA
data[[gam_var]][peri_rows] <- round(data[[v]][peri_rows] - baselineMean, 2)
}
}
}
#number of participants so far
length(unique(data$subjB)) #66 subjB (same subject, different block --> viewed as separate)
responses_block <- ddply(data, .(subjB), plyr::summarise,
numCompleted = length(mindcog_db_open_from),
noResponse = length(unique(mindcog_db_non_response)),
response = numCompleted - noResponse,
responseRate = round(response/numCompleted,2),
numDays = max(assessmentDay))
meanResponseRate_block <- mean(responses_block$responseRate) #the mean response rate is ~67.6%
length(unique(responses_block[which(responses_block$responseRate >= meanResponseRate_block),]$subjB)) #36
length(unique(responses_block[which(responses_block$responseRate >= 0.6),]$subjB)) #45
length(unique(responses_block[which(responses_block$responseRate >= 0.5),]$subjB)) #53
responses_subject <- ddply(data, .(subject), plyr::summarise,
numCompleted = length(mindcog_db_open_from),
noResponse = length(unique(mindcog_db_non_response)),
response = numCompleted - noResponse,
responseRate = round(response/numCompleted,2),
numDays = max(assessmentDay))
meanResponseRate_subject <- mean(responses_subject$responseRate) #the mean response rate is ~66.9%
length(unique(responses_subject[which(responses_subject$responseRate >= meanResponseRate_block),]$subject)) #20
length(unique(responses_subject[which(responses_subject$responseRate >= 0.6),]$subject)) #26
length(unique(responses_subject[which(responses_subject$responseRate >= 0.5),]$subject)) #33
#removing participants with a response rate lower than 60%
pp <- unique(responses_block[which(responses_block$responseRate >= 0.6),]$subjB)
data <- data[which(data$subjB %in% pp),]
sart <- data[which(!is.na(data$meanRT)),]
sart$gameNumSubject <- NA
subjectIDs <- unique(sart$subject)
for(id in subjectIDs){
lenDat <- length(sart[which(sart$subject==id),]$subject)
sart[which(sart$subject==id),]$gameNumSubject <- 1:lenDat
}
sart$gameNumSubjB <- NA
subjBIDs <- unique(sart$subjB)
for(id in subjBIDs){
lenDat <- length(sart[which(sart$subjB==id),]$subjB)
sart[which(sart$subjB==id),]$gameNumSubjB <- 1:lenDat
}
#creating a scaled version of data
sc_sart <- copy(sart)
sc_sart[scale.vars] <- scale(sc_sart[scale.vars])
sc_sart <- sc_sart[which(!is.na(sc_sart$meanRT)),]
baseSart <- sart[which((sart$phase=="pre") & (sart$block==1)),]
sc_baseSart <- sc_sart[which((sc_sart$phase=="pre") & (sc_sart$block==1)),]
#creating variables minus baseline means per subject
met.vars <- c('responseTime', 'meanRT', 'meanRT_Go', 'meanRT_NoGo', 'propCor', 'propCor_Go', 'propCor_NoGo',
'commissionError')
#in addition we create a new list which includes both the changed and unchanged met.vars for scaling later on
scale.vars <- c(rep(NA, length(met.vars)*3))
i = 0
for(v in met.vars){
new_var <- paste(v, "_diff", sep = "")
numbers[[new_var]] <- NA
gam_var <- paste(v, "_gam", sep = "")
numbers[[gam_var]] <- NA
i = i+1
scale.vars[[i]] <- v
i = i+1
scale.vars[[i]] <- new_var
i = i+1
scale.vars[[i]] <- gam_var
for(id in unique(numbers$userID)){
for(b in 1:2){
pre_rows <- which((numbers$userID == id) & (numbers$phase=="pre") & (numbers$block==b))
peri_rows <- which((numbers$userID == id) & (numbers$phase=="peri") & (numbers$block==b))
s_rows <- which((numbers$userID == id) & (numbers$block==b))
baselineMean <- mean(numbers[[v]][pre_rows], na.rm=TRUE)
if(is.na(baselineMean)){
baselineMean <- 0
}
numbers[[new_var]][s_rows] <- round(numbers[[v]][s_rows] - baselineMean, 2)
numbers[[gam_var]][pre_rows] <- NA
numbers[[gam_var]][peri_rows] <- round(numbers[[v]][peri_rows] - baselineMean, 2)
}
}
}
#creating variables minus baseline means per subject
met.vars <- c('responseTime', 'meanRT', 'meanRT_Go', 'meanRT_NoGo', 'propCor', 'propCor_Go', 'propCor_NoGo')
#in addition we create a new list which includes both the changed and unchanged met.vars for scaling later on
scale.vars <- c(rep(NA, length(met.vars)*3))
i = 0
for(v in met.vars){
new_var <- paste(v, "_diff", sep = "")
numbers[[new_var]] <- NA
gam_var <- paste(v, "_gam", sep = "")
numbers[[gam_var]] <- NA
i = i+1
scale.vars[[i]] <- v
i = i+1
scale.vars[[i]] <- new_var
i = i+1
scale.vars[[i]] <- gam_var
for(id in unique(numbers$userID)){
for(b in 1:2){
pre_rows <- which((numbers$userID == id) & (numbers$phase=="pre") & (numbers$block==b))
peri_rows <- which((numbers$userID == id) & (numbers$phase=="peri") & (numbers$block==b))
s_rows <- which((numbers$userID == id) & (numbers$block==b))
baselineMean <- mean(numbers[[v]][pre_rows], na.rm=TRUE)
if(is.na(baselineMean)){
baselineMean <- 0
}
numbers[[new_var]][s_rows] <- round(numbers[[v]][s_rows] - baselineMean, 2)
numbers[[gam_var]][pre_rows] <- NA
numbers[[gam_var]][peri_rows] <- round(numbers[[v]][peri_rows] - baselineMean, 2)
}
}
}
## correct
correct.m1 <- glmer(correct ~ group * isGo * responseTime + gameSessionID + (1 | subject),
data = numbers[which(numbers$phase == "pre"),], family = binomial())
## correct
correct.m1 <- glmer(correct ~ group * responseTime + isGo + gameSessionID + (1 | subject),
data = numbers[which(numbers$phase == "pre"),], family = binomial())
## correct
correct.m1 <- glmer(correct ~ group + responseTime + isGo + gameSessionID + (1 | subject),
data = numbers[which(numbers$phase == "pre"),], family = binomial())
## correct
correct.m1 <- glmer(correct ~ group + responseTime + isGo + gameSessionID + (1 | subject),
data = numbers, family = binomial())
## correct
correct.m1 <- glmer(correct ~ group + scale(responseTime) + isGo + gameSessionID + (1 | subject),
data = numbers, family = binomial())
summary(correct.m1)
## correct
correct.m1 <- glmer(correct ~ group * scale(responseTime) * isGo + gameSessionID + (1 | subject),
data = numbers, family = binomial())
summary(correct.m1)
rum.base1 <- lmer(ruminating ~ group * gameNumSubject + meanRT +
commissionError + distracted + meanNA + meanPA +
(1|subject),
data = baseSart)
summary(rum.base1)
param_tab <- parameters::model_parameters(rum.base1, effects = "fixed")
d <- t_to_d(param_tab$t[2:9], param_tab$df_error[2:9])
interpret_cohens_d(d[1])
rum.base.BF1 <- lmBF(ruminating ~ group * gameNumSubject + distracted + meanNA + meanPA +
meanRT + commissionError + subject,
whichRandom = c("subject"),
data = baseSart[which(!is.na(baseSart$commissionError)),])
rum.base.BF2 <- lmBF(ruminating ~ group * gameNumSubject + distracted + meanNA + meanPA +
meanRT + subject,
whichRandom = c("subject"),
data = baseSart[which(!is.na(baseSart$commissionError)),])
rum.base.BF1 / rum.base.BF2
rum.base.BF3 <- lmBF(ruminating ~ group * gameNumSubject + distracted + meanNA + meanPA +
commissionError + subject,
whichRandom = c("subject"),
data = baseSart[which(!is.na(baseSart$commissionError)),])
rum.base.BF1 / rum.base.BF3
dist.base1 <- lmer(distracted ~ group * gameNumSubject + ruminating + meanNA + meanPA +
meanRT + commissionError +
(1|subject),
data = baseSart)
summary(dist.base1)
param_tab <- parameters::model_parameters(dist.base1, effects = "fixed")
d <- t_to_d(param_tab$t[2:9], param_tab$df_error[2:9])
interpret_cohens_d(d[1])
dist.base.BF1 <- lmBF(distracted ~ group * gameNumSubject + ruminating + meanNA +
meanRT + commissionError + subject,
whichRandom = c("subject"),
data = baseSart[which(!is.na(baseSart$commissionError)),])
dist.base.BF2 <- lmBF(distracted ~ group * gameNumSubject + ruminating + meanNA +
meanRT + subject,
whichRandom = c("subject"),
data = baseSart[which(!is.na(baseSart$commissionError)),])
dist.base.BF1 / dist.base.BF2
dist.base.BF3 <- lmBF(distracted ~ group * gameNumSubject + ruminating + meanNA +
commissionError + subject,
whichRandom = c("subject"),
data = baseSart[which(!is.na(baseSart$commissionError)),])
dist.base.BF1 / dist.base.BF3
rum.peri1 <- lmer(ruminating_gam ~ group + intervention * gameNumSubjB +
meanNA_gam + meanPA_gam + distracted_gam +
meanRT_gam + commissionError_gam +
(1 | subjB),
data = sart[which(!is.na(sart$meanRT_gam)),])
summary(rum.peri1)
param_tab <- parameters::model_parameters(rum.peri1, effects = "fixed")
d <- t_to_d(param_tab$t[2:10], param_tab$df_error[2:10])
interpret_cohens_d(d[1])
rum.peri.BF1 <- lmBF(ruminating_gam ~ group + intervention * gameNumSubjB +
meanNA_gam + meanPA_gam + distracted_gam +
meanRT_gam + commissionError_gam + subjB,
whichRandom = c("subjB"),
data = sart[which((!is.na(sart$meanRT_gam)) & (!is.na(sart$commissionError))),])
rum.peri.BF2 <- lmBF(ruminating_gam ~ group + intervention * gameNumSubjB +
meanNA_gam + meanPA_gam + distracted_gam +
meanRT_gam + subjB,
whichRandom = c("subjB"),
data = sart[which((!is.na(sart$meanRT_gam)) & (!is.na(sart$commissionError))),])
rum.peri.BF1 / rum.peri.BF2
rum.peri.BF3 <- lmBF(ruminating_gam ~ group + intervention * gameNumSubjB +
meanNA_gam + meanPA_gam + distracted_gam +
commissionError_gam + subjB,
whichRandom = c("subjB"),
data = sart[which((!is.na(sart$meanRT_gam)) & (!is.na(sart$commissionError))),])
rum.peri.BF1 / rum.peri.BF3
dist.peri1 <- lmer(distracted_gam ~ group + intervention * gameNumSubjB +
meanNA_gam + meanPA_gam + ruminating_gam +
meanRT_gam + commissionError_gam +
(1 | subjB),
data = sart[which(!is.na(sart$meanRT_gam)),])
summary(dist.peri1)
param_tab <- parameters::model_parameters(dist.peri1, effects = "fixed")
d <- t_to_d(param_tab$t[2:10], param_tab$df_error[2:10])
interpret_cohens_d(d[1])
dist.peri.BF1 <- lmBF(distracted_gam ~ group + intervention * gameNumSubjB +
meanNA_gam + meanPA_gam + ruminating_gam +
meanRT_gam + commissionError_gam + subjB,
whichRandom = c("subjB"),
data = sart[which((!is.na(sart$meanRT_gam)) & (!is.na(sart$commissionError))),])
dist.peri.BF2 <- lmBF(distracted_gam ~ group + intervention * gameNumSubjB +
meanNA_gam + meanPA_gam + ruminating_gam +
meanRT_gam + subjB,
whichRandom = c("subjB"),
data = sart[which((!is.na(sart$meanRT_gam)) & (!is.na(sart$commissionError))),])
dist.peri.BF1 / dist.peri.BF2
dist.peri.BF3 <- lmBF(distracted_gam ~ group + intervention * gameNumSubjB +
meanNA_gam + meanPA_gam + ruminating_gam +
commissionError_gam + subjB,
whichRandom = c("subjB"),
data = sart[which((!is.na(sart$meanRT_gam)) & (!is.na(sart$commissionError))),])
dist.peri.BF1 / dist.peri.BF3
source("C:/Users/cleme/Documents/Education/RUG/Thesis/EMA-mindfulness/Data/common_plot_theme.R")
setwd("C:/Users/cleme/Documents/Education/RUG/Thesis/EMA-mindfulness/Data") #/ESM/mindcog_v202207
#setwd("~/Documents/RUG/Thesis/EMA-mindfulness/Data/")
library(tidyverse)
library(plyr)
library(dplyr)
library(data.table)
library(ggplot2)
library(itsadug)
library(mgcv)
library(tidyr)           # Simplify R code
library(car)
library(MASS)
library(performance)
library(lme4)
library(effectsize)
library(lmerTest) #to more quickly be able to see significance
library(plotfunctions)
library(gratia)
library(arm)
library(ggthemes)
library(ggpattern)
#Pick response rate cut-off value
cutOff <- 0.5
rescale.coefs <- function(beta,mu,sigma) {
beta2 <- beta ## inherit names etc.
# print(beta)
# print(mu)
# print(sigma)
beta2[-1] <- sigma[1]*beta[-1]/sigma[-1]
beta2[1]  <- sigma[1]*beta[1]+mu[1]-sum(beta2[-1]*mu[-1])
return(beta2)
}
#read in data
data <- read.csv('merged_data.csv')
data$group <- factor(data$group, levels = c("remitted", "controls"))
data$intervention <- factor(data$intervention, levels = c("mindfulness", "fantasizing"))
data$subjB <- factor(data$subjB)
responses_block <- ddply(data, .(subject, group), plyr::summarise,
numBeeped = length(mindcog_db_open_from),
noResponse = length(unique(mindcog_db_non_response)),
response = numBeeped - noResponse,
responseRate = round(response/numBeeped,2),
numDays = max(assessmentDay))
meanResponseRate_block <- mean(responses_block$responseRate) #the mean response rate is ~67.6%
length(unique(responses_block[which(responses_block$responseRate >= meanResponseRate_block),]$subject)) #20
length(unique(responses_block[which(responses_block$responseRate >= 0.6),]$subject)) #26
length(unique(responses_block[which(responses_block$responseRate >= 0.5),]$subject)) #33
length(unique(responses_block[which(responses_block$group == "remitted"),]$subject)) #16
length(unique(responses_block[which(responses_block$group == "controls"),]$subject)) #23
#removing participants with a response rate lower than 50%
pp <- unique(responses_block[which(responses_block$responseRate >= cutOff),]$subject)
data <- data[which(data$subject %in% pp),]
###########################################################################################################
############################################ Scaling Data #################################################
###########################################################################################################
#creating variables minus baseline means per subject
met.vars <- c('ruminating', 'stickiness', 'sumNA', 'meanNA',  'down', 'irritated', 'restless', 'anxious',
'sumPA', 'meanPA', 'wakeful', 'satisfied', 'energetic',
'stressed', 'listless',  'distracted',
'thoughtsPleasant', 'restOfDayPos', 'companyPleasant', 'alonePleasant',
'posMax', 'posIntensity', 'negMax', 'negIntensity',
"sleepQuality", "sleepLatency", "sleepDuration", "restednessWakeup")
#in addition we create a new list which includes both the changed and unchanged met.vars for scaling later on
scale.vars <- c(rep(NA, length(met.vars)*3))
i = 0
for(v in met.vars){
new_var <- paste(v, "_diff", sep = "")
data[[new_var]] <- NA
gam_var <- paste(v, "_gam", sep = "")
data[[gam_var]] <- NA
i = i+1
scale.vars[[i]] <- v
i = i+1
scale.vars[[i]] <- new_var
i = i+1
scale.vars[[i]] <- gam_var
for(id in unique(data$subject)){
for(b in 1:2){
pre_rows <- which((data$subject == id) & (data$phase=="pre") & (data$block==b))
peri_rows <- which((data$subject == id) & (data$phase=="peri") & (data$block==b))
s_rows <- which((data$subject == id) & (data$block==b))
baselineMean <- mean(data[[v]][pre_rows], na.rm=TRUE)
if(is.na(baselineMean)){
baselineMean <- 0
}
data[[new_var]][s_rows] <- round(data[[v]][s_rows] - baselineMean, 2)
data[[gam_var]][pre_rows] <- NA
data[[gam_var]][peri_rows] <- round(data[[v]][peri_rows] - baselineMean, 2)
}
}
}
#creating a scaled version of data
sc_data <- copy(data)
sc_data[scale.vars] <- scale(sc_data[scale.vars])
baseDat <- data[which((data$phase=="pre")),]
sc_baseDat <- sc_data[which((sc_data$phase=="pre")),]
#ruminating
rum.int <- lmer(ruminating ~ 1 + (1|subject), data = baseDat)
load("models_rumination/rum_unscaled_contemp.rda")
check_resid(rum.gam_unscaled)
load("models_na/na_unscaled_contemp.rda")
check_resid(na.gam_unscaled)
plot(na.gam_unscaled$y, na.gam_unscaled$residuals)
plot(rum.gam_unscaled)
check_resid(rum.gam_unscaled)
plot(rum.gam_unscaled$y, rum.gam_unscaled$residuals)
base.m1 <- lmer(responseTime ~ group * isGo + factor(correct) + gameSessionID + (1 | subject),
data = numbers[which(numbers$phase == "pre"),])
base.m2 <- lmer(responseTime ~ group + isGo + factor(correct) + gameSessionID + (1 | subject),
data = numbers[which(numbers$phase == "pre"),])
anova(base.m1, base.m2) #m1 preferred
base.m3 <- lmer(responseTime ~ group * isGo + gameSessionID + (1 | subject),
data = numbers[which(numbers$phase == "pre"),])
anova(base.m1, base.m3) #m3 preferred
## correct
correct.m1 <- glmer(factor(correct) ~ group * scale(responseTime) * isGo + gameSessionID + (1 | subject),
data = numbers, family = binomial())
summary(correct.m1)
peri.m1 <- lmer(responseTime_gam ~ group * intervention * isGo + factor(correct) + gameSessionID + intervention:gameSessionID +
(1 | subject),
data = numbers)
peri.m1b <- lmer(responseTime_gam ~ group * intervention * isGo + factor(correct) + gameSessionID +
(1 | subject),
data = numbers)
anova(peri.m1, peri.m1b) #m1 preferred
peri.m1c <- lmer(responseTime_gam ~ group * intervention * isGo + gameSessionID +
(1 | subject),
data = numbers)
anova(peri.m1, peri.m1c) #m1 preferred
peri.m1c <- lmer(responseTime_gam ~ group * intervention * isGo + gameSessionID + intervention:gameSessionID +
(1 | subject),
data = numbers)
anova(peri.m1, peri.m1c) #m1 preferred
base.m3b <- lmer(responseTime ~ group * isGo + gameSessionID + factor(correct) + (1 | subject),
data = numbers[which(numbers$phase == "pre"),])
summary(base.m3b)

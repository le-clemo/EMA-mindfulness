m4sc <- gam(ruminating ~ group * intervention * blockPhase * thoughtsObject_lag1 *
thoughtsTime_lag1 * thoughtsValence_lag1 + s(beepNum) +
aloneCompany_lag1 +
s(sumNA_lag1) + s(posMax_lag1) + s(sleepQuality) +
s(stickiness_lag1) + s(negMax_lag1) +
s(beepNum, by = subject, bs="fs", m=1) + s(group, bs="re"),
data = sc_data, family = "scat")
rm(list = ls()) #clean all up
setwd("C:/Users/cleme/Documents/Education/RUG/Thesis/EMA-mindfulness/Data")
#setwd("~/Documents/RUG/Thesis/EMA-mindfulness/Data")
library(ggplot2)
library(data.table)
library(lme4)
library(mgcv)
library(itsadug)
library(dplyr)
library(plyr)
library(lmerTest) #to more quickly be able to see significance
library(plotfunctions)
library(gratia)
library(rms)
R.version.string
packageVersion("mgcv")
packageVersion("itsadug")
#load preprocessed ESM data
data <- read.csv('ESM/mindcog_v202204/preprocessed_data.csv')
#set factors
data$group <- factor(data$group, levels = c("controls", "remitted"))
data$subject <- as.factor(data$subject)
data$intervention <- factor(data$intervention, levels = c("mindfulness", "fantasizing"))
data$phase <- factor(data$phase, levels = c("pre", "peri"))
data$phase = relevel(data$phase, ref="pre")
data$grInt <- as.factor(paste(data$group, data$intervention, sep = "."))
data$grIntPhase <- as.factor(paste(data$grInt, data$phase, sep = "."))
data$grIntPhase = relevel(data$grIntPhase, ref="controls.fantasizing.pre")
data$blockPhase <- as.factor(paste(data$phase, data$block, sep = "."))
data$blockPhase = relevel(data$blockPhase, ref="pre.1")
data$thinkingOf <- as.factor(data$thinkingOf)
data$thoughtsValence <- as.factor(data$thoughtsValence)
data$thoughtsTime <- as.factor(data$thoughtsTime)
data$thoughtsObject <- as.factor(data$thoughtsObject)
data$aloneCompany <- as.factor(data$aloneCompany)
data$sleepScore <- data$sleepQuality + data$restednessWakeup
#set sleepScore for every assessment per day
for(id in unique(data$subject)){
respondent_rows <- which(data$subject == id)
current_day <- 0
for(row in respondent_rows){
if((data$assessmentDay[row] != current_day) & (!is.na(data$sleepScore[row]))){
sleep_score <- data$sleepScore[row]
current_day <- data$assessmentDay[row]
} else if((data$assessmentDay[row] == current_day) & (is.na(data$sleepScore[row]))){
data$sleepScore[row] <- sleep_score
}
}
}
#same for sleepQuality
for(id in unique(data$subject)){
respondent_rows <- which(data$subject == id)
current_day <- 0
for(row in respondent_rows){
if((data$assessmentDay[row] != current_day) & (!is.na(data$sleepQuality[row]))){
sleep_quality <- data$sleepQuality[row]
current_day <- data$assessmentDay[row]
} else if((data$assessmentDay[row] == current_day) & (is.na(data$sleepQuality[row]))){
data$sleepQuality[row] <- sleep_quality
}
}
}
#same for sleepDuration
for(id in unique(data$subject)){
respondent_rows <- which(data$subject == id)
current_day <- 0
for(row in respondent_rows){
if((data$assessmentDay[row] != current_day) & (!is.na(data$sleepDuration[row]))){
sleep_duration <- data$sleepDuration[row]
current_day <- data$assessmentDay[row]
} else if((data$assessmentDay[row] == current_day) & (is.na(data$sleepDuration[row]))){
data$sleepDuration[row] <- sleep_duration
}
}
}
#aaaaaaand for sleepLatency
for(id in unique(data$subject)){
respondent_rows <- which(data$subject == id)
current_day <- 0
for(row in respondent_rows){
if((data$assessmentDay[row] != current_day) & (!is.na(data$sleepLatency[row]))){
sleep_latency <- data$sleepLatency[row]
current_day <- data$assessmentDay[row]
} else if((data$assessmentDay[row] == current_day) & (is.na(data$sleepLatency[row]))){
data$sleepLatency[row] <- sleep_latency
}
}
}
#aaaaaaand for restednessWakeup
for(id in unique(data$subject)){
respondent_rows <- which(data$subject == id)
current_day <- 0
for(row in respondent_rows){
if((data$assessmentDay[row] != current_day) & (!is.na(data$restednessWakeup[row]))){
restedness <- data$restednessWakeup[row]
current_day <- data$assessmentDay[row]
} else if((data$assessmentDay[row] == current_day) & (is.na(data$restednessWakeup[row]))){
data$restednessWakeup[row] <- restedness
}
}
}
#ruminating
hist(data$ruminating)
qqnorm(data$ruminating)
qqline(data$ruminating)
#sumNA
hist(data$sumNA)
qqnorm(data$sumNA)
qqline(data$sumNA)
#create a scaled version of data
pvars <- c( "ruminating", "sumNA", "stressed", "listless", "stickiness",# Scaling numeric parameters
"sumPA", "distracted", "companyPleasant", "alonePleasant", "posMax", "posIntensity", "negMax",
"negIntensity", "restOfDayPos", "sleepQuality", "sleepDuration", "sleepLatency", "restednessWakeup",
"ruminating_lag1", "sumNA_lag1", "stressed_lag1", "listless_lag1", "stickiness_lag1",# Scaling numeric parameters
"sumPA_lag1", "distracted_lag1", "companyPleasant_lag1", "alonePleasant_lag1", "posMax_lag1",
"posIntensity_lag1", "negMax_lag1", "negIntensity_lag1", "restOfDayPos_lag1")
sc_data <- copy(data)
sc_data[pvars] <- lapply(sc_data[pvars],scale)
sc_data$subjB <- interaction(sc_data$subject, sc_data$block, drop = TRUE)
sc_data$subjB <- as.factor(sc_data$subjB)
sc_data$subjPh <- interaction(sc_data$subject, sc_data$phase, sc_data$block, drop = TRUE)
sc_data$subjPh <- as.factor(sc_data$subjPh)
#number of participants so far
length(unique(sc_data$subject)) #39 associated with a group
participant_responses <- ddply(sc_data, .(subject), plyr::summarise,
numCompleted = length(mindcog_db_open_from),
noResponse = length(unique(mindcog_db_non_response)),
response = numCompleted - noResponse,
responseRate = round(response/numCompleted,2),
numDays = max(assessmentDay))
meanResponseRate <- mean(participant_responses$responseRate) #the mean response rate is ~68%
length(unique(participant_responses[which(participant_responses$responseRate >= meanResponseRate),]$subject)) #21
length(unique(participant_responses[which(participant_responses$responseRate >= 0.6),]$subject)) #26
length(unique(participant_responses[which(participant_responses$responseRate >= 0.5),]$subject)) #33
pp <- unique(participant_responses[which(participant_responses$responseRate >= 0.6),]$subject)
sc_data <- sc_data[which(sc_data$subject %in% pp),]
m4sc <- gam(ruminating ~ group * intervention * blockPhase * thoughtsObject_lag1 *
thoughtsTime_lag1 * thoughtsValence_lag1 + s(beepNum) +
aloneCompany_lag1 +
s(sumNA_lag1) + s(posMax_lag1) + s(sleepQuality) +
s(stickiness_lag1) + s(negMax_lag1) +
s(beepNum, by = subject, bs="fs", m=1) + s(group, bs="re"),
data = sc_data, family = "scat")
summarym4sc <- summary(m4sc)

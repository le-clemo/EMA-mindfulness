#get all rows associated with this userID, subject and gameSessionID
n_rows <- which((numbers$userID==id) & (numbers$subject==subj) & (numbers$gameSessionID==gid))
#potentially add (!is.na(numbers$cycle)) to avoid adding the possibly faulty trials of the game session
#get the mean response time overall (combined for all cycles)
meanRT <- mean(numbers[n_rows,]$responseTime, na.rm = TRUE)
#meanRT for Go trials
meanRT_Go <- mean(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==TRUE)),]$responseTime, na.rm = TRUE)
#meanRT for No-Go trials
meanRT_NoGo <- mean(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==FALSE)),]$responseTime, na.rm = TRUE)
#get the proportion of correct trials overall
propCor <- round(length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj)),]$id), 2)
#get the proportion of correct trials on Go trials
propCor_Go <- length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==TRUE) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==TRUE)),]$id)
#get the proportion of correct trials on No-Go trials
propCor_NoGo <- round(length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==FALSE) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==FALSE)),]$id), 2)
#add all measures to the relevant rows
numbers[n_rows, ]$meanRT <- round(meanRT, 2)
numbers[n_rows, ]$meanRT_Go <- round(meanRT_Go, 2)
numbers[n_rows, ]$meanRT_NoGo <- round(meanRT_NoGo, 2)
numbers[n_rows, ]$propCor <- round(propCor, 2)
numbers[n_rows, ]$propCor_Go <- round(propCor_Go, 2)
numbers[n_rows, ]$propCor_NoGo <- round(propCor_NoGo, 2)
#get the number of cycles performed in this gameSession
num_cycles <- unique(numbers[n_rows,]$cycle)
num_cycles <- num_cycles[!is.na(num_cycles)]
#measures per cycle
if(length(num_cycles)==0){
next
} else {
for(i in num_cycles){ #for every cycle
if(!is.na(i)){
if(subj=="s15") {
print("game number:")
print(gid)
print("Cycle:")
print(i)
print("Rows:")
print(c_rows)
}
#get the rows associated with this particular cycle
c_rows <- which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i))
meanRT_cycle <- mean(numbers[c_rows,]$responseTime, na.rm = TRUE)#meanRT per cycle overall
# print(meanRT_cycle)
meanRT_Go_cycle <- mean(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==TRUE)),]$responseTime, na.rm = TRUE)#meanRT per cycle for Go trials
meanRT_NoGo_cycle <- mean(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==FALSE)),]$responseTime, na.rm = TRUE)#meanRT per cycle for No-Go trials
propCor_cycle <- length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i)),]$id)
# print(propCor_cycle)
propCor_Go_cycle <- length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==TRUE) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==TRUE)),]$id)
propCor_NoGo_cycle <- length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==FALSE) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==FALSE)),]$id)
if(subj=="s15"){
print(meanRT_cycle)
print(propCor_cycle)
}
#and add to the relevant rows
numbers[c_rows, ]$meanRT_cycle <- round(meanRT_cycle, 2)
numbers[c_rows, ]$meanRT_Go_cycle <- round(meanRT_Go_cycle, 2)
numbers[c_rows, ]$meanRT_NoGo_cycle <- round(meanRT_NoGo_cycle, 2)
numbers[c_rows, ]$propCor_cycle <- round(propCor_cycle, 2)
numbers[c_rows, ]$propCor_Go_cycle <- round(propCor_Go_cycle, 2)
numbers[c_rows, ]$propCor_NoGo_cycle <- round(propCor_NoGo_cycle, 2)
}
}
}
}
}
}
dates
rlang::last_error()
rlang::last_trace()
dates
d_rows
length(d_rows)
length(meanRT)
for(subj in subject_IDs){
if(is.na(subj)){ #if it's NA --> skip iteration
next
} else { #else get all the userIDs for this subject
print(subj)
user_IDs <- unique(numbers[which(numbers$subject==subj),]$userID)
}
for(id in user_IDs){ #for each userID get all game sessions
dates <- unique(numbers[which((numbers$userID==id) & (numbers$subject==subj)),]$date)
for(d in dates){
d_rows <- which((numbers$userID==id) & (numbers$subject==subj) & (numbers$date==d))
#get the mean response time overall (combined for all cycles)
meanRT <- mean(numbers[d_rows,]$responseTime, na.rm = TRUE)
#meanRT for Go trials
meanRT_Go <- mean(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj) &
(numbers$isGo==TRUE)),]$responseTime, na.rm = TRUE)
#meanRT for No-Go trials
meanRT_NoGo <- mean(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj) &
(numbers$isGo==FALSE)),]$responseTime, na.rm = TRUE)
#get the proportion of correct trials overall
propCor <- round(length(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj) &
(numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj)),]$id), 2)
#get the proportion of correct trials on Go trials
propCor_Go <- length(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj) &
(numbers$isGo==TRUE) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj) &
(numbers$isGo==TRUE)),]$id)
#get the proportion of correct trials on No-Go trials
propCor_NoGo <- round(length(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj) &
(numbers$isGo==FALSE) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj) &
(numbers$isGo==FALSE)),]$id), 2)
print("measures calculated")
#add all measures to the relevant rows
numbers[d_rows, ]$meanRT_date <- round(meanRT, 2)
numbers[d_rows, ]$meanRT_Go_date <- round(meanRT_Go, 2)
numbers[d_rows, ]$meanRT_NoGo_date <- round(meanRT_NoGo, 2)
numbers[d_rows, ]$propCor_date <- round(propCor, 2)
numbers[d_rows, ]$propCor_Go_date <- round(propCor_Go, 2)
numbers[d_rows, ]$propCor_NoGo_date <- round(propCor_NoGo, 2)
}
game_ids <- unique(numbers[which((numbers$userID==id) & (numbers$subject==subj)),]$gameSessionID)
for(gid in game_ids){
#get all rows associated with this userID, subject and gameSessionID
n_rows <- which((numbers$userID==id) & (numbers$subject==subj) & (numbers$gameSessionID==gid))
#potentially add (!is.na(numbers$cycle)) to avoid adding the possibly faulty trials of the game session
#get the mean response time overall (combined for all cycles)
meanRT <- mean(numbers[n_rows,]$responseTime, na.rm = TRUE)
#meanRT for Go trials
meanRT_Go <- mean(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==TRUE)),]$responseTime, na.rm = TRUE)
#meanRT for No-Go trials
meanRT_NoGo <- mean(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==FALSE)),]$responseTime, na.rm = TRUE)
#get the proportion of correct trials overall
propCor <- round(length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj)),]$id), 2)
#get the proportion of correct trials on Go trials
propCor_Go <- length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==TRUE) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==TRUE)),]$id)
#get the proportion of correct trials on No-Go trials
propCor_NoGo <- round(length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==FALSE) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==FALSE)),]$id), 2)
#add all measures to the relevant rows
numbers[n_rows, ]$meanRT <- round(meanRT, 2)
numbers[n_rows, ]$meanRT_Go <- round(meanRT_Go, 2)
numbers[n_rows, ]$meanRT_NoGo <- round(meanRT_NoGo, 2)
numbers[n_rows, ]$propCor <- round(propCor, 2)
numbers[n_rows, ]$propCor_Go <- round(propCor_Go, 2)
numbers[n_rows, ]$propCor_NoGo <- round(propCor_NoGo, 2)
#get the number of cycles performed in this gameSession
num_cycles <- unique(numbers[n_rows,]$cycle)
num_cycles <- num_cycles[!is.na(num_cycles)]
#measures per cycle
if(length(num_cycles)==0){
next
} else {
for(i in num_cycles){ #for every cycle
if(!is.na(i)){
if(subj=="s15") {
print("game number:")
print(gid)
print("Cycle:")
print(i)
print("Rows:")
print(c_rows)
}
#get the rows associated with this particular cycle
c_rows <- which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i))
meanRT_cycle <- mean(numbers[c_rows,]$responseTime, na.rm = TRUE)#meanRT per cycle overall
# print(meanRT_cycle)
meanRT_Go_cycle <- mean(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==TRUE)),]$responseTime, na.rm = TRUE)#meanRT per cycle for Go trials
meanRT_NoGo_cycle <- mean(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==FALSE)),]$responseTime, na.rm = TRUE)#meanRT per cycle for No-Go trials
propCor_cycle <- length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i)),]$id)
# print(propCor_cycle)
propCor_Go_cycle <- length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==TRUE) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==TRUE)),]$id)
propCor_NoGo_cycle <- length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==FALSE) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==FALSE)),]$id)
if(subj=="s15"){
print(meanRT_cycle)
print(propCor_cycle)
}
#and add to the relevant rows
numbers[c_rows, ]$meanRT_cycle <- round(meanRT_cycle, 2)
numbers[c_rows, ]$meanRT_Go_cycle <- round(meanRT_Go_cycle, 2)
numbers[c_rows, ]$meanRT_NoGo_cycle <- round(meanRT_NoGo_cycle, 2)
numbers[c_rows, ]$propCor_cycle <- round(propCor_cycle, 2)
numbers[c_rows, ]$propCor_Go_cycle <- round(propCor_Go_cycle, 2)
numbers[c_rows, ]$propCor_NoGo_cycle <- round(propCor_NoGo_cycle, 2)
}
}
}
}
}
}
meanRT_cycle
meanRT_date
meanRT
meanRT_Go
meanRT_NoGo
propCor
propCor_Go
propCor_NoGo
length(d_rows)
for(subj in subject_IDs){
if(is.na(subj)){ #if it's NA --> skip iteration
next
} else { #else get all the userIDs for this subject
print(subj)
user_IDs <- unique(numbers[which(numbers$subject==subj),]$userID)
}
for(id in user_IDs){ #for each userID get all game sessions
dates <- unique(numbers[which((numbers$userID==id) & (numbers$subject==subj)),]$date)
for(d in dates){
d_rows <- which((numbers$userID==id) & (numbers$subject==subj) & (numbers$date==d))
#get the mean response time overall (combined for all cycles)
meanRT <- mean(numbers[d_rows,]$responseTime, na.rm = TRUE)
#meanRT for Go trials
meanRT_Go <- mean(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj) &
(numbers$isGo==TRUE)),]$responseTime, na.rm = TRUE)
#meanRT for No-Go trials
meanRT_NoGo <- mean(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj) &
(numbers$isGo==FALSE)),]$responseTime, na.rm = TRUE)
#get the proportion of correct trials overall
propCor <- round(length(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj) &
(numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj)),]$id), 2)
#get the proportion of correct trials on Go trials
propCor_Go <- length(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj) &
(numbers$isGo==TRUE) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj) &
(numbers$isGo==TRUE)),]$id)
#get the proportion of correct trials on No-Go trials
propCor_NoGo <- round(length(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj) &
(numbers$isGo==FALSE) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj) &
(numbers$isGo==FALSE)),]$id), 2)
print("measures calculated")
#add all measures to the relevant rows
numbers[d_rows, ]$meanRT_date <- round(meanRT, 2)
print("meanRT added")
numbers[d_rows, ]$meanRT_Go_date <- round(meanRT_Go, 2)
numbers[d_rows, ]$meanRT_NoGo_date <- round(meanRT_NoGo, 2)
numbers[d_rows, ]$propCor_date <- round(propCor, 2)
numbers[d_rows, ]$propCor_Go_date <- round(propCor_Go, 2)
numbers[d_rows, ]$propCor_NoGo_date <- round(propCor_NoGo, 2)
}
game_ids <- unique(numbers[which((numbers$userID==id) & (numbers$subject==subj)),]$gameSessionID)
for(gid in game_ids){
#get all rows associated with this userID, subject and gameSessionID
n_rows <- which((numbers$userID==id) & (numbers$subject==subj) & (numbers$gameSessionID==gid))
#potentially add (!is.na(numbers$cycle)) to avoid adding the possibly faulty trials of the game session
#get the mean response time overall (combined for all cycles)
meanRT <- mean(numbers[n_rows,]$responseTime, na.rm = TRUE)
#meanRT for Go trials
meanRT_Go <- mean(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==TRUE)),]$responseTime, na.rm = TRUE)
#meanRT for No-Go trials
meanRT_NoGo <- mean(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==FALSE)),]$responseTime, na.rm = TRUE)
#get the proportion of correct trials overall
propCor <- round(length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj)),]$id), 2)
#get the proportion of correct trials on Go trials
propCor_Go <- length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==TRUE) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==TRUE)),]$id)
#get the proportion of correct trials on No-Go trials
propCor_NoGo <- round(length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==FALSE) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==FALSE)),]$id), 2)
#add all measures to the relevant rows
numbers[n_rows, ]$meanRT <- round(meanRT, 2)
numbers[n_rows, ]$meanRT_Go <- round(meanRT_Go, 2)
numbers[n_rows, ]$meanRT_NoGo <- round(meanRT_NoGo, 2)
numbers[n_rows, ]$propCor <- round(propCor, 2)
numbers[n_rows, ]$propCor_Go <- round(propCor_Go, 2)
numbers[n_rows, ]$propCor_NoGo <- round(propCor_NoGo, 2)
#get the number of cycles performed in this gameSession
num_cycles <- unique(numbers[n_rows,]$cycle)
num_cycles <- num_cycles[!is.na(num_cycles)]
#measures per cycle
if(length(num_cycles)==0){
next
} else {
for(i in num_cycles){ #for every cycle
if(!is.na(i)){
if(subj=="s15") {
print("game number:")
print(gid)
print("Cycle:")
print(i)
print("Rows:")
print(c_rows)
}
#get the rows associated with this particular cycle
c_rows <- which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i))
meanRT_cycle <- mean(numbers[c_rows,]$responseTime, na.rm = TRUE)#meanRT per cycle overall
# print(meanRT_cycle)
meanRT_Go_cycle <- mean(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==TRUE)),]$responseTime, na.rm = TRUE)#meanRT per cycle for Go trials
meanRT_NoGo_cycle <- mean(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==FALSE)),]$responseTime, na.rm = TRUE)#meanRT per cycle for No-Go trials
propCor_cycle <- length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i)),]$id)
# print(propCor_cycle)
propCor_Go_cycle <- length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==TRUE) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==TRUE)),]$id)
propCor_NoGo_cycle <- length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==FALSE) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==FALSE)),]$id)
if(subj=="s15"){
print(meanRT_cycle)
print(propCor_cycle)
}
#and add to the relevant rows
numbers[c_rows, ]$meanRT_cycle <- round(meanRT_cycle, 2)
numbers[c_rows, ]$meanRT_Go_cycle <- round(meanRT_Go_cycle, 2)
numbers[c_rows, ]$meanRT_NoGo_cycle <- round(meanRT_NoGo_cycle, 2)
numbers[c_rows, ]$propCor_cycle <- round(propCor_cycle, 2)
numbers[c_rows, ]$propCor_Go_cycle <- round(propCor_Go_cycle, 2)
numbers[c_rows, ]$propCor_NoGo_cycle <- round(propCor_NoGo_cycle, 2)
}
}
}
}
}
}
round(meanRT_cycle, 2)
numbers[c_rows, ]$meanRT_cycle <- round(meanRT_cycle, 2)
numbers[d_rows, ]$meanRT_date <- round(meanRT, 2)
numbers[d_rows, ]$meanRT_date
numbers$meanRT_date <- NA
numbers$meanRT_Go_date <- NA
numbers$meanRT_NoGo_date <- NA
numbers$propCor_date <- NA
numbers$propCor_Go_date <- NA
numbers$propCor_NoGo_date <- NA
for(subj in subject_IDs){
if(is.na(subj)){ #if it's NA --> skip iteration
next
} else { #else get all the userIDs for this subject
print(subj)
user_IDs <- unique(numbers[which(numbers$subject==subj),]$userID)
}
for(id in user_IDs){ #for each userID get all game sessions
dates <- unique(numbers[which((numbers$userID==id) & (numbers$subject==subj)),]$date)
for(d in dates){
d_rows <- which((numbers$userID==id) & (numbers$subject==subj) & (numbers$date==d))
#get the mean response time overall (combined for all cycles)
meanRT <- mean(numbers[d_rows,]$responseTime, na.rm = TRUE)
#meanRT for Go trials
meanRT_Go <- mean(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj) &
(numbers$isGo==TRUE)),]$responseTime, na.rm = TRUE)
#meanRT for No-Go trials
meanRT_NoGo <- mean(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj) &
(numbers$isGo==FALSE)),]$responseTime, na.rm = TRUE)
#get the proportion of correct trials overall
propCor <- round(length(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj) &
(numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj)),]$id), 2)
#get the proportion of correct trials on Go trials
propCor_Go <- length(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj) &
(numbers$isGo==TRUE) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj) &
(numbers$isGo==TRUE)),]$id)
#get the proportion of correct trials on No-Go trials
propCor_NoGo <- round(length(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj) &
(numbers$isGo==FALSE) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$date==d) & (numbers$subject==subj) &
(numbers$isGo==FALSE)),]$id), 2)
print("measures calculated")
#add all measures to the relevant rows
numbers[d_rows, ]$meanRT_date <- round(meanRT, 2)
print("meanRT added")
numbers[d_rows, ]$meanRT_Go_date <- round(meanRT_Go, 2)
numbers[d_rows, ]$meanRT_NoGo_date <- round(meanRT_NoGo, 2)
numbers[d_rows, ]$propCor_date <- round(propCor, 2)
numbers[d_rows, ]$propCor_Go_date <- round(propCor_Go, 2)
numbers[d_rows, ]$propCor_NoGo_date <- round(propCor_NoGo, 2)
}
game_ids <- unique(numbers[which((numbers$userID==id) & (numbers$subject==subj)),]$gameSessionID)
for(gid in game_ids){
#get all rows associated with this userID, subject and gameSessionID
n_rows <- which((numbers$userID==id) & (numbers$subject==subj) & (numbers$gameSessionID==gid))
#potentially add (!is.na(numbers$cycle)) to avoid adding the possibly faulty trials of the game session
#get the mean response time overall (combined for all cycles)
meanRT <- mean(numbers[n_rows,]$responseTime, na.rm = TRUE)
#meanRT for Go trials
meanRT_Go <- mean(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==TRUE)),]$responseTime, na.rm = TRUE)
#meanRT for No-Go trials
meanRT_NoGo <- mean(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==FALSE)),]$responseTime, na.rm = TRUE)
#get the proportion of correct trials overall
propCor <- round(length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj)),]$id), 2)
#get the proportion of correct trials on Go trials
propCor_Go <- length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==TRUE) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==TRUE)),]$id)
#get the proportion of correct trials on No-Go trials
propCor_NoGo <- round(length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==FALSE) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$isGo==FALSE)),]$id), 2)
#add all measures to the relevant rows
numbers[n_rows, ]$meanRT <- round(meanRT, 2)
numbers[n_rows, ]$meanRT_Go <- round(meanRT_Go, 2)
numbers[n_rows, ]$meanRT_NoGo <- round(meanRT_NoGo, 2)
numbers[n_rows, ]$propCor <- round(propCor, 2)
numbers[n_rows, ]$propCor_Go <- round(propCor_Go, 2)
numbers[n_rows, ]$propCor_NoGo <- round(propCor_NoGo, 2)
#get the number of cycles performed in this gameSession
num_cycles <- unique(numbers[n_rows,]$cycle)
num_cycles <- num_cycles[!is.na(num_cycles)]
#measures per cycle
if(length(num_cycles)==0){
next
} else {
for(i in num_cycles){ #for every cycle
if(!is.na(i)){
if(subj=="s15") {
print("game number:")
print(gid)
print("Cycle:")
print(i)
print("Rows:")
print(c_rows)
}
#get the rows associated with this particular cycle
c_rows <- which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i))
meanRT_cycle <- mean(numbers[c_rows,]$responseTime, na.rm = TRUE)#meanRT per cycle overall
# print(meanRT_cycle)
meanRT_Go_cycle <- mean(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==TRUE)),]$responseTime, na.rm = TRUE)#meanRT per cycle for Go trials
meanRT_NoGo_cycle <- mean(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==FALSE)),]$responseTime, na.rm = TRUE)#meanRT per cycle for No-Go trials
propCor_cycle <- length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i)),]$id)
# print(propCor_cycle)
propCor_Go_cycle <- length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==TRUE) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==TRUE)),]$id)
propCor_NoGo_cycle <- length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==FALSE) & (numbers$correct==TRUE)),]$id) /
length(numbers[which((numbers$userID==id) & (numbers$gameSessionID==gid) & (numbers$subject==subj) &
(numbers$cycle==i) & (numbers$isGo==FALSE)),]$id)
if(subj=="s15"){
print(meanRT_cycle)
print(propCor_cycle)
}
#and add to the relevant rows
numbers[c_rows, ]$meanRT_cycle <- round(meanRT_cycle, 2)
numbers[c_rows, ]$meanRT_Go_cycle <- round(meanRT_Go_cycle, 2)
numbers[c_rows, ]$meanRT_NoGo_cycle <- round(meanRT_NoGo_cycle, 2)
numbers[c_rows, ]$propCor_cycle <- round(propCor_cycle, 2)
numbers[c_rows, ]$propCor_Go_cycle <- round(propCor_Go_cycle, 2)
numbers[c_rows, ]$propCor_NoGo_cycle <- round(propCor_NoGo_cycle, 2)
}
}
}
}
}
}

rm(list = ls()) #clean all up
#setwd("C:/Users/cleme/Documents/Education/RUG/Thesis/EMA-mindfulness/Data/ESM/mindcog_v202202-2")
setwd("~/Documents/RUG/Thesis/EMA-mindfulness/Data/ESM/mindcog_v202202-2")
library(readxl)
library(tidyverse)
library(plyr)
library(dplyr)
library(Hmisc)
library(corrplot)
library(data.table)
library(ggplot2)
library(reshape)
library(ggpubr)
library(lubridate)
library(igraph)
library(qgraph)
#read in data
data <- read_xlsx('mindcog_db_2022-02-14.xlsx')
#################################### Data clean up ####################################
#drop unnecessary columns
data <- subset(data, select = -c(roqua_id, hide_pii_from_researchers, gender, birth_year,
hide_values_from_professionals, respondent_label, respondent_type,
mindcog_db_project, mindcog_db_notes, mindcog_db_location,
mindcog_db_invited_at, mindcog_db_emailed_at, mindcog_db_variant,
mindcog_db_anonymous))
#turn all ids to lower case for easier error handling below
data$id <- tolower(data$id)
#fix various errors in id column
for(row in 1:nrow(data)) { #some "s" are missing
if( ! (grepl("s", data$id[row], fixed=TRUE)) & (!(is.na(data$id[row])))){
data$id[row] <- paste("s", data$id[row], sep = "")
}
if( ! (grepl("_g", data$id[row], fixed=TRUE))){ #some "_" prior to "g" are missing
data$id[row] <- sub("g", "\\1_g", data$id[row])
}
if( ! (grepl("_m", data$id[row], fixed = TRUE))){ #some "_" prior to "m" are missing
data$id[row] <- sub("m", "\\1_m", data$id[row])
}
if( (grepl("meting", data$id[row], fixed = TRUE))){#some had "meting" instead of just "m"
data$id[row] <- sub("meting", "\\1m", data$id[row])
}
}
missing_data <- ddply(data, .(patient_id, id, group, intervention), plyr::summarise,
numBeeped = length(mindcog_db_open_from),
responseRate = round((numBeeped - length(unique(mindcog_db_non_response)))/numBeeped,2))
na_data <- missing_data[(is.na(missing_data$patient_id)) |
is.na((missing_data$group)) |
is.na((missing_data$intervention)), ]
#write.csv(na_data, file = "patientID_issues.csv")
#convert excel na to R na and remove respondents without group (for now)
#data[data=="#N/A"] = NA
#drop subjects without an assigned group
data <- drop_na(data, group)
data <- drop_na(data, patient_id)
#unique(data$id)
#add block (1 = first intervention cycle, 2 = second intervention cycle)
data$block <- NA
for(row in 1:nrow(data)) {
if((grepl("m1", data$id[row], fixed = TRUE)) | (grepl("m2", data$id[row], fixed = TRUE))){
data$block[row] <- 1
} else {
data$block[row] <- 2
}
}
#test <- subset(data, select = c(id, phase, block))
#add new column "subject" -> extract all characters up until the first underscore in column "id"
data$subject <- str_extract(data$id, regex("^[^_]+(?=_)"))
#Changing ESM item names
#Get numbers of ESM item columns
item1 <- which( colnames(data)=="mindcog_db_1" ) #this is the first column that interests us
item33 <- which( colnames(data)=="mindcog_db_33" )#last item of interest
colNamesOld <- setNames(data.frame(colnames(data[, item1:item33])), "columns")
colNamesNew <- c('firstEntry', 'sleepQuality', 'toBedHour', 'toBedMinute', 'trySleepHour', 'trySleepMinute',
'durationFallAsleep', 'wakeupHour', 'wakeupMinute', 'restednessWakeup', 'wakeful',
'sad', 'satisfied', 'irritated', 'energetic', 'restless', 'stressed', 'anxious',
'listless', 'thinkingOf', 'worried', 'stickiness', 'thoughtsPleasant',
'thoughtsTime', 'thoughtsValence', 'thoughtsObject', 'distracted',
'restOfDayPos', 'aloneCompany', 'companyPleasant', 'alonePleasant', 'posMax',
'posIntensity', 'negMax', 'negIntensity', 'comments')
setnames(data, old = colNamesOld$columns, new = colNamesNew)
#################################### Initial analyses  ####################################
#Convert dates from characters to datetimes
data[['mindcog_db_open_from']] <- as.POSIXct(data[['mindcog_db_open_from']],
format = "%d/%m/%Y %H:%M")
data[['mindcog_db_started_at']] <- as.POSIXct(data[['mindcog_db_started_at']],
format = "%d/%m/%Y %H:%M")
data[['mindcog_db_completed_at']] <- as.POSIXct(data[['mindcog_db_completed_at']],
format = "%d/%m/%Y %H:%M")
#calculate the time it took a participant to start after being informed (in minutes)
data$response_delay <- (data$mindcog_db_started_at - data$mindcog_db_open_from)/60
#calculate how long it took a participant to complete the questionnaire (in minutes)
data$response_duration <- (data$mindcog_db_completed_at - data$mindcog_db_started_at)/60
#calculate the minutes that have past since the last beep
subject_IDs <- unique(data$subject) #get a list of all unique IDs
data$minLastBeep <- NA
for(id in subject_IDs){ #for loop to fill the column with the day numbers
prev_row = 0
xDate <- as.Date("01/01/1999", format = '%d/%m/%Y') #low arbitrary date for comparison of first assessment date
respondent_rows <- which(data$subject == id) #row indices of rows associated with respondent
for (row in respondent_rows) { #loop over these rows
#if this rows date is greater than the previous assessment's date
if(as.Date(data$mindcog_db_open_from[row]) == as.Date(xDate)){
timePast = hms(as.ITime(data$mindcog_db_open_from[row]) - as.ITime(data$mindcog_db_open_from[prev_row]))
minutesPast = hour(timePast)*60 + minute(timePast) #increment the assessment day count
data$minLastBeep[row] <- minutesPast #add the minutes past
prev_row = row #update the previous row index (not plus one bc numbers are not continuous!)
xDate = data$mindcog_db_open_from[row] #set new comparison date to date of current row
} else {
#otherwise this row's date is equal to the previous row's --> same assessment day
data$minLastBeep[row] <- NA
prev_row = row
xDate = data$mindcog_db_open_from[row] #set new comparison date to date of current row
}
}
}
#test <- subset(data, select = c(id, subject, mindcog_db_open_from, minLastBeep))
#group by respondent_id and count the number on nonresponses
participant_responses <- ddply(data, .(subject), plyr::summarise,
numBeeped = length(mindcog_db_open_from),
noResponse = length(unique(mindcog_db_non_response)),
response = numBeeped - noResponse,
responseRate = round(response/numBeeped,2))
#the mean response rate is ~65%
meanResponseRate <- mean(participant_responses$responseRate)
#sd of 23.46
sdResponseRate <- sd(participant_responses$responseRate)
#################################### Beep number, assessment day and lagged variables  ####################################
#adding beep number (continuous count of sent assessment queries)
data$beepNum <- NA
for(id in subject_IDs){ #every participant
respondent_rows <- which(data$subject == id) #row indices of rows associated with respondent
#adding a number per assessment
data[respondent_rows,]$beepNum <- 1:length(respondent_rows)
}
#beep number per phase
data$phaseBeepNum <- NA
phases <- unique(data$phase)
for(id in subject_IDs){ #every participant
for(phase in phases){
phase_rows <- which((data$subject == id) & (data$phase == phase)) #row indices of rows associated with respondent
if(length(phase_rows) > 0){
data[phase_rows,]$phaseBeepNum <- 1:length(phase_rows)
}
}
}
#beep number per block
data$blockBeepNum <- NA
for(id in subject_IDs){ #every participant
for(block in 1:2){
block_rows <- which((data$subject == id) & (data$block == block)) #row indices of rows associated with respondent
if(length(block_rows) > 0){
data[block_rows,]$blockBeepNum <- 1:length(block_rows)
}
}
}
#test <- subset(data[data$subject == "s8",], select = c(subject, phase, block, blockBeepNum, phaseBeepNum, beepNum))
#adding assessment day
data$assessmentDay <- NA #adding an empty column for assessment days
for(id in subject_IDs){ #for loop to fill the column with the day numbers
assessment_day <- 0
prev_row = 0
xDate <- as.Date("01/01/1999", format = '%d/%m/%Y') #low arbitrary date for comparison of first assessment date
respondent_rows <- which(data$subject == id) #row indices of rows associated with respondent
for (row in respondent_rows) { #loop over these rows
#if this rows date is greater than the previous assessment's date
if(as.Date(data$mindcog_db_open_from[row]) > xDate){
assessment_day = assessment_day + 1 #increment the assessment day count
data$assessmentDay[row] <- assessment_day #and add this new number as assessment day for this row
prev_row = row #update the previous row index (not plus one bc numbers are not continuous!)
xDate = as.Date(data$mindcog_db_open_from[row]) #set new comparison date to date of current row
} else {
#otherwise this row's date is equal to the previous row's --> same assessment day
data$assessmentDay[row] <- data$assessmentDay[prev_row]
prev_row = row
}
}
}
#test <- subset(data, select = c(id, subject, mindcog_db_open_from, assessmentDay))
#assessment day per block
data$blockAssessmentDay <- NA #adding an empty column for assessment days
for(id in subject_IDs){ #for loop to fill the column with the day numbers
for(block in 1:2){
assessment_day <- 0
prev_row = 0
xDate <- as.Date("01/01/1999", format = '%d/%m/%Y') #low arbitrary date for comparison of first assessment date
block_rows <- which((data$subject == id) & (data$block == block)) #row indices of rows associated with respondent
if(length(block_rows) > 0){
for (row in block_rows) { #loop over these rows
#if this rows date is greater than the previous assessment's date
if(as.Date(data$mindcog_db_open_from[row]) > xDate){
assessment_day = assessment_day + 1 #increment the assessment day count
data$blockAssessmentDay[row] <- assessment_day #and add this new number as assessment day for this row
prev_row = row #update the previous row index (not plus one bc numbers are not continuous!)
xDate = as.Date(data$mindcog_db_open_from[row]) #set new comparison date to date of current row
} else {
#otherwise this row's date is equal to the previous row's --> same assessment day
data$blockAssessmentDay[row] <- data$blockAssessmentDay[prev_row]
prev_row = row
}
}
}
}
}
rm(list = ls()) #clean all up
rm(list = ls()) #clean all up
source("C:/Users/cleme/Documents/Education/RUG/Thesis/EMA-mindfulness/Data/common_plot_theme.R")
setwd("C:/Users/cleme/Documents/Education/RUG/Thesis/EMA-mindfulness/Data")
library(tidyverse)
library(plyr)
library(dplyr)
library(data.table)
library(ggplot2)
library(reshape)
library(ggpubr)
library(lubridate)
library(igraph)
numbers <- read.csv("sart_w_thoughtProbes.csv")
numbers <- numbers[which(!is.na(numbers$group)),]
numbers$group <- factor(numbers$group, levels = c("remitted", "controls"))
numbers$intervention <- factor(numbers$intervention, levels = c("mindfulness", "fantasizing"))
levels(numbers$group) <- c("rMDD", "HC")
levels(numbers$intervention) <- c("Mindfulness", "Fantasizing")
length(unique(numbers$subject)) #35
length(unique(numbers[which(numbers$group == "rMDD"),]$subject)) #14
length(unique(numbers[which(numbers$group == "HC"),]$subject)) #21
unique_sessions <- numbers %>% distinct(subject, gameSessionID)
length(unique_sessions$gameSessionID) #589
length(numbers$id) #28221
length(numbers[which(numbers$isGo==FALSE),]$id) #2781
length(numbers[which(numbers$isGo==TRUE),]$id) #25440
mean(numbers[which((numbers$group=="rMDD") & (numbers$phase=="pre") & (numbers$block==1)),]$responseTime, na.rm=TRUE)
mean(numbers[which((numbers$group=="HC") & (numbers$phase=="pre") & (numbers$block==1)),]$responseTime, na.rm=TRUE)
sd(numbers[which((numbers$group=="rMDD") & (numbers$phase=="pre") & (numbers$block==1)),]$responseTime, na.rm=TRUE)
sd(numbers[which((numbers$group=="HC") & (numbers$phase=="pre") & (numbers$block==1)),]$responseTime, na.rm=TRUE)
mean(numbers[which((numbers$group=="rMDD") & (numbers$phase=="pre") & (numbers$block==1)),]$correct, na.rm=TRUE)
mean(numbers[which((numbers$group=="HC") & (numbers$phase=="pre") & (numbers$block==1)),]$correct, na.rm=TRUE)
sd(numbers[which((numbers$group=="rMDD") & (numbers$phase=="pre") & (numbers$block==1)),]$correct, na.rm=TRUE)
sd(numbers[which((numbers$group=="HC") & (numbers$phase=="pre") & (numbers$block==1)),]$correct, na.rm=TRUE)
mean(numbers[which((numbers$group=="rMDD") & (numbers$phase=="pre") & (numbers$block==1) & (numbers$isGo==FALSE)),]$correct, na.rm=TRUE)
mean(numbers[which((numbers$group=="HC") & (numbers$phase=="pre") & (numbers$block==1) & (numbers$isGo==FALSE)),]$correct, na.rm=TRUE)
sd(numbers[which((numbers$group=="rMDD") & (numbers$phase=="pre") & (numbers$block==1) & (numbers$isGo==FALSE)),]$correct, na.rm=TRUE)
sd(numbers[which((numbers$group=="HC") & (numbers$phase=="pre") & (numbers$block==1) & (numbers$isGo==FALSE)),]$correct, na.rm=TRUE)
mean(numbers[which((numbers$group=="rMDD") & (numbers$phase=="peri") & (numbers$intervention=="Mindfulness")),]$responseTime, na.rm=TRUE)
mean(numbers[which((numbers$group=="rMDD") & (numbers$phase=="peri") & (numbers$intervention=="Fantasizing")),]$responseTime, na.rm=TRUE)
mean(numbers[which((numbers$group=="HC") & (numbers$phase=="peri") & (numbers$intervention=="Mindfulness")),]$responseTime, na.rm=TRUE)
mean(numbers[which((numbers$group=="HC") & (numbers$phase=="peri") & (numbers$intervention=="Fantasizing")),]$responseTime, na.rm=TRUE)
## response times at baseline
t.test(numbers[which((numbers$group=="rMDD") & (numbers$phase=="pre") & (numbers$block==1)),]$responseTime,
numbers[which((numbers$group=="HC") & (numbers$phase=="pre") & (numbers$block==1)),]$responseTime)
numbers_mean <- numbers %>%
distinct(userID, gameSessionID, .keep_all = TRUE)
group.colors = c(rMDD = "#F8766D", HC = "#619CFF")
meltDat <- melt(numbers_mean, id.vars = c("group", "intervention", "phase"), measure.vars = c("meanRT"))
ggplot(meltDat[which((!is.na(meltDat$intervention) & (!is.na(meltDat$group)))),]) +
geom_boxplot(aes(x= factor(phase, levels = c("pre", "peri")), y=value, fill=group)) +
facet_grid(intervention~group) +
labs(y = "Mean response time", x = "Phase") +
ylim(300,1000) +
single_plot_theme() +
theme(legend.position = "None",
strip.text.x = element_text(size = 15),
strip.text.y = element_text(size =15),
axis.text.x = element_text(size=15)) +
scale_fill_manual(values=group.colors)
pdf(width = 8, height = 6,
file = "meanRT_boxplots.pdf")
ggplot(meltDat[which((!is.na(meltDat$intervention) & (!is.na(meltDat$group)))),]) +
geom_boxplot(aes(x= factor(phase, levels = c("pre", "peri")), y=value, fill=group)) +
facet_grid(intervention~group) +
labs(y = "Mean response time", x = "Phase") +
ylim(300,1000) +
single_plot_theme() +
theme(legend.position = "None",
strip.text.x = element_text(size = 15),
strip.text.y = element_text(size =15),
axis.text.x = element_text(size=15)) +
scale_fill_manual(values=group.colors)
dev.off()

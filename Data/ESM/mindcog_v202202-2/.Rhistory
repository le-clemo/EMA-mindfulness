#zipping current and lagged column names for the for loop
colZip <- mapply(c, cols, laggedCols, SIMPLIFY = FALSE)
#for loop to add the lagged values to their corresponding new columns
for(id in subject_IDs){
respondent_rows <- which(data$subject == id) #one respondent at a time
for(col in colZip) { #looping over the zipped column name pairs
prev_value <- NA #previous value starts out as NA for every column
current_day <- 1 #current day at the beginning of every column per respondent is 1
for(row in respondent_rows) { #looping over the rows associated with the current respondent
if(data$assessmentDay[row] == current_day) { #if the assessment day matches the current day
data[row, col[2]] <- prev_value #add the previous value as the value for the lagged column
prev_value <- data[row, col[1]] #update the previous value
} else { #if assessment day and current day do not match
data[row, col[2]] <- NA #then the lagged value should be NA (new day!)
current_day <- data$assessmentDay[row] #update the current day (could also just be +1)
prev_value <- data[row, col[1]] #update previous value
}
}
}
}
cols <- c('wakeful', 'sad', 'satisfied', 'irritated', 'energetic', 'restless', 'stressed', 'anxious',
'listless', 'worried', 'stickiness', 'thoughtsPleasant',  'thoughtsObject', 'distracted', 'restOfDayPos',
'companyPleasant', 'alonePleasant', 'posMax', 'posIntensity', 'negMax', 'negIntensity')
#creating a vector with new "lagged" column names
changeCols <- c()
for(col in cols) {
changeCols <- c(changeCols, paste(col, "change", sep = "_"))
}
#adding empty columns with "lagged" names
data[, changeCols] <- NA
#zipping current and lagged column names for the for loop
colZip <- mapply(c, cols, changeCols, SIMPLIFY = FALSE)
#for loop to add the lagged values to their corresponding new columns
for(id in subject_IDs){
respondent_rows <- which(data$subject == id) #one respondent at a time
for(col in colZip) { #looping over the zipped column name pairs
prev_value <- 0
change_score <- NA #previous value starts out as NA for every column
current_day <- 1 #current day at the beginning of every column per respondent is 1
for(row in respondent_rows) { #looping over the rows associated with the current respondent
if(data$assessmentDay[row] == current_day) { #if the assessment day matches the current day
change_score <- data[row, col[1]] - prev_value #calculate next change score
data[row, col[2]] <- change_score #add the change_score as the value for the lagged column
prev_value <- data[row, col[1]] #update the previous value
} else { #if assessment day and current day do not match
data[row, col[2]] <- NA #then the change score should be NA (new day!)
current_day <- data$assessmentDay[row] #update the current day (could also just be +1)
prev_value <- data[row, col[1]] #update previous value
}
}
}
}
#number of respondents (i.e., participants?) so far
length(unique(data$subject)) #38 associated with a group
#calculating statistics per group (remitted vs controls)
grp_avgs <- ddply(data, .(group), plyr::summarize,
n_Subj = length(unique(subject)),
db2_sleep_avg = mean(sleepQuality, na.rm = TRUE),
db2_sleep_sd = sd(sleepQuality, na.rm = TRUE),
db8_wakeful_avg = mean(wakeful, na.rm = TRUE),
db9_sad_avg = mean(sad, na.rm = TRUE),
db9_sad_sd = sd(sad, na.rm = TRUE),
db10_satisfied_avg = mean(satisfied, na.rm = TRUE),
db10_satisfied_sd = sd(satisfied, na.rm = TRUE),
db11_irritated_avg = mean(irritated, na.rm = TRUE),
db12_energetic_avg = mean(energetic, na.rm = TRUE),
db13_restless_avg = mean(restless, na.rm = TRUE),
db14_stressed_avg = mean(stressed, na.rm = TRUE),
db15_anxious_avg = mean(anxious, na.rm = TRUE),
db16_listless_avg = mean(listless, na.rm = TRUE),
db18_worrying_avg = mean(worried, na.rm = TRUE),
db19_stickiness_avg = mean(stickiness, na.rm = TRUE),
db20_easeThoughts_avg = mean(thoughtsPleasant, na.rm = TRUE),
db24_distracted_avg = mean(distracted, na.rm = TRUE),
db25_restOfDayPos_avg = mean(restOfDayPos, na.rm = TRUE),
db27_companyPos_avg = mean(companyPleasant, na.rm = TRUE),
db28_solitudePos_avg = mean(alonePleasant, na.rm = TRUE),
db29_enjoyabilityMax_avg = mean(posMax, na.rm = TRUE),
db30_intensityPos_avg = mean(posIntensity, na.rm = TRUE),
db31_unpleasantMax_avg = mean(negMax, na.rm = TRUE),
db32_intensityNeg_avg = mean(negIntensity, na.rm = TRUE),
response_delay_avg = round(mean(response_delay, na.rm = TRUE), 2),
response_duration_avg = round(mean(response_duration, na.rm = TRUE), 2))
#Metric columns
metricCols <- c('wakeful', 'sad', 'satisfied', 'irritated', 'energetic', 'restless',
'stressed', 'anxious', 'listless', 'worried', 'stickiness', 'thoughtsPleasant', 'distracted',
'restOfDayPos', 'posMax', 'posIntensity', 'negMax', 'negIntensity')
#for some strange dplyr-ralted reason I need to do this to get melt() to work
data <- as.data.frame(data)
View(data[is.na(data$patient_id),])
rum_data <- ddply(data, .(group, intervention, phase, block), plyr::summarize,
N = length(group),
past = length(group[thoughtsTime == 1]),
pres = length(group[thoughtsTime == 2]),
fut = length(group[thoughtsTime == 3]))
View(rum_data)
View(data[(data$group == "controls") & (data$intervention == "fantasizing") &
(data$phase == "peri") & (data$block == 1) & (data$thoughtsTime == 1) &
(!is.na(data$patient_id)),])
View(data[(data$group == "controls") & (data$intervention == "fantasizing") &
(data$phase == "peri") & (data$block == 1) & (data$thoughtsTime == 1),])
data <- drop_na(data)
#read in data
data <- read_xlsx('mindcog_db_2022-02-14.xlsx')
#################################### Data clean up ####################################
#drop unnecessary columns
data <- subset(data, select = -c(roqua_id, hide_pii_from_researchers, gender, birth_year,
hide_values_from_professionals, respondent_label, respondent_type,
mindcog_db_project, mindcog_db_notes, mindcog_db_location,
mindcog_db_invited_at, mindcog_db_emailed_at, mindcog_db_variant,
mindcog_db_anonymous))
#turn all ids to lower case for easier error handling below
data$id <- tolower(data$id)
#fix various errors in id column
for(row in 1:nrow(data)) { #some "s" are missing
if( ! (grepl("s", data$id[row], fixed=TRUE)) & (!(is.na(data$id[row])))){
data$id[row] <- paste("s", data$id[row], sep = "")
}
if( ! (grepl("_g", data$id[row], fixed=TRUE))){ #some "_" prior to "g" are missing
data$id[row] <- sub("g", "\\1_g", data$id[row])
}
if( ! (grepl("_m", data$id[row], fixed = TRUE))){ #some "_" prior to "m" are missing
data$id[row] <- sub("m", "\\1_m", data$id[row])
}
if( (grepl("meting", data$id[row], fixed = TRUE))){#some had "meting" instead of just "m"
data$id[row] <- sub("meting", "\\1m", data$id[row])
}
}
missing_data <- ddply(data, .(patient_id, id, group, intervention), plyr::summarise,
numBeeped = length(mindcog_db_open_from),
responseRate = round((numBeeped - length(unique(mindcog_db_non_response)))/numBeeped,2))
na_data <- missing_data[(is.na(missing_data$patient_id)) |
is.na((missing_data$group)) |
is.na((missing_data$intervention)), ]
#drop subjects without an assigned group
data <- drop_na(data, group)
data <- drop_na(data, id)
data <- drop_na(data, patient_id)
is.na(data$patient_id)
unique(is.na(data$patient_id))
View(data[(data$group == "controls") & (data$intervention == "fantasizing") &
(data$phase == "peri") & (data$block == 1) & (data$thoughtsTime == 1),])
#add block (1 = first intervention cycle, 2 = second intervention cycle)
data$block <- NA
for(row in 1:nrow(data)) {
if((grepl("m1", data$id[row], fixed = TRUE)) | (grepl("m2", data$id[row], fixed = TRUE))){
data$block[row] <- 1
} else {
data$block[row] <- 2
}
}
#add new column "subject" -> extract all characters up until the first underscore in column "id"
data$subject <- str_extract(data$id, regex("^[^_]+(?=_)"))
#Changing ESM item names
#Get numbers of ESM item columns
item1 <- which( colnames(data)=="mindcog_db_1" ) #this is the first column that interests us
item33 <- which( colnames(data)=="mindcog_db_33" )#last item of interest
colNamesOld <- setNames(data.frame(colnames(data[, item1:item33])), "columns")
colNamesNew <- c('firstEntry', 'sleepQuality', 'toBedHour', 'toBedMinute', 'trySleepHour', 'trySleepMinute',
'durationFallAsleep', 'wakeupHour', 'wakeupMinute', 'restednessWakeup', 'wakeful',
'sad', 'satisfied', 'irritated', 'energetic', 'restless', 'stressed', 'anxious',
'listless', 'thinkingOf', 'worried', 'stickiness', 'thoughtsPleasant',
'thoughtsTime', 'thoughtsValence', 'thoughtsObject', 'distracted',
'restOfDayPos', 'aloneCompany', 'companyPleasant', 'alonePleasant', 'posMax',
'posIntensity', 'negMax', 'negIntensity', 'comments')
setnames(data, old = colNamesOld$columns, new = colNamesNew)
#Convert dates from characters to datetimes
data[['mindcog_db_open_from']] <- as.POSIXct(data[['mindcog_db_open_from']],
format = "%d/%m/%Y %H:%M")
data[['mindcog_db_started_at']] <- as.POSIXct(data[['mindcog_db_started_at']],
format = "%d/%m/%Y %H:%M")
data[['mindcog_db_completed_at']] <- as.POSIXct(data[['mindcog_db_completed_at']],
format = "%d/%m/%Y %H:%M")
#calculate the time it took a participant to start after being informed (in minutes)
data$response_delay <- (data$mindcog_db_started_at - data$mindcog_db_open_from)/60
#calculate how long it took a participant to complete the questionnaire (in minutes)
data$response_duration <- (data$mindcog_db_completed_at - data$mindcog_db_started_at)/60
#calculate the minutes that have past since the last beep
subject_IDs <- unique(data$subject) #get a list of all unique IDs
data$minLastBeep <- NA
for(id in subject_IDs){ #for loop to fill the column with the day numbers
prev_row = 0
xDate <- as.Date("01/01/1999", format = '%d/%m/%Y') #low arbitrary date for comparison of first assessment date
respondent_rows <- which(data$subject == id) #row indices of rows associated with respondent
for (row in respondent_rows) { #loop over these rows
#if this rows date is greater than the previous assessment's date
if(as.Date(data$mindcog_db_open_from[row]) == as.Date(xDate)){
timePast = hms(as.ITime(data$mindcog_db_open_from[row]) - as.ITime(data$mindcog_db_open_from[prev_row]))
minutesPast = hour(timePast)*60 + minute(timePast) #increment the assessment day count
data$minLastBeep[row] <- minutesPast #add the minutes past
prev_row = row #update the previous row index (not plus one bc numbers are not continuous!)
xDate = data$mindcog_db_open_from[row] #set new comparison date to date of current row
} else {
#otherwise this row's date is equal to the previous row's --> same assessment day
data$minLastBeep[row] <- NA
prev_row = row
xDate = data$mindcog_db_open_from[row] #set new comparison date to date of current row
}
}
}
#group by respondent_id and count the number on nonresponses
participant_responses <- ddply(data, .(subject), plyr::summarise,
numBeeped = length(mindcog_db_open_from),
noResponse = length(unique(mindcog_db_non_response)),
response = numBeeped - noResponse,
responseRate = round(response/numBeeped,2))
#the mean response rate is ~65%
meanResponseRate <- mean(participant_responses$responseRate)
#sd of 23.46
sdResponseRate <- sd(participant_responses$responseRate)
#adding beep number (continuous count of sent assessment queries)
data$beepNum <- NA
for(id in subject_IDs){ #every participant
respondent_rows <- which(data$subject == id) #row indices of rows associated with respondent
#adding a number per assessment
data[respondent_rows,]$beepNum <- 1:length(respondent_rows)
}
#beep number per phase
data$phaseBeepNum <- NA
phases <- unique(data$phase)
for(id in subject_IDs){ #every participant
for(phase in phases){
phase_rows <- which((data$subject == id) & (data$phase == phase)) #row indices of rows associated with respondent
if(length(phase_rows) > 0){
data[phase_rows,]$phaseBeepNum <- 1:length(phase_rows)
}
}
}
#beep number per block
data$blockBeepNum <- NA
for(id in subject_IDs){ #every participant
for(block in 1:2){
block_rows <- which((data$subject == id) & (data$block == block)) #row indices of rows associated with respondent
if(length(block_rows) > 0){
data[block_rows,]$blockBeepNum <- 1:length(block_rows)
}
}
}
#adding assessment day
data$assessmentDay <- NA #adding an empty column for assessment days
for(id in subject_IDs){ #for loop to fill the column with the day numbers
assessment_day <- 0
prev_row = 0
xDate <- as.Date("01/01/1999", format = '%d/%m/%Y') #low arbitrary date for comparison of first assessment date
respondent_rows <- which(data$subject == id) #row indices of rows associated with respondent
for (row in respondent_rows) { #loop over these rows
#if this rows date is greater than the previous assessment's date
if(as.Date(data$mindcog_db_open_from[row]) > xDate){
assessment_day = assessment_day + 1 #increment the assessment day count
data$assessmentDay[row] <- assessment_day #and add this new number as assessment day for this row
prev_row = row #update the previous row index (not plus one bc numbers are not continuous!)
xDate = as.Date(data$mindcog_db_open_from[row]) #set new comparison date to date of current row
} else {
#otherwise this row's date is equal to the previous row's --> same assessment day
data$assessmentDay[row] <- data$assessmentDay[prev_row]
prev_row = row
}
}
}
#assessment day per block
data$blockAssessmentDay <- NA #adding an empty column for assessment days
for(id in subject_IDs){ #for loop to fill the column with the day numbers
for(block in 1:2){
assessment_day <- 0
prev_row = 0
xDate <- as.Date("01/01/1999", format = '%d/%m/%Y') #low arbitrary date for comparison of first assessment date
block_rows <- which((data$subject == id) & (data$block == block)) #row indices of rows associated with respondent
if(length(block_rows) > 0){
for (row in block_rows) { #loop over these rows
#if this rows date is greater than the previous assessment's date
if(as.Date(data$mindcog_db_open_from[row]) > xDate){
assessment_day = assessment_day + 1 #increment the assessment day count
data$blockAssessmentDay[row] <- assessment_day #and add this new number as assessment day for this row
prev_row = row #update the previous row index (not plus one bc numbers are not continuous!)
xDate = as.Date(data$mindcog_db_open_from[row]) #set new comparison date to date of current row
} else {
#otherwise this row's date is equal to the previous row's --> same assessment day
data$blockAssessmentDay[row] <- data$blockAssessmentDay[prev_row]
prev_row = row
}
}
}
}
}
#recreacting with assessment days per participant
participant_responses <- ddply(data, .(subject), plyr::summarise,
numBeeped = length(mindcog_db_open_from),
noResponse = length(unique(mindcog_db_non_response)),
response = numBeeped - noResponse,
responseRate = round(response/numBeeped,2),
numDays = max(assessmentDay))
#recreacting with assessment days per group / intervention / phase
group_responses <- ddply(data, .(group), plyr::summarise,
numBeeped = length(mindcog_db_open_from),
noResponse = length(unique(mindcog_db_non_response)),
response = numBeeped - noResponse,
responseRate = round(response/numBeeped,2),
numDays = max(assessmentDay)) #6% higher response rate in controls
#Creating lagged variables
#the variables to be lagged
cols <- c('wakeful', 'sad', 'satisfied', 'irritated', 'energetic', 'restless', 'stressed', 'anxious',
'listless', 'thinkingOf', 'worried', 'stickiness', 'thoughtsPleasant', 'thoughtsTime',
'thoughtsValence', 'thoughtsObject', 'distracted', 'restOfDayPos', 'aloneCompany',
'companyPleasant', 'alonePleasant', 'posMax', 'posIntensity', 'negMax', 'negIntensity')
#creating a vector with new "lagged" column names
laggedCols <- c()
for(col in cols) {
laggedCols <- c(laggedCols, paste(col, "lag1", sep = "_"))
}
#adding empty columns with "lagged" names
data[, laggedCols] <- NA
#zipping current and lagged column names for the for loop
colZip <- mapply(c, cols, laggedCols, SIMPLIFY = FALSE)
#for loop to add the lagged values to their corresponding new columns
for(id in subject_IDs){
respondent_rows <- which(data$subject == id) #one respondent at a time
for(col in colZip) { #looping over the zipped column name pairs
prev_value <- NA #previous value starts out as NA for every column
current_day <- 1 #current day at the beginning of every column per respondent is 1
for(row in respondent_rows) { #looping over the rows associated with the current respondent
if(data$assessmentDay[row] == current_day) { #if the assessment day matches the current day
data[row, col[2]] <- prev_value #add the previous value as the value for the lagged column
prev_value <- data[row, col[1]] #update the previous value
} else { #if assessment day and current day do not match
data[row, col[2]] <- NA #then the lagged value should be NA (new day!)
current_day <- data$assessmentDay[row] #update the current day (could also just be +1)
prev_value <- data[row, col[1]] #update previous value
}
}
}
}
cols <- c('wakeful', 'sad', 'satisfied', 'irritated', 'energetic', 'restless', 'stressed', 'anxious',
'listless', 'worried', 'stickiness', 'thoughtsPleasant',  'thoughtsObject', 'distracted', 'restOfDayPos',
'companyPleasant', 'alonePleasant', 'posMax', 'posIntensity', 'negMax', 'negIntensity')
#creating a vector with new "lagged" column names
changeCols <- c()
for(col in cols) {
changeCols <- c(changeCols, paste(col, "change", sep = "_"))
}
#adding empty columns with "lagged" names
data[, changeCols] <- NA
#zipping current and lagged column names for the for loop
colZip <- mapply(c, cols, changeCols, SIMPLIFY = FALSE)
#for loop to add the lagged values to their corresponding new columns
for(id in subject_IDs){
respondent_rows <- which(data$subject == id) #one respondent at a time
for(col in colZip) { #looping over the zipped column name pairs
prev_value <- 0
change_score <- NA #previous value starts out as NA for every column
current_day <- 1 #current day at the beginning of every column per respondent is 1
for(row in respondent_rows) { #looping over the rows associated with the current respondent
if(data$assessmentDay[row] == current_day) { #if the assessment day matches the current day
change_score <- data[row, col[1]] - prev_value #calculate next change score
data[row, col[2]] <- change_score #add the change_score as the value for the lagged column
prev_value <- data[row, col[1]] #update the previous value
} else { #if assessment day and current day do not match
data[row, col[2]] <- NA #then the change score should be NA (new day!)
current_day <- data$assessmentDay[row] #update the current day (could also just be +1)
prev_value <- data[row, col[1]] #update previous value
}
}
}
}
#number of respondents (i.e., participants?) so far
length(unique(data$subject)) #38 associated with a group
#calculating statistics per group (remitted vs controls)
grp_avgs <- ddply(data, .(group), plyr::summarize,
n_Subj = length(unique(subject)),
db2_sleep_avg = mean(sleepQuality, na.rm = TRUE),
db2_sleep_sd = sd(sleepQuality, na.rm = TRUE),
db8_wakeful_avg = mean(wakeful, na.rm = TRUE),
db9_sad_avg = mean(sad, na.rm = TRUE),
db9_sad_sd = sd(sad, na.rm = TRUE),
db10_satisfied_avg = mean(satisfied, na.rm = TRUE),
db10_satisfied_sd = sd(satisfied, na.rm = TRUE),
db11_irritated_avg = mean(irritated, na.rm = TRUE),
db12_energetic_avg = mean(energetic, na.rm = TRUE),
db13_restless_avg = mean(restless, na.rm = TRUE),
db14_stressed_avg = mean(stressed, na.rm = TRUE),
db15_anxious_avg = mean(anxious, na.rm = TRUE),
db16_listless_avg = mean(listless, na.rm = TRUE),
db18_worrying_avg = mean(worried, na.rm = TRUE),
db19_stickiness_avg = mean(stickiness, na.rm = TRUE),
db20_easeThoughts_avg = mean(thoughtsPleasant, na.rm = TRUE),
db24_distracted_avg = mean(distracted, na.rm = TRUE),
db25_restOfDayPos_avg = mean(restOfDayPos, na.rm = TRUE),
db27_companyPos_avg = mean(companyPleasant, na.rm = TRUE),
db28_solitudePos_avg = mean(alonePleasant, na.rm = TRUE),
db29_enjoyabilityMax_avg = mean(posMax, na.rm = TRUE),
db30_intensityPos_avg = mean(posIntensity, na.rm = TRUE),
db31_unpleasantMax_avg = mean(negMax, na.rm = TRUE),
db32_intensityNeg_avg = mean(negIntensity, na.rm = TRUE),
response_delay_avg = round(mean(response_delay, na.rm = TRUE), 2),
response_duration_avg = round(mean(response_duration, na.rm = TRUE), 2))
#Metric columns
metricCols <- c('wakeful', 'sad', 'satisfied', 'irritated', 'energetic', 'restless',
'stressed', 'anxious', 'listless', 'worried', 'stickiness', 'thoughtsPleasant', 'distracted',
'restOfDayPos', 'posMax', 'posIntensity', 'negMax', 'negIntensity')
#for some strange dplyr-ralted reason I need to do this to get melt() to work
data <- as.data.frame(data)
View(data[(data$group == "controls") & (data$intervention == "fantasizing") &
(data$phase == "peri") & (data$block == 1) & (data$thoughtsTime == 1),])
View(data[((data$group == "controls") & (data$intervention == "fantasizing") &
(data$phase == "peri") & (data$block == 1) & (data$thoughtsTime == 1)),])
View(data[which((data$group == "controls") & (data$intervention == "fantasizing") &
(data$phase == "peri") & (data$block == 1) & (data$thoughtsTime == 1)),])
rum_data <- ddply(data, .(group, intervention, phase, block), plyr::summarize,
N = length(group),
past = length(which(group[thoughtsTime == 1])),
pres = length(group[thoughtsTime == 2]),
fut = length(group[thoughtsTime == 3]))
rum_data <- ddply(data, .(group, intervention, phase, block), plyr::summarize,
N = length(group),
past = length(group[which(thoughtsTime == 1)]),
pres = length(group[thoughtsTime == 2]),
fut = length(group[thoughtsTime == 3]))
View(rum_data)
rum_data <- ddply(data, .(group, intervention, phase, block), plyr::summarize,
N = length(group),
past = length(group[which(thoughtsTime == 1)]),
pres = length(group[which(thoughtsTime == 2)]),
fut = length(group[which(thoughtsTime == 3)]))
View(rum_data)
View(data[which((data$group == "controls") & (data$intervention == "fantasizing") &
(data$phase == "peri") & (data$block == 1) & (data$thoughtsTime == 2)),])
View(data[which((data$group == "controls") & (data$intervention == "fantasizing") &
(data$phase == "peri") & (data$block == 1) & (data$thoughtsTime == 3)),])
rum_data <- ddply(data, .(group, intervention, phase, block), plyr::summarize,
N = length(group),
past = length(group[which(thoughtsTime == 1)]),
pres = length(group[which(thoughtsTime == 2)]),
fut = length(group[which(thoughtsTime == 3)]),
empty = length(group[which(is.na(thoughtsTime))]))
View(rum_data)
rum_data <- ddply(data, .(group, intervention, phase, block), plyr::summarize,
N = length(group[which(!is.na(thoughtsTime))]),
past = length(group[which(thoughtsTime == 1)]),
pres = length(group[which(thoughtsTime == 2)]),
fut = length(group[which(thoughtsTime == 3)]),
empty = length(group[which(is.na(thoughtsTime))]))
rum_data <- ddply(data, .(group, intervention, phase, block), plyr::summarize,
N = length(group[which(!is.na(thoughtsTime))]),
past = length(group[which(thoughtsTime == 1)])/N,
pres = length(group[which(thoughtsTime == 2)])/N,
fut = length(group[which(thoughtsTime == 3)])/N)
View(rum_data)
rum_data <- ddply(data, .(group, intervention, phase, block), plyr::summarize,
N = length(group[which(!is.na(thoughtsTime))]),
past = round(length(group[which(thoughtsTime == 1)])/N, 2),
pres = length(group[which(thoughtsTime == 2)])/N,
fut = length(group[which(thoughtsTime == 3)])/N)
View(rum_data)
rum_data <- ddply(data, .(group, intervention, phase, block), plyr::summarize,
N = length(group[which(!is.na(thoughtsTime))]),
past = round(length(group[which(thoughtsTime == 1)])/N, 2),
pres = round(length(group[which(thoughtsTime == 2)])/N, 2),
fut = round(length(group[which(thoughtsTime == 3)])/N, 2))
View(rum_data)
rum_data <- drop_na(data, intervention)
rum_data <- ddply(data, .(group, intervention, phase, block), plyr::summarize,
N = length(group[which(!is.na(thoughtsTime))]),
past = round(length(group[which(thoughtsTime == 1)])/N, 2),
pres = round(length(group[which(thoughtsTime == 2)])/N, 2),
fut = round(length(group[which(thoughtsTime == 3)])/N, 2))
rum_data <- drop_na(rum_data, intervention)
pc_val <- ddply(data, .(group, intervention, phase, block), plyr::summarize,
N = length(group[which(!is.na(thoughtsValence))]),
positive = round(length(group[which(thoughtsValence == 1)])/N, 2),
present = round(length(group[which(thoughtsValence == 2)])/N, 2),
future = round(length(group[which(thoughtsValence == 3)])/N, 2))
pc_val <- drop_na(pc_val, intervention)
View(pc_val)
pc_time <- ddply(data, .(group, intervention, phase, block), plyr::summarize,
N = length(group[which(!is.na(thoughtsTime))]),
past = round(length(group[which(thoughtsTime == 1)])/N, 2),
present = round(length(group[which(thoughtsTime == 2)])/N, 2),
future = round(length(group[which(thoughtsTime == 3)])/N, 2))
pc_time <- drop_na(pc_time, intervention)
pc_val <- ddply(data, .(group, intervention, phase, block), plyr::summarize,
N = length(group[which(!is.na(thoughtsValence))]),
negative = round(length(group[which(thoughtsValence == 1)])/N, 2),
neutral = round(length(group[which(thoughtsValence == 2)])/N, 2),
positive = round(length(group[which(thoughtsValence == 3)])/N, 2))
pc_val <- drop_na(pc_val, intervention)
pc_object <- ddply(data, .(group, intervention, phase, block), plyr::summarize,
N = length(group[which(!is.na(thoughtsObject))]),
self = round(length(group[which(thoughtsObject == 1)])/N, 2),
somebody = round(length(group[which(thoughtsObject == 2)])/N, 2),
neither = round(length(group[which(thoughtsObject == 3)])/N, 2))
pc_object <- drop_na(pc_object, intervention)
pc_thinkingOf <- ddply(data, .(group, intervention, phase, block), plyr::summarize,
N = length(group[which(!is.na(thinkingOf))]),
currentActivity = round(length(group[which(thinkingOf == 1)])/N, 2),
externalStimuli = round(length(group[which(thinkingOf == 2)])/N, 2),
currentFeelings = round(length(group[which(thinkingOf == 3)])/N, 2),
personalConcerns = round(length(group[which(thinkingOf == 4)])/N, 2),
daydreaming = round(length(group[which(thinkingOf == 5)])/N, 2),
other = round(length(group[which(thinkingOf == 6)])/N, 2))
pc_thinkingOf <- drop_na(pc_thinkingOf, intervention)
View(pc_time)
View(pc_val)
View(pc_object)
View(pc_thinkingOf)
merge(pc_time, pc_val, pc_object, pc_thinkingOf)
merge(pc_time, pc_val, pc_object, pc_thinkingOf, by = c(group, intervention, phase, block))
Reduce(function(x, y) merge(x, y, all=TRUE), list(pc_time, pc_val, pc_object, pc_thinkingOf))
pc_summary <- Reduce(function(x, y) merge(x, y, all=TRUE), list(pc_time, pc_val, pc_object, pc_thinkingOf))
View(pc_summary)
View(pc_time)
View(pc_val)
#convert excel na to R na and remove respondents without group (for now)
data[data=="#N/A"] = NA

#extract start and end dates from "Datum baseline" and "Datum interventie" columns
for(row in 1:nrow(matchingData)) { #change all "t/m" to "tm"
if( ! (grepl("tm", matchingData$DatesBaseline[row], fixed=TRUE))){
matchingData$DatesBaseline[row] <- sub("t/m", "\\tm", matchingData$DatesBaseline[row])
}
if( ! (grepl("tm", matchingData$DatesIntervention[row], fixed=TRUE))){
matchingData$DatesIntervention[row] <- sub("t/m", "\\tm", matchingData$DatesIntervention[row])
}
if( ! (grepl("tm", matchingData$DatesIntervention[row], fixed=TRUE))){
matchingData$recordedDates[row] <- sub("t/m", "\\tm", matchingData$recordedDates[row])
}
}
#extract start and end dates from "Datum baseline" and "Datum interventie" columns
for(row in 1:nrow(matchingData)) { #change all "t/m" to "tm"
if( ! (grepl("tm", matchingData$DatesBaseline[row], fixed=TRUE))){
matchingData$DatesBaseline[row] <- sub("t/m", "\\tm", matchingData$DatesBaseline[row])
}
if( ! (grepl("tm", matchingData$DatesIntervention[row], fixed=TRUE))){
matchingData$DatesIntervention[row] <- sub("t/m", "\\tm", matchingData$DatesIntervention[row])
}
if( ! (grepl("tm", matchingData$recordedDates[row], fixed=TRUE))){
matchingData$recordedDates[row] <- sub("t/m", "\\tm", matchingData$recordedDates[row])
}
}
matchingData$recordedStart <- NA
matchingData$recordedEnd <- NA
matchingData$recordedEnd <- NA
for(row in 1:nrow(matchingData)){
if(! is.na(matchingData$DatesBaseline[row])){
matchingData$baselineStart[row] <- sub("\\ tm.*", "", matchingData$DatesBaseline[row]) #extract start date
matchingData$baselineEnd[row] <- sub(".* tm", "", matchingData$DatesBaseline[row]) #extract end date
#same for intervention dates
matchingData$interventionStart[row] <- sub("\\ tm.*", "", matchingData$DatesIntervention[row])
matchingData$interventionEnd[row] <- sub(".* tm", "", matchingData$DatesIntervention[row])
}
if(! is.na(matchingData$recordedDates[row])){
matchingData$recordedStart[row] <- sub("\\ tm.*", "", matchingData$recordedStart[row])
matchingData$recordedEnd[row] <- sub(".* tm", "", matchingData$recordedEnd[row])
}
}
for(row in 1:nrow(matchingData)){
if(! is.na(matchingData$DatesBaseline[row])){
matchingData$baselineStart[row] <- sub("\\ tm.*", "", matchingData$DatesBaseline[row]) #extract start date
matchingData$baselineEnd[row] <- sub(".* tm", "", matchingData$DatesBaseline[row]) #extract end date
#same for intervention dates
matchingData$interventionStart[row] <- sub("\\ tm.*", "", matchingData$DatesIntervention[row])
matchingData$interventionEnd[row] <- sub(".* tm", "", matchingData$DatesIntervention[row])
}
if(! is.na(matchingData$recordedDates[row])){
matchingData$recordedStart[row] <- sub("\\ tm.*", "", matchingData$recordedDates[row])
matchingData$recordedEnd[row] <- sub(".* tm", "", matchingData$recordedDates[row])
}
}
data$recordedStart <- NA
data$recordedEnd <- NA
#performing a "vlookup" of the md... numbers and adding corresponding columns
#from matchingData to data
data$id <- NA
data$intervention <- NA
data$baselineStart <- NA
data$baselineEnd <- NA
data$interventionStart <- NA
data$interventionEnd <- NA
data$recordedStart <- NA
data$recordedEnd <- NA
for(i in 1:nrow(data)){
for(j in 1:nrow(matchingData)){
if(data$patient_id[i] == matchingData$meeting_id[j]){
data$id[i] <- matchingData$id[j]
#data$recordedDates[i] <- matchingData$recordedDates[j]
data$intervention[i] <- matchingData$intervention[j]
data$baselineStart[i] = matchingData$baselineStart[j]
data$baselineEnd[i] = matchingData$baselineEnd[j]
data$interventionStart[i] <- matchingData$interventionStart[j]
data$interventionEnd[i] <- matchingData$interventionEnd[j]
data$recordedStart[i] <- matchingData$recordedStart[j]
data$recordedEnd[i] <- matchingData$recordedEnd[j]
}
}
}
#turn all ids to lower case for easier error handling below
data$id <- tolower(data$id)
#fix various errors in id column
for(row in 1:nrow(data)) { #some "s" are missing
if( ! (grepl("s", data$id[row], fixed=TRUE)) & (!(is.na(data$id[row])))){
data$id[row] <- paste("s", data$id[row], sep = "")
}
if( ! (grepl("_g", data$id[row], fixed=TRUE))){ #some "_" prior to "g" are missing
data$id[row] <- sub("g", "\\1_g", data$id[row])
}
if( ! (grepl("_m", data$id[row], fixed = TRUE))){ #some "_" prior to "m" are missing
data$id[row] <- sub("m", "\\1_m", data$id[row])
}
if( (grepl("meting", data$id[row], fixed = TRUE))){#some had "meting" instead of just "m"
data$id[row] <- sub("meting", "\\1m", data$id[row])
}
}
#add group
data$group <- NA
for(row in 1:nrow(data)) {
if(grepl("g1", data$id[row], fixed = TRUE)){
data$group[row] <- "controls"
}
if(grepl("g2", data$id[row], fixed = TRUE)){
data$group[row] <- "remitted"
}
}
#add new column "subject" -> extract all characters up until the first underscore in column "id"
data$subject <- str_extract(data$id, regex("^[^_]+(?=_)"))
#Convert dates from characters to datetimes
data[['mindcog_db_open_from']] <- as.POSIXct(data[['mindcog_db_open_from']],
format = "%d/%m/%Y %H:%M")
data[['mindcog_db_started_at']] <- as.POSIXct(data[['mindcog_db_started_at']],
format = "%d/%m/%Y %H:%M")
data[['mindcog_db_completed_at']] <- as.POSIXct(data[['mindcog_db_completed_at']],
format = "%d/%m/%Y %H:%M")
#fix problem with dates (whether entry belongs to pre- or peri-intervention phase)
test <- subset(data[which(data$id=="s4"),], select = "subject", "id", "intervention", "phase",
"mindcog_db_open_from", "recordedStart", "recordedEnd", "baselineStart", "baselineEnd",
"interventionStart", "interventionEnd")
#fix problem with dates (whether entry belongs to pre- or peri-intervention phase)
test <- subset(data[which(data$id=="s4"),], select = c("subject", "id", "intervention", "phase",
"mindcog_db_open_from", "recordedStart", "recordedEnd", "baselineStart", "baselineEnd",
"interventionStart", "interventionEnd"))
#add phase
data$phase <- NA
for(row in 1:nrow(data)) {
if((grepl("m1", data$id[row], fixed = TRUE)) | (grepl("m3", data$id[row], fixed = TRUE))){
data$phase[row] <- "pre"
}
if((grepl("m2", data$id[row], fixed = TRUE)) | (grepl("m4", data$id[row], fixed = TRUE))){
data$phase[row] <- "peri"
}
}
#add block (1 = first intervention cycle, 2 = second intervention cycle)
data$block <- NA
for(row in 1:nrow(data)) {
if((grepl("m1", data$id[row], fixed = TRUE)) | (grepl("m2", data$id[row], fixed = TRUE))){
data$block[row] <- 1
} else {
data$block[row] <- 2
}
}
#Convert dates from characters to datetimes
data[['mindcog_db_open_from']] <- as.POSIXct(data[['mindcog_db_open_from']],
format = "%d/%m/%Y %H:%M")
data[['mindcog_db_started_at']] <- as.POSIXct(data[['mindcog_db_started_at']],
format = "%d/%m/%Y %H:%M")
data[['mindcog_db_completed_at']] <- as.POSIXct(data[['mindcog_db_completed_at']],
format = "%d/%m/%Y %H:%M")
#fix problem with dates (whether entry belongs to pre- or peri-intervention phase)
test <- subset(data[which(data$id=="s4"),], select = c("subject", "id", "intervention", "phase",
"mindcog_db_open_from", "recordedStart", "recordedEnd", "baselineStart", "baselineEnd",
"interventionStart", "interventionEnd"))
View(test)
#fix problem with dates (whether entry belongs to pre- or peri-intervention phase)
test <- subset(data[which(data$subject=="s4"),], select = c("subject", "id", "intervention", "phase",
"mindcog_db_open_from", "recordedStart", "recordedEnd", "baselineStart", "baselineEnd",
"interventionStart", "interventionEnd"))
error_demo <- ddply(data, .(subject, id, phase, block))
View(error_demo)
error_demo <- ddply(data, .(subject, id, phase, block), plyr::summarise,
nEntries <- length(subject))
View(error_demo)
error_demo <- ddply(data[which(data$subject=="s4"),], .(subject, id, phase, block), plyr::summarise,
nEntries <- length(subject))
View(error_demo)
error_demo <- ddply(data[which(data$subject=="s8"),], .(subject, id, phase, block), plyr::summarise,
nEntries <- length(subject))
View(error_demo)
error_demo <- ddply(data[which(data$subject=="s8"),],
.(subject, id, phase, block, mindcog_db_open_from, recordedStart, recordedEnd,
baselineStart, baselineEnd, interventionStart, interventionStart), plyr::summarise,
nEntries <- length(subject))
View(error_demo)
data[['mindcog_db_date']] <- as.POSIXct(data[['mindcog_db_date']],
format = "%d/%m/%Y")
data[['mindcog_db_date']] <- as.POSIXct(data[['mindcog_db_date']],
format = "%d/%m/%Y")
data[['mindcog_db_date']] <- format(as.POSIXct(data[['mindcog_db_date']],
format = "%d/%m/%Y %H:%M"), format="%d/%m/%Y")
#Convert dates from characters to datetimes
data[['mindcog_db_open_from']] <- as.POSIXct(data[['mindcog_db_open_from']],
format = "%d/%m/%Y %H:%M")
data[['mindcog_db_started_at']] <- as.POSIXct(data[['mindcog_db_started_at']],
format = "%d/%m/%Y %H:%M")
data[['mindcog_db_completed_at']] <- as.POSIXct(data[['mindcog_db_completed_at']],
format = "%d/%m/%Y %H:%M")
data[['mindcog_db_date']] <- format(as.POSIXct(data[['mindcog_db_date']],
format = "%d/%m/%Y %H:%M"), format="%d/%m/%Y")
data <- read_xlsx('mindcog_db_2022-02-14.xlsx')
################################# add id, intervention #################################################
#get sheet names
#sheetnames <- excel_sheets('Medoq_informatie_2.xlsx')
mylist <- lapply(excel_sheets('Medoq_informatie_2.xlsx'), read_excel, path = 'Medoq_informatie_2.xlsx')
# name the dataframes
names(mylist) <- c("matchingMindfulness", "matchingFantasizing")
# Bring the dataframes to the global environment
list2env(mylist ,.GlobalEnv)
matchingMindfulness$intervention <- "mindfulness" #add intervention type per sheet
matchingFantasizing$intervention <- "fantasizing"
matchingData <- rbind(matchingMindfulness, matchingFantasizing) #bind into one df
#changing column names since spaces lead to weird errors
colnames(matchingData)[c(1,2,4,5,6)] <- c("id", "recordedDates", "meeting_id", "DatesBaseline", "DatesIntervention")
#extract start and end dates from "Datum baseline" and "Datum interventie" columns
for(row in 1:nrow(matchingData)) { #change all "t/m" to "tm"
if( ! (grepl("tm", matchingData$DatesBaseline[row], fixed=TRUE))){
matchingData$DatesBaseline[row] <- sub("t/m", "\\tm", matchingData$DatesBaseline[row])
}
if( ! (grepl("tm", matchingData$DatesIntervention[row], fixed=TRUE))){
matchingData$DatesIntervention[row] <- sub("t/m", "\\tm", matchingData$DatesIntervention[row])
}
if( ! (grepl("tm", matchingData$recordedDates[row], fixed=TRUE))){
matchingData$recordedDates[row] <- sub("t/m", "\\tm", matchingData$recordedDates[row])
}
}
matchingData$baselineStart <- NA
matchingData$baselineEnd <- NA
matchingData$interventionStart <- NA
matchingData$interventionEnd <- NA
matchingData$recordedStart <- NA
matchingData$recordedEnd <- NA
for(row in 1:nrow(matchingData)){
if(! is.na(matchingData$DatesBaseline[row])){
matchingData$baselineStart[row] <- sub("\\ tm.*", "", matchingData$DatesBaseline[row]) #extract start date
matchingData$baselineEnd[row] <- sub(".* tm", "", matchingData$DatesBaseline[row]) #extract end date
#same for intervention dates
matchingData$interventionStart[row] <- sub("\\ tm.*", "", matchingData$DatesIntervention[row])
matchingData$interventionEnd[row] <- sub(".* tm", "", matchingData$DatesIntervention[row])
}
if(! is.na(matchingData$recordedDates[row])){
matchingData$recordedStart[row] <- sub("\\ tm.*", "", matchingData$recordedDates[row])
matchingData$recordedEnd[row] <- sub(".* tm", "", matchingData$recordedDates[row])
}
}
#performing a "vlookup" of the md... numbers and adding corresponding columns
#from matchingData to data
data$id <- NA
data$intervention <- NA
data$baselineStart <- NA
data$baselineEnd <- NA
data$interventionStart <- NA
data$interventionEnd <- NA
data$recordedStart <- NA
data$recordedEnd <- NA
for(i in 1:nrow(data)){
for(j in 1:nrow(matchingData)){
if(data$patient_id[i] == matchingData$meeting_id[j]){
data$id[i] <- matchingData$id[j]
#data$recordedDates[i] <- matchingData$recordedDates[j]
data$intervention[i] <- matchingData$intervention[j]
data$baselineStart[i] = matchingData$baselineStart[j]
data$baselineEnd[i] = matchingData$baselineEnd[j]
data$interventionStart[i] <- matchingData$interventionStart[j]
data$interventionEnd[i] <- matchingData$interventionEnd[j]
data$recordedStart[i] <- matchingData$recordedStart[j]
data$recordedEnd[i] <- matchingData$recordedEnd[j]
}
}
}
#################################### Data clean up ####################################
#turn all ids to lower case for easier error handling below
data$id <- tolower(data$id)
#fix various errors in id column
for(row in 1:nrow(data)) { #some "s" are missing
if( ! (grepl("s", data$id[row], fixed=TRUE)) & (!(is.na(data$id[row])))){
data$id[row] <- paste("s", data$id[row], sep = "")
}
if( ! (grepl("_g", data$id[row], fixed=TRUE))){ #some "_" prior to "g" are missing
data$id[row] <- sub("g", "\\1_g", data$id[row])
}
if( ! (grepl("_m", data$id[row], fixed = TRUE))){ #some "_" prior to "m" are missing
data$id[row] <- sub("m", "\\1_m", data$id[row])
}
if( (grepl("meting", data$id[row], fixed = TRUE))){#some had "meting" instead of just "m"
data$id[row] <- sub("meting", "\\1m", data$id[row])
}
}
#add group
data$group <- NA
for(row in 1:nrow(data)) {
if(grepl("g1", data$id[row], fixed = TRUE)){
data$group[row] <- "controls"
}
if(grepl("g2", data$id[row], fixed = TRUE)){
data$group[row] <- "remitted"
}
}
#add new column "subject" -> extract all characters up until the first underscore in column "id"
data$subject <- str_extract(data$id, regex("^[^_]+(?=_)"))
#add phase
data$phase <- NA
for(row in 1:nrow(data)) {
if((grepl("m1", data$id[row], fixed = TRUE)) | (grepl("m3", data$id[row], fixed = TRUE))){
data$phase[row] <- "pre"
}
if((grepl("m2", data$id[row], fixed = TRUE)) | (grepl("m4", data$id[row], fixed = TRUE))){
data$phase[row] <- "peri"
}
}
#add block (1 = first intervention cycle, 2 = second intervention cycle)
data$block <- NA
for(row in 1:nrow(data)) {
if((grepl("m1", data$id[row], fixed = TRUE)) | (grepl("m2", data$id[row], fixed = TRUE))){
data$block[row] <- 1
} else {
data$block[row] <- 2
}
}
#Convert dates from characters to datetimes
data[['mindcog_db_open_from']] <- as.POSIXct(data[['mindcog_db_open_from']],
format = "%d/%m/%Y %H:%M")
data[['mindcog_db_started_at']] <- as.POSIXct(data[['mindcog_db_started_at']],
format = "%d/%m/%Y %H:%M")
data[['mindcog_db_completed_at']] <- as.POSIXct(data[['mindcog_db_completed_at']],
format = "%d/%m/%Y %H:%M")
data[['mindcog_db_date']] <- format(as.POSIXct(data[['mindcog_db_date']],
format = "%d/%m/%Y %H:%M"), format="%d/%m/%Y")
#fix problem with dates (whether entry belongs to pre- or peri-intervention phase)
error_demo <- ddply(data[which(data$subject=="s8"),],
.(subject, id, phase, block, mindcog_db_date, recordedStart, recordedEnd,
baselineStart, baselineEnd, interventionStart, interventionStart), plyr::summarise,
nEntries <- length(subject))
View(error_demo)
#fix problem with dates (whether entry belongs to pre- or peri-intervention phase)
error_demo <- ddply(data[which(data$subject=="s8"),],
.(subject, id, phase, block, mindcog_db_date, recordedStart, recordedEnd,
baselineStart, baselineEnd, interventionStart, interventionEnd), plyr::summarise,
nEntries <- length(subject))
for(row in 1:nrow(data)){
if(!is.na(data$recordedStart[row])){
test <- format(data$mindcog_db_date[row], format="%Y")
}
}
class(data$mindcog_db_date[1])
format(data$mindcog_db_date[1], format="%Y")
format(data$mindcog_db_date[1], format="%Y")
format(as.POSIXct(data$mindcog_db_date[1],
format = "%d/%m/%Y"), format="%Y")
test <- paste(data$recordedStart[row], year, sep = "-")
print(class(year))
year(data$mindcog_db_date[1])
for(row in 1:nrow(data)){
if(!is.na(data$recordedStart[row])){
y <- format(as.POSIXct(data$mindcog_db_date[row], format = "%d/%m/%Y"), format="%Y")
print(class(y))
test <- paste(data$recordedStart[row], y, sep = "-")
}
}
#drop subjects without an assigned group
data <- drop_na(data, group)
data <- drop_na(data, patient_id)
#fix problem with dates (whether entry belongs to pre- or peri-intervention phase)
error_demo <- ddply(data[which(data$subject=="s8"),],
.(subject, id, phase, block, mindcog_db_date, recordedStart, recordedEnd,
baselineStart, baselineEnd, interventionStart, interventionEnd), plyr::summarise,
nEntries <- length(subject))
for(row in 1:nrow(data)){
if(!is.na(data$recordedStart[row])){
y <- format(as.POSIXct(data$mindcog_db_date[row], format = "%d/%m/%Y"), format="%Y")
print(class(y))
test <- paste(data$recordedStart[row], y, sep = "-")
}
}
for(row in 1:nrow(data)){
if((!is.na(data$recordedStart[row])) (!is.na(data$mindcog_db_date[row]))){
y <- format(as.POSIXct(data$mindcog_db_date[row], format = "%d/%m/%Y"), format="%Y")
test <- paste(data$recordedStart[row], y, sep = "-")
}
}
for(row in 1:nrow(data)){
if((!is.na(data$recordedStart[row])) & (!is.na(data$mindcog_db_date[row]))){
y <- format(as.POSIXct(data$mindcog_db_date[row], format = "%d/%m/%Y"), format="%Y")
test <- paste(data$recordedStart[row], y, sep = "-")
}
}
for(row in 1:nrow(data)){
if((!is.na(data$recordedStart[row])) & (!is.na(data$mindcog_db_date[row]))){
y <- format(as.POSIXct(data$mindcog_db_date[row], format = "%d/%m/%Y"), format="%Y")
data$recordedStart[row] <- paste(data$recordedStart[row], y, sep = "-")
}
}
View(data[which(is.na(data$mindcog_db_date)),])
for(row in 1:nrow(data)){
if((!is.na(data$recordedStart[row])) & (!is.na(data$mindcog_db_date[row])) & (is.na(data$mindcog_db_non_response))){
y <- format(as.POSIXct(data$mindcog_db_date[row], format = "%d/%m/%Y"), format="%Y")
data$recordedStart[row] <- paste(data$recordedStart[row], y, sep = "-")
}
}
#read in data
data <- read_xlsx('mindcog_db_2022-02-14.xlsx')
################################# add id, intervention #################################################
#get sheet names
#sheetnames <- excel_sheets('Medoq_informatie_2.xlsx')
mylist <- lapply(excel_sheets('Medoq_informatie_2.xlsx'), read_excel, path = 'Medoq_informatie_2.xlsx')
# name the dataframes
names(mylist) <- c("matchingMindfulness", "matchingFantasizing")
# Bring the dataframes to the global environment
list2env(mylist ,.GlobalEnv)
matchingMindfulness$intervention <- "mindfulness" #add intervention type per sheet
matchingFantasizing$intervention <- "fantasizing"
matchingData <- rbind(matchingMindfulness, matchingFantasizing) #bind into one df
#changing column names since spaces lead to weird errors
colnames(matchingData)[c(1,2,4,5,6)] <- c("id", "recordedDates", "meeting_id", "DatesBaseline", "DatesIntervention")
#extract start and end dates from "Datum baseline" and "Datum interventie" columns
for(row in 1:nrow(matchingData)) { #change all "t/m" to "tm"
if( ! (grepl("tm", matchingData$DatesBaseline[row], fixed=TRUE))){
matchingData$DatesBaseline[row] <- sub("t/m", "\\tm", matchingData$DatesBaseline[row])
}
if( ! (grepl("tm", matchingData$DatesIntervention[row], fixed=TRUE))){
matchingData$DatesIntervention[row] <- sub("t/m", "\\tm", matchingData$DatesIntervention[row])
}
if( ! (grepl("tm", matchingData$recordedDates[row], fixed=TRUE))){
matchingData$recordedDates[row] <- sub("t/m", "\\tm", matchingData$recordedDates[row])
}
}
matchingData$baselineStart <- NA
matchingData$baselineEnd <- NA
matchingData$interventionStart <- NA
matchingData$interventionEnd <- NA
matchingData$recordedStart <- NA
matchingData$recordedEnd <- NA
for(row in 1:nrow(matchingData)){
if(! is.na(matchingData$DatesBaseline[row])){
matchingData$baselineStart[row] <- sub("\\ tm.*", "", matchingData$DatesBaseline[row]) #extract start date
matchingData$baselineEnd[row] <- sub(".* tm", "", matchingData$DatesBaseline[row]) #extract end date
#same for intervention dates
matchingData$interventionStart[row] <- sub("\\ tm.*", "", matchingData$DatesIntervention[row])
matchingData$interventionEnd[row] <- sub(".* tm", "", matchingData$DatesIntervention[row])
}
if(! is.na(matchingData$recordedDates[row])){
matchingData$recordedStart[row] <- sub("\\ tm.*", "", matchingData$recordedDates[row])
matchingData$recordedEnd[row] <- sub(".* tm", "", matchingData$recordedDates[row])
}
}
#performing a "vlookup" of the md... numbers and adding corresponding columns
#from matchingData to data
data$id <- NA
data$intervention <- NA
data$baselineStart <- NA
data$baselineEnd <- NA
data$interventionStart <- NA
data$interventionEnd <- NA
data$recordedStart <- NA
data$recordedEnd <- NA
for(i in 1:nrow(data)){
for(j in 1:nrow(matchingData)){
if(data$patient_id[i] == matchingData$meeting_id[j]){
data$id[i] <- matchingData$id[j]
#data$recordedDates[i] <- matchingData$recordedDates[j]
data$intervention[i] <- matchingData$intervention[j]
if(is.na(data$mindcog_db_non_response[i])){
data$baselineStart[i] = matchingData$baselineStart[j]
data$baselineEnd[i] = matchingData$baselineEnd[j]
data$interventionStart[i] <- matchingData$interventionStart[j]
data$interventionEnd[i] <- matchingData$interventionEnd[j]
data$recordedStart[i] <- matchingData$recordedStart[j]
data$recordedEnd[i] <- matchingData$recordedEnd[j]
}
}
}
}
#################################### Data clean up ####################################
#turn all ids to lower case for easier error handling below
data$id <- tolower(data$id)
#fix various errors in id column
for(row in 1:nrow(data)) { #some "s" are missing
if( ! (grepl("s", data$id[row], fixed=TRUE)) & (!(is.na(data$id[row])))){
data$id[row] <- paste("s", data$id[row], sep = "")
}
if( ! (grepl("_g", data$id[row], fixed=TRUE))){ #some "_" prior to "g" are missing
data$id[row] <- sub("g", "\\1_g", data$id[row])
}
if( ! (grepl("_m", data$id[row], fixed = TRUE))){ #some "_" prior to "m" are missing
data$id[row] <- sub("m", "\\1_m", data$id[row])
}
if( (grepl("meting", data$id[row], fixed = TRUE))){#some had "meting" instead of just "m"
data$id[row] <- sub("meting", "\\1m", data$id[row])
}
}
#add group
data$group <- NA
for(row in 1:nrow(data)) {
if(grepl("g1", data$id[row], fixed = TRUE)){
data$group[row] <- "controls"
}
if(grepl("g2", data$id[row], fixed = TRUE)){
data$group[row] <- "remitted"
}
}
#add new column "subject" -> extract all characters up until the first underscore in column "id"
data$subject <- str_extract(data$id, regex("^[^_]+(?=_)"))
#add phase
data$phase <- NA
for(row in 1:nrow(data)) {
if((grepl("m1", data$id[row], fixed = TRUE)) | (grepl("m3", data$id[row], fixed = TRUE))){
data$phase[row] <- "pre"
}
if((grepl("m2", data$id[row], fixed = TRUE)) | (grepl("m4", data$id[row], fixed = TRUE))){
data$phase[row] <- "peri"
}
}
#add block (1 = first intervention cycle, 2 = second intervention cycle)
data$block <- NA
for(row in 1:nrow(data)) {
if((grepl("m1", data$id[row], fixed = TRUE)) | (grepl("m2", data$id[row], fixed = TRUE))){
data$block[row] <- 1
} else {
data$block[row] <- 2
}
}
View(data[which(data$subject == "s8"),])

#fix various errors in id column
for(row in 1:nrow(matchingData)) { #some "s" are missing
if( ! (grepl("s", matchingData$id[row], fixed=TRUE)) & (!(is.na(matchingData$id[row])))){
matchingData$id[row] <- paste("s", matchingData$id[row], sep = "")
}
if( ! (grepl("_g", matchingData$id[row], fixed=TRUE))){ #some "_" prior to "g" are missing
matchingData$id[row] <- sub("g", "\\1_g", matchingData$id[row])
}
if( ! (grepl("_m", matchingData$id[row], fixed = TRUE))){ #some "_" prior to "m" are missing
matchingData$id[row] <- sub("m", "\\1_m", matchingData$id[row])
}
if( (grepl("meting", matchingData$id[row], fixed = TRUE))){#some had "meting" instead of just "m"
matchingData$id[row] <- sub("meting", "\\1m", matchingData$id[row])
}
}
#there are some duplicate entries that would cause issues later on
n_occur <- data.frame(table(matchingData$id))
#n_occur[n_occur$Freq > 1,]
duplicate_entries <- subset(matchingData[matchingData$id %in% n_occur$Var1[n_occur$Freq > 1],],
select = c(id, recordedDates, DatesBaseline, DatesIntervention))
#extract start and end dates from "Datum baseline" and "Datum interventie" columns
for(row in 1:nrow(matchingData)) { #change all "t/m" to "tm"
if( ! (grepl("tm", matchingData$DatesBaseline[row], fixed=TRUE))){
matchingData$DatesBaseline[row] <- sub("t/m", "\\tm", matchingData$DatesBaseline[row])
}
if( ! (grepl("tm", matchingData$DatesIntervention[row], fixed=TRUE))){
matchingData$DatesIntervention[row] <- sub("t/m", "\\tm", matchingData$DatesIntervention[row])
}
if( ! (grepl("tm", matchingData$recordedDates[row], fixed=TRUE))){
matchingData$recordedDates[row] <- sub("t/m", "\\tm", matchingData$recordedDates[row])
}
}
matchingData$baselineStart <- NA
setwd("~/Documents/RUG/Thesis/EMA-mindfulness/Data/ESM/mindcog_v202204")
library(readxl)
library(tidyverse)
library(plyr)
library(dplyr)
library(Hmisc)
library(corrplot)
library(data.table)
library(ggplot2)
library(reshape)
library(ggpubr)
library(lubridate)
library(igraph)
library(qgraph)
#read in data
data <- read.csv('mindcog_db_2022-04-12.csv', sep = ";")
################################# load Medoq info and clean up #################################################
#get sheet names
#sheetnames <- excel_sheets('Medoq_informatie_2.xlsx')
mylist <- lapply(excel_sheets('Medoq_informatie_2.xlsx'), read_excel, path = 'Medoq_informatie_2.xlsx')
# name the dataframes
names(mylist) <- c("matchingMindfulness", "matchingFantasizing")
# Bring the dataframes to the global environment
list2env(mylist ,.GlobalEnv)
matchingMindfulness$intervention <- "mindfulness" #add intervention type per sheet
matchingFantasizing$intervention <- "fantasizing"
matchingData <- rbind(matchingMindfulness, matchingFantasizing) #bind into one df
#changing column names since spaces lead to weird errors
colnames(matchingData)[c(1,2,4,5,6)] <- c("id", "recordedDates", "meeting_id", "DatesBaseline", "DatesIntervention")
#turn all ids to lower case for easier error handling below
matchingData$id <- tolower(matchingData$id)
#fix various errors in id column
for(row in 1:nrow(matchingData)) { #some "s" are missing
if( ! (grepl("s", matchingData$id[row], fixed=TRUE)) & (!(is.na(matchingData$id[row])))){
matchingData$id[row] <- paste("s", matchingData$id[row], sep = "")
}
if( ! (grepl("_g", matchingData$id[row], fixed=TRUE))){ #some "_" prior to "g" are missing
matchingData$id[row] <- sub("g", "\\1_g", matchingData$id[row])
}
if( ! (grepl("_m", matchingData$id[row], fixed = TRUE))){ #some "_" prior to "m" are missing
matchingData$id[row] <- sub("m", "\\1_m", matchingData$id[row])
}
if( (grepl("meting", matchingData$id[row], fixed = TRUE))){#some had "meting" instead of just "m"
matchingData$id[row] <- sub("meting", "\\1m", matchingData$id[row])
}
}
#there are some duplicate entries that would cause issues later on
n_occur <- data.frame(table(matchingData$id))
#n_occur[n_occur$Freq > 1,]
duplicate_entries <- subset(matchingData[matchingData$id %in% n_occur$Var1[n_occur$Freq > 1],],
select = c(id, recordedDates, DatesBaseline, DatesIntervention))
#extract start and end dates from "Datum baseline" and "Datum interventie" columns
for(row in 1:nrow(matchingData)) { #change all "t/m" to "tm"
if( ! (grepl("tm", matchingData$DatesBaseline[row], fixed=TRUE))){
matchingData$DatesBaseline[row] <- sub("t/m", "\\tm", matchingData$DatesBaseline[row])
}
if( ! (grepl("tm", matchingData$DatesIntervention[row], fixed=TRUE))){
matchingData$DatesIntervention[row] <- sub("t/m", "\\tm", matchingData$DatesIntervention[row])
}
if( ! (grepl("tm", matchingData$recordedDates[row], fixed=TRUE))){
matchingData$recordedDates[row] <- sub("t/m", "\\tm", matchingData$recordedDates[row])
}
}
matchingData$baselineStart <- NA
matchingData$baselineEnd <- NA
matchingData$interventionStart <- NA
matchingData$interventionEnd <- NA
matchingData$recordedStart <- NA
matchingData$recordedEnd <- NA
for(row in 1:nrow(matchingData)){
if(! is.na(matchingData$DatesBaseline[row])){
matchingData$baselineStart[row] <- sub("\\ tm.*", "", matchingData$DatesBaseline[row]) #extract start date
matchingData$baselineEnd[row] <- sub(".* tm", "", matchingData$DatesBaseline[row]) #extract end date
#same for intervention dates
matchingData$interventionStart[row] <- sub("\\ tm.*", "", matchingData$DatesIntervention[row])
matchingData$interventionEnd[row] <- sub(".* tm", "", matchingData$DatesIntervention[row])
}
if(! is.na(matchingData$recordedDates[row])){
matchingData$recordedStart[row] <- sub("\\ tm.*", "", matchingData$recordedDates[row])
matchingData$recordedEnd[row] <- sub(".* tm", "", matchingData$recordedDates[row])
}
}
#s3_g1_m3 and s3_g1_m4 have duplicate entries in MatchingData (once without corrected dates) --> remove wrong one
#View(matchingData[which((matchingData$id=="s3_g1_m3") | (matchingData$id=="s3_g1_m4") ),])
matchingData <- matchingData[!(matchingData$id == "s3_g1_m3" & is.na(matchingData$recordedDates)),]
matchingData <- matchingData[!(matchingData$id == "s3_g1_m4" & is.na(matchingData$recordedDates)),]
##################################### combine data ####################################
#performing a "vlookup" of the md... numbers and adding corresponding columns
#from matchingData to data
data$id <- NA
data$intervention <- NA
data$baselineStart <- NA
data$baselineEnd <- NA
data$interventionStart <- NA
data$interventionEnd <- NA
data$recordedStart <- NA
data$recordedEnd <- NA
for(i in 1:nrow(data)){
for(j in 1:nrow(matchingData)){
if(data$patient_id[i] == matchingData$meeting_id[j]){
data$id[i] <- matchingData$id[j]
#data$recordedDates[i] <- matchingData$recordedDates[j]
data$intervention[i] <- matchingData$intervention[j]
#if(is.na(data$mindcog_db_non_response[i])){
data$baselineStart[i] = matchingData$baselineStart[j]
data$baselineEnd[i] = matchingData$baselineEnd[j]
data$interventionStart[i] <- matchingData$interventionStart[j]
data$interventionEnd[i] <- matchingData$interventionEnd[j]
data$recordedStart[i] <- matchingData$recordedStart[j]
data$recordedEnd[i] <- matchingData$recordedEnd[j]
#}
}
}
}
# View(subset(data, id=="s156_g2_m1" | id=="s156_g2_m2"))
# unique(subset(data, id=="s156_g2_m1" | id=="s156_g2_m2")$patient_id)
#################################### add variables  ####################################
#add group
data$group <- NA
for(row in 1:nrow(data)) {
if(grepl("g1", data$id[row], fixed = TRUE)){
data$group[row] <- "controls"
}
if(grepl("g2", data$id[row], fixed = TRUE)){
data$group[row] <- "remitted"
}
}
#add new column "subject" -> extract all characters up until the first underscore in column "id"
data$subject <- str_extract(data$id, regex("^[^_]+(?=_)"))
#add phase
data$phase <- NA
for(row in 1:nrow(data)) {
if((grepl("m1", data$id[row], fixed = TRUE)) | (grepl("m3", data$id[row], fixed = TRUE))){
data$phase[row] <- "pre"
}
if((grepl("m2", data$id[row], fixed = TRUE)) | (grepl("m4", data$id[row], fixed = TRUE))){
data$phase[row] <- "peri"
}
}
#add block (1 = first intervention cycle, 2 = second intervention cycle)
data$block <- NA
for(row in 1:nrow(data)) {
if((grepl("m1", data$id[row], fixed = TRUE)) | (grepl("m2", data$id[row], fixed = TRUE))){
data$block[row] <- 1
} else {
data$block[row] <- 2
}
}
#Convert dates from characters to datetimes
data[['mindcog_db_open_from']] <- as.POSIXct(data[['mindcog_db_open_from']],
format = "%d-%m-%Y %H:%M:%S")
data[['mindcog_db_started_at']] <- as.POSIXct(data[['mindcog_db_started_at']],
format = "%d-%m-%Y %H:%M:%S")
data[['mindcog_db_completed_at']] <- as.POSIXct(data[['mindcog_db_completed_at']],
format = "%d-%m-%Y %H:%M:%S")
data[['mindcog_db_date']] <- format(as.POSIXct(data[['mindcog_db_date']],
format = "%d-%m-%Y %H:%M:%S"), format="%Y-%m-%d")
################################# What data are we missing? ###################################
missing_data <- ddply(data, .(patient_id, id, group, intervention), plyr::summarise,
numBeeped = length(mindcog_db_open_from),
responseRate = round((numBeeped - length(unique(mindcog_db_non_response)))/numBeeped,2))
na_data <- missing_data[(is.na(missing_data$patient_id)) |
is.na((missing_data$group)) |
is.na((missing_data$intervention)), ]
write.csv(na_data, file = "patientID_issues.csv")
#drop subjects without an assigned group
data <- drop_na(data, group)
data <- drop_na(data, patient_id)
#turning the recordedStart/-End, baselineStart/-End, ... into actual dates with corresponding year
for(row in 1:nrow(data)){ #first extract year from the mindcog_db_date column
y <- format(as.POSIXct(data$mindcog_db_open_from[row], format = "%Y-%m-%d %H:%M:%S"), format="%Y")
#if there is an entry for recordedStart and mindcog_db_date (i.e., if its not a non-response)
if((!is.na(data$recordedStart[row])) & (!is.na(data$mindcog_db_open_from[row]))){
#combine day-month from recordedStart (etc.) with extracted year and reformat to match other dates in df
data$recordedStart[row] <- format(as.POSIXct(paste(data$recordedStart[row], y, sep = "-"),
format = "%d-%m-%Y"), format = "%Y-%m-%d")
data$recordedEnd[row] <- format(as.POSIXct(paste(data$recordedEnd[row], y, sep = "-"),
format = "%d-%m-%Y"), format = "%Y-%m-%d")
}# repeat for other columns
if((!is.na(data$baselineStart[row])) & (!is.na(data$mindcog_db_open_from[row]))){
data$baselineStart[row] <- format(as.POSIXct(paste(data$baselineStart[row], y, sep = "-"),
format = "%d-%m-%Y"), format = "%Y-%m-%d")
data$baselineEnd[row] <- format(as.POSIXct(paste(data$baselineEnd[row], y, sep = "-"),
format = "%d-%m-%Y"), format = "%Y-%m-%d")
data$interventionStart[row] <- format(as.POSIXct(paste(data$interventionStart[row], y, sep = "-"),
format = "%d-%m-%Y"), format = "%Y-%m-%d")
data$interventionEnd[row] <- format(as.POSIXct(paste(data$interventionEnd[row], y, sep = "-"),
format = "%d-%m-%Y"), format = "%Y-%m-%d")
}
}
pre_to_peri <- c() #empty lists for row indices of faulty entries
peri_to_pre <- c()
i <- 1 #to add to the lists (in a computationally efficient way)
j <- 1
for(row in 1:nrow(data)){
#if there is a date in baselineStart (which means there is one in the other relevant columns too)
# and if it is not a non-response
if((!is.na(data$baselineStart[row])) & (!is.na(data$mindcog_db_open_from[row]))){
#if phase is "pre"
if((!is.na(data$phase[row])) & (data$phase[row] == "pre")){
#if the recorded mindcog date is greater than the end of baseline date
if((format(data$mindcog_db_open_from[row], format = "%Y-%m-%d") > data$baselineEnd[row])){
pre_to_peri[i] <- row #add row index to list
i <- i+1 #increment list index count
}
} #same for entries coded as peri that should be pre
if((!is.na(data$phase[row])) & (data$phase[row] == "peri")){
if((format(data$mindcog_db_open_from[row], format = "%Y-%m-%d") < data$interventionStart[row])){
peri_to_pre[j] <- row
j <- j+1
}
}
}
}
length(pre_to_peri)
length(peri_to_pre)
pre_to_peri_df <- (subset(data[pre_to_peri,], select=c("id", "mindcog_db_open_from", "phase", "baselineStart",
"baselineEnd", "interventionStart", "interventionEnd")))
peri_to_pre_df <- (subset(data[peri_to_pre,], select=c("id", "mindcog_db_open_from", "phase", "baselineStart",
"baselineEnd", "interventionStart", "interventionEnd")))
data[pre_to_peri,]$phase <- "peri"
for(row in pre_to_peri){
if((grepl("m1", data$id[row], fixed=TRUE))){
data$id[row] <- sub("m1", "\\m2", data$id[row])
}
if((grepl("m3", data$id[row], fixed=TRUE))){
data$id[row] <- sub("m3", "\\m4", data$id[row])
}
}
data[peri_to_pre,]$phase <- "pre"
for(row in peri_to_pre){
if((grepl("m2", data$id[row], fixed=TRUE))){
data$id[row] <- sub("m2", "\\m1", data$id[row])
}
if((grepl("m4", data$id[row], fixed=TRUE))){
data$id[row] <- sub("m4", "\\m3", data$id[row])
}
}
######################################## Changing ESM item names ##############################
#Get numbers of ESM item columns
item1 <- which( colnames(data)=="mindcog_db_1" ) #this is the first column that interests us
item33 <- which( colnames(data)=="mindcog_db_33" )#last item of interest
colNamesOld <- setNames(data.frame(colnames(data[, item1:item33])), "columns")
colNamesNew <- c('firstEntry', 'sleepQuality', 'toBedHour', 'toBedMinute', 'trySleepHour', 'trySleepMinute',
'durationFallAsleep', 'wakeupHour', 'wakeupMinute', 'restednessWakeup', 'wakeful',
'down', 'satisfied', 'irritated', 'energetic', 'restless', 'stressed', 'anxious',
'listless', 'thinkingOf', 'ruminating', 'stickiness', 'thoughtsPleasant',
'thoughtsTime', 'thoughtsValence', 'thoughtsObject', 'distracted',
'restOfDayPos', 'aloneCompany', 'companyPleasant', 'alonePleasant', 'posMax',
'posIntensity', 'negMax', 'negIntensity', 'comments')
setnames(data, old = colNamesOld$columns, new = colNamesNew)
data$sumPA <- NA
data$sumNA <- NA
for(row in 1:nrow(data)){
if((!is.na(data$wakeful[row])) & (!is.na(data$satisfied[row])) & (!is.na(data$energetic[row]))){
data$sumPA[row] <- data$wakeful[row] + data$satisfied[row] + data$energetic[row]
}
if((!is.na(data$down[row])) & (!is.na(data$irritated[row])) & (!is.na(data$restless[row])) &
(!is.na(data$anxious[row]))){
data$sumNA[row] <- data$down[row] + data$irritated[row] + data$restless[row] + data$anxious[row]
}
}
#calculate the time it took a participant to start after being informed (in minutes)
data$response_delay <- (data$mindcog_db_started_at - data$mindcog_db_open_from)/60
#calculate how long it took a participant to complete the questionnaire (in minutes)
data$response_duration <- (data$mindcog_db_completed_at - data$mindcog_db_started_at)/60
#calculate the minutes that have past since the last beep
subject_IDs <- unique(data$subject) #get a list of all unique IDs
data$minLastBeep <- NA
for(id in subject_IDs){ #for loop to fill the column with the day numbers
prev_row = 0
xDate <- as.Date("01/01/1999", format = '%d/%m/%Y') #low arbitrary date for comparison of first assessment date
respondent_rows <- which(data$subject == id) #row indices of rows associated with respondent
for (row in respondent_rows) { #loop over these rows
#if this rows date is greater than the previous assessment's date
if(as.Date(data$mindcog_db_open_from[row]) == as.Date(xDate)){
timePast = hms(as.ITime(data$mindcog_db_open_from[row]) - as.ITime(data$mindcog_db_open_from[prev_row]))
minutesPast = hour(timePast)*60 + minute(timePast) #increment the assessment day count
data$minLastBeep[row] <- minutesPast #add the minutes past
prev_row = row #update the previous row index (not plus one bc numbers are not continuous!)
xDate = data$mindcog_db_open_from[row] #set new comparison date to date of current row
} else {
#otherwise this row's date is equal to the previous row's --> same assessment day
data$minLastBeep[row] <- NA
prev_row = row
xDate = data$mindcog_db_open_from[row] #set new comparison date to date of current row
}
}
}
#adding beep number (continuous count of sent assessment queries)
data$beepNum <- NA
for(id in subject_IDs){ #every participant
respondent_rows <- which(data$subject == id) #row indices of rows associated with respondent
#adding a number per assessment
data[respondent_rows,]$beepNum <- 1:length(respondent_rows)
}
#beep number per phase
data$phaseBeepNum <- NA
phases <- unique(data$phase)
for(id in subject_IDs){ #every participant
for(phase in phases){
phase_rows <- which((data$subject == id) & (data$phase == phase)) #row indices of rows associated with respondent
if(length(phase_rows) > 0){
data[phase_rows,]$phaseBeepNum <- 1:length(phase_rows)
}
}
}
#beep number per block
data$blockBeepNum <- NA
for(id in subject_IDs){ #every participant
for(block in 1:2){
block_rows <- which((data$subject == id) & (data$block == block)) #row indices of rows associated with respondent
if(length(block_rows) > 0){
data[block_rows,]$blockBeepNum <- 1:length(block_rows)
}
}
}
#adding assessment day
data$assessmentDay <- NA #adding an empty column for assessment days
for(id in subject_IDs){ #for loop to fill the column with the day numbers
assessment_day <- 0
prev_row = 0
xDate <- as.Date("01/01/1999", format = '%d/%m/%Y') #low arbitrary date for comparison of first assessment date
respondent_rows <- which(data$subject == id) #row indices of rows associated with respondent
for (row in respondent_rows) { #loop over these rows
#if this rows date is greater than the previous assessment's date
if(as.Date(data$mindcog_db_open_from[row]) > xDate){
assessment_day = assessment_day + 1 #increment the assessment day count
data$assessmentDay[row] <- assessment_day #and add this new number as assessment day for this row
prev_row = row #update the previous row index (not plus one bc numbers are not continuous!)
xDate = as.Date(data$mindcog_db_open_from[row]) #set new comparison date to date of current row
} else {
#otherwise this row's date is equal to the previous row's --> same assessment day
data$assessmentDay[row] <- data$assessmentDay[prev_row]
prev_row = row
}
}
}
phases <- c("pre", "peri")
data$phaseAssessmentDay <- NA
for(id in subject_IDs){
for(p in phases){
for(block in 1:2){
assessment_day <- 0
prev_row = 0
xDate <- as.Date("01/01/1999", format = '%d/%m/%Y')
phase_rows <- which((data$subject == id) & (data$block == block) & (data$phase == p))
if(length(phase_rows) > 0){
for (row in phase_rows) { #loop over these rows
#if this rows date is greater than the previous assessment's date
if(as.Date(data$mindcog_db_open_from[row]) > xDate){
assessment_day = assessment_day + 1 #increment the assessment day count
data$phaseAssessmentDay[row] <- assessment_day #and add this new number as assessment day for this row
prev_row = row #update the previous row index (not plus one bc numbers are not continuous!)
xDate = as.Date(data$mindcog_db_open_from[row]) #set new comparison date to date of current row
} else {
#otherwise this row's date is equal to the previous row's --> same assessment day
data$phaseAssessmentDay[row] <- data$phaseAssessmentDay[prev_row]
prev_row = row
}
}
}
}
}
}
#assessment day per block
data$blockAssessmentDay <- NA #adding an empty column for assessment days
for(id in subject_IDs){ #for loop to fill the column with the day numbers
for(block in 1:2){
assessment_day <- 0
prev_row = 0
xDate <- as.Date("01/01/1999", format = '%d/%m/%Y') #low arbitrary date for comparison of first assessment date
block_rows <- which((data$subject == id) & (data$block == block)) #row indices of rows associated with respondent
if(length(block_rows) > 0){
for (row in block_rows) { #loop over these rows
#if this rows date is greater than the previous assessment's date
if(as.Date(data$mindcog_db_open_from[row]) > xDate){
assessment_day = assessment_day + 1 #increment the assessment day count
data$blockAssessmentDay[row] <- assessment_day #and add this new number as assessment day for this row
prev_row = row #update the previous row index (not plus one bc numbers are not continuous!)
xDate = as.Date(data$mindcog_db_open_from[row]) #set new comparison date to date of current row
} else {
#otherwise this row's date is equal to the previous row's --> same assessment day
data$blockAssessmentDay[row] <- data$blockAssessmentDay[prev_row]
prev_row = row
}
}
}
}
}
assessment_days <- length(unique(data[which(data$subject==id),]))
data[which(data$subject==id),]
max(data[which(data$subject==id),]$assessmentDay)
length(unique(data[which(data$subject==id),]$assessmentDay))
respondent_rows <- which((data$subject == id) & data$assessmentDay==d) #row indices of rows associated with respondent
for(d in 1:num_days){
respondent_rows <- which((data$subject == id) & data$assessmentDay==d) #row indices of rows associated with respondent
}
num_days <- length(unique(data[which(data$subject==id),]$assessmentDay))
for(d in 1:num_days){
respondent_rows <- which((data$subject == id) & data$assessmentDay==d) #row indices of rows associated with respondent
}
row_number(data[respondent_rows,])
respondent_rows <- which((data$subject == id) & data$assessmentDay==d)[1:5] #row indices of rows associated with respondent
data[respondent_rows]
data[respondent_rows,]
data[respondent_rows,]$assessmentDay
#adding half days
data$halfDay <- NA #adding an empty column for assessment days
for(id in subject_IDs){ #for loop to fill the column with the day numbers
half_day <- 0
prev_row = 0
assessment_day <- 0
num_days <- length(unique(data[which(data$subject==id),]$assessmentDay))
xDate <- as.Date("01/01/1999", format = '%d/%m/%Y') #low arbitrary date for comparison of first assessment date
for(d in 1:num_days){
half_day <- half_day + 1
respondent_rows <- which((data$subject == id) & data$assessmentDay==d)[1:5]#row indices of rows associated with respondent
data[respondent_rows,]$halfDay <- half_day
half_day <- half_day + 1
respondent_rows <- which((data$subject == id) & data$assessmentDay==d)[6:10]#row indices of rows associated with respondent
data[respondent_rows,]$halfDay <- half_day
}
}
data[c(401, 402, 403),]
data[which(data$subject==id),]
View(data[which(data$subject==id),])
6:6
#adding half days
data$halfDay <- NA #adding an empty column for assessment days
for(id in subject_IDs){ #for loop to fill the column with the day numbers
half_day <- 0
prev_row = 0
assessment_day <- 0
num_days <- length(unique(data[which(data$subject==id),]$assessmentDay))
xDate <- as.Date("01/01/1999", format = '%d/%m/%Y') #low arbitrary date for comparison of first assessment date
for(d in 1:num_days){
half_day <- half_day + 1
if(length(uniq))
respondent_rows <- which((data$subject == id) & data$assessmentDay==d)#row indices of rows associated with respondent
numEntries <- length(respondent_rows)
if(numEntries >= 5){
data[respondent_rows[1:5],]$halfDay <- half_day
} else {
data[respondent_rows,]$halfDay <- half_day
half_day <- half_day + 1
break
}
half_day <- half_day + 1
respondent_rows <- respondent_rows[6:numEntries]#row indices of rows associated with respondent
data[respondent_rows,]$halfDay <- half_day
}
}
#adding half days
data$halfDay <- NA #adding an empty column for assessment days
for(id in subject_IDs){ #for loop to fill the column with the day numbers
half_day <- 0
prev_row = 0
assessment_day <- 0
num_days <- length(unique(data[which(data$subject==id),]$assessmentDay))
xDate <- as.Date("01/01/1999", format = '%d/%m/%Y') #low arbitrary date for comparison of first assessment date
for(d in 1:num_days){
half_day <- half_day + 1
respondent_rows <- which((data$subject == id) & data$assessmentDay==d)#row indices of rows associated with respondent
numEntries <- length(respondent_rows)
if(numEntries >= 5){
data[respondent_rows[1:5],]$halfDay <- half_day
} else {
data[respondent_rows,]$halfDay <- half_day
half_day <- half_day + 1
break
}
half_day <- half_day + 1
respondent_rows <- respondent_rows[6:numEntries]#row indices of rows associated with respondent
data[respondent_rows,]$halfDay <- half_day
}
}
View(data[which(data$subject==id),])
View(data[which(data$subject=="s4"),])

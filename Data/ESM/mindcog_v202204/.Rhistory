#Get numbers of ESM item columns
item1 <- which( colnames(data)=="mindcog_db_1" ) #this is the first column that interests us
item33 <- which( colnames(data)=="mindcog_db_33" )#last item of interest
colNamesOld <- setNames(data.frame(colnames(data[, item1:item33])), "columns")
colNamesNew <- c('firstEntry', 'sleepQuality', 'toBedHour', 'toBedMinute', 'trySleepHour', 'trySleepMinute',
'durationFallAsleep', 'wakeupHour', 'wakeupMinute', 'restednessWakeup', 'wakeful',
'sad', 'satisfied', 'irritated', 'energetic', 'restless', 'stressed', 'anxious',
'listless', 'thinkingOf', 'worried', 'stickiness', 'thoughtsPleasant',
'thoughtsTime', 'thoughtsValence', 'thoughtsObject', 'distracted',
'restOfDayPos', 'aloneCompany', 'companyPleasant', 'alonePleasant', 'posMax',
'posIntensity', 'negMax', 'negIntensity', 'comments')
setnames(data, old = colNamesOld$columns, new = colNamesNew)
################################### Positive / Negative Affect ####################################
# data$meanPA <- rowMeans(subset(data, select = c(wakeful, satisfied, energetic)), na.rm = TRUE)
# data$meanNA <- rowMeans(subset(data, select = c(sad, irritated, restless,
#                                                 stressed, anxious, listless)), na.rm = TRUE)
data$sumPA <- NA
data$sumNA <- NA
for(row in 1:nrow(data)){
if((!is.na(data$wakeful[row])) & (!is.na(data$satisfied[row])) & (!is.na(data$energetic[row]))){
data$sumPA[row] <- data$wakeful[row] + data$satisfied[row] + data$energetic[row]
}
if((!is.na(data$sad[row])) & (!is.na(data$irritated[row])) & (!is.na(data$restless[row])) &
(!is.na(data$anxious[row]))){
data$sumNA[row] <- data$sad[row] + data$irritated[row] + data$restless[row] + data$anxious[row]
}
}
# data$sumPA <- rowSums(subset(data, select = c(wakeful, satisfied, energetic)), na.rm = TRUE)
# data$sumNA <- rowSums(subset(data, select = c(sad, irritated, restless,
#                                                 stressed, anxious, listless)), na.rm = TRUE)
#################################### add measures on response times  ####################################
#calculate the time it took a participant to start after being informed (in minutes)
data$response_delay <- (data$mindcog_db_started_at - data$mindcog_db_open_from)/60
#calculate how long it took a participant to complete the questionnaire (in minutes)
data$response_duration <- (data$mindcog_db_completed_at - data$mindcog_db_started_at)/60
#calculate the minutes that have past since the last beep
subject_IDs <- unique(data$subject) #get a list of all unique IDs
data$minLastBeep <- NA
for(id in subject_IDs){ #for loop to fill the column with the day numbers
prev_row = 0
xDate <- as.Date("01/01/1999", format = '%d/%m/%Y') #low arbitrary date for comparison of first assessment date
respondent_rows <- which(data$subject == id) #row indices of rows associated with respondent
for (row in respondent_rows) { #loop over these rows
#if this rows date is greater than the previous assessment's date
if(as.Date(data$mindcog_db_open_from[row]) == as.Date(xDate)){
timePast = hms(as.ITime(data$mindcog_db_open_from[row]) - as.ITime(data$mindcog_db_open_from[prev_row]))
minutesPast = hour(timePast)*60 + minute(timePast) #increment the assessment day count
data$minLastBeep[row] <- minutesPast #add the minutes past
prev_row = row #update the previous row index (not plus one bc numbers are not continuous!)
xDate = data$mindcog_db_open_from[row] #set new comparison date to date of current row
} else {
#otherwise this row's date is equal to the previous row's --> same assessment day
data$minLastBeep[row] <- NA
prev_row = row
xDate = data$mindcog_db_open_from[row] #set new comparison date to date of current row
}
}
}
#test <- subset(data, select = c(id, subject, mindcog_db_open_from, minLastBeep))
####################### Beep number, assessment day and lagged variables  #############################
#adding beep number (continuous count of sent assessment queries)
data$beepNum <- NA
for(id in subject_IDs){ #every participant
respondent_rows <- which(data$subject == id) #row indices of rows associated with respondent
#adding a number per assessment
data[respondent_rows,]$beepNum <- 1:length(respondent_rows)
}
#beep number per phase
data$phaseBeepNum <- NA
phases <- unique(data$phase)
for(id in subject_IDs){ #every participant
for(phase in phases){
phase_rows <- which((data$subject == id) & (data$phase == phase)) #row indices of rows associated with respondent
if(length(phase_rows) > 0){
data[phase_rows,]$phaseBeepNum <- 1:length(phase_rows)
}
}
}
#beep number per block
data$blockBeepNum <- NA
for(id in subject_IDs){ #every participant
for(block in 1:2){
block_rows <- which((data$subject == id) & (data$block == block)) #row indices of rows associated with respondent
if(length(block_rows) > 0){
data[block_rows,]$blockBeepNum <- 1:length(block_rows)
}
}
}
#test <- subset(data[data$subject == "s8",], select = c(subject, phase, block, blockBeepNum, phaseBeepNum, beepNum))
#adding assessment day
data$assessmentDay <- NA #adding an empty column for assessment days
for(id in subject_IDs){ #for loop to fill the column with the day numbers
assessment_day <- 0
prev_row = 0
xDate <- as.Date("01/01/1999", format = '%d/%m/%Y') #low arbitrary date for comparison of first assessment date
respondent_rows <- which(data$subject == id) #row indices of rows associated with respondent
for (row in respondent_rows) { #loop over these rows
#if this rows date is greater than the previous assessment's date
if(as.Date(data$mindcog_db_open_from[row]) > xDate){
assessment_day = assessment_day + 1 #increment the assessment day count
data$assessmentDay[row] <- assessment_day #and add this new number as assessment day for this row
prev_row = row #update the previous row index (not plus one bc numbers are not continuous!)
xDate = as.Date(data$mindcog_db_open_from[row]) #set new comparison date to date of current row
} else {
#otherwise this row's date is equal to the previous row's --> same assessment day
data$assessmentDay[row] <- data$assessmentDay[prev_row]
prev_row = row
}
}
}
phases <- c("pre", "peri")
data$phaseAssessmentDay <- NA
for(id in subject_IDs){
for(p in phases){
for(block in 1:2){
assessment_day <- 0
prev_row = 0
xDate <- as.Date("01/01/1999", format = '%d/%m/%Y')
phase_rows <- which((data$subject == id) & (data$block == block) & (data$phase == p))
if(length(phase_rows) > 0){
for (row in phase_rows) { #loop over these rows
#if this rows date is greater than the previous assessment's date
if(as.Date(data$mindcog_db_open_from[row]) > xDate){
assessment_day = assessment_day + 1 #increment the assessment day count
data$phaseAssessmentDay[row] <- assessment_day #and add this new number as assessment day for this row
prev_row = row #update the previous row index (not plus one bc numbers are not continuous!)
xDate = as.Date(data$mindcog_db_open_from[row]) #set new comparison date to date of current row
} else {
#otherwise this row's date is equal to the previous row's --> same assessment day
data$phaseAssessmentDay[row] <- data$phaseAssessmentDay[prev_row]
prev_row = row
}
}
}
}
}
}
# View(subset(data[which(data$subject == "s8"),],
#     select = c("patient_id", "id", "intervention", "phase", "mindcog_db_open_from",
#           "assessmentDay", "blockAssessmentDay", "phaseAssessmentDay")))
#test <- subset(data, select = c(id, subject, mindcog_db_open_from, assessmentDay))
#assessment day per block
data$blockAssessmentDay <- NA #adding an empty column for assessment days
for(id in subject_IDs){ #for loop to fill the column with the day numbers
for(block in 1:2){
assessment_day <- 0
prev_row = 0
xDate <- as.Date("01/01/1999", format = '%d/%m/%Y') #low arbitrary date for comparison of first assessment date
block_rows <- which((data$subject == id) & (data$block == block)) #row indices of rows associated with respondent
if(length(block_rows) > 0){
for (row in block_rows) { #loop over these rows
#if this rows date is greater than the previous assessment's date
if(as.Date(data$mindcog_db_open_from[row]) > xDate){
assessment_day = assessment_day + 1 #increment the assessment day count
data$blockAssessmentDay[row] <- assessment_day #and add this new number as assessment day for this row
prev_row = row #update the previous row index (not plus one bc numbers are not continuous!)
xDate = as.Date(data$mindcog_db_open_from[row]) #set new comparison date to date of current row
} else {
#otherwise this row's date is equal to the previous row's --> same assessment day
data$blockAssessmentDay[row] <- data$blockAssessmentDay[prev_row]
prev_row = row
}
}
}
}
}
View(subset(data[which(data$phaseAssessmentDay>7),],
select=c("group", "intervention", "id", "phase", "block",
"phaseAssessmentDay", "mindcog_db_open_from", "mindcog_db_non_response", "mindcog_db_date",
"baselineStart", "baselineEnd", "interventionStart", "interventionEnd")))
############################## Some changes for convenience ################################
#drop unnecessary columns and reorder columns for convenience
columnNames <- c(colnames(data))
data <- data %>% select(patient_id, id, subject, group, intervention, phase, block,
#18 = db_open_from; 23 = db_date; 26:61 = firstEntry:comments; 67:76
columnNames[18:23], columnNames[26:61], sumPA, sumNA,
#67:78 = response measures
columnNames[76:84])
# data <- subset(data, select = -c(roqua_id, hide_pii_from_researchers, gender, birth_year,
#                                  hide_values_from_professionals, respondent_label, respondent_type,
#                                  mindcog_db_project, mindcog_db_notes, mindcog_db_location,
#                                  mindcog_db_invited_at, mindcog_db_emailed_at, mindcog_db_variant,
#                                  mindcog_db_anonymous, mindcog_db_protocol, mindcog_db_measurement))
###################################### Creating lagged variables #############################################
#the variables to be lagged
cols <- c('wakeful', 'sad', 'satisfied', 'irritated', 'energetic', 'restless', 'stressed', 'anxious',
'listless', 'thinkingOf', 'worried', 'stickiness', 'thoughtsPleasant', 'thoughtsTime',
'thoughtsValence', 'thoughtsObject', 'distracted', 'restOfDayPos', 'aloneCompany',
'companyPleasant', 'alonePleasant', 'posMax', 'posIntensity', 'negMax', 'negIntensity',
'sumPA', 'sumNA')
#creating a vector with new "lagged" column names
laggedCols <- c()
for(col in cols) {
laggedCols <- c(laggedCols, paste(col, "lag1", sep = "_"))
}
#adding empty columns with "lagged" names
data[, laggedCols] <- NA
#zipping current and lagged column names for the for loop
colZip <- mapply(c, cols, laggedCols, SIMPLIFY = FALSE)
#for loop to add the lagged values to their corresponding new columns
for(id in subject_IDs){
respondent_rows <- which(data$subject == id) #one respondent at a time
for(col in colZip) { #looping over the zipped column name pairs
prev_value <- NA #previous value starts out as NA for every column
current_day <- 1 #current day at the beginning of every column per respondent is 1
for(row in respondent_rows) { #looping over the rows associated with the current respondent
if(data$assessmentDay[row] == current_day) { #if the assessment day matches the current day
data[row, col[2]] <- prev_value #add the previous value as the value for the lagged column
prev_value <- data[row, col[1]] #update the previous value
} else { #if assessment day and current day do not match
data[row, col[2]] <- NA #then the lagged value should be NA (new day!)
current_day <- data$assessmentDay[row] #update the current day (could also just be +1)
prev_value <- data[row, col[1]] #update previous value
}
}
}
}
############################################ Change scores ####################################################
cols <- c('wakeful', 'sad', 'satisfied', 'irritated', 'energetic', 'restless', 'stressed', 'anxious',
'listless', 'worried', 'stickiness', 'thoughtsPleasant',  'thoughtsObject', 'distracted', 'restOfDayPos',
'companyPleasant', 'alonePleasant', 'posMax', 'posIntensity', 'negMax', 'negIntensity',
'sumPA', 'sumNA')
#creating a vector with new "lagged" column names
changeCols <- c()
for(col in cols) {
changeCols <- c(changeCols, paste(col, "change", sep = "_"))
}
#adding empty columns with "lagged" names
data[, changeCols] <- NA
#zipping current and lagged column names for the for loop
colZip <- mapply(c, cols, changeCols, SIMPLIFY = FALSE)
#for loop to add the lagged values to their corresponding new columns
for(id in subject_IDs){
respondent_rows <- which(data$subject == id) #one respondent at a time
for(col in colZip) { #looping over the zipped column name pairs
prev_value <- 0
change_score <- NA #previous value starts out as NA for every column
current_day <- 1 #current day at the beginning of every column per respondent is 1
for(row in respondent_rows) { #looping over the rows associated with the current respondent
if(data$assessmentDay[row] == current_day) { #if the assessment day matches the current day
change_score <- data[row, col[1]] - prev_value #calculate next change score
data[row, col[2]] <- change_score #add the change_score as the value for the lagged column
prev_value <- data[row, col[1]] #update the previous value
} else { #if assessment day and current day do not match
data[row, col[2]] <- NA #then the change score should be NA (new day!)
current_day <- data$assessmentDay[row] #update the current day (could also just be +1)
prev_value <- data[row, col[1]] #update previous value
}
}
}
}
# test <- subset(data, select = c(subject, phase, sad, sad_change, assessmentDay))
# View(test)
write.csv(data, "preprocessed_data.csv", row.names = FALSE)
#################################### Set up ####################################
rm(list = ls()) #clean all up
setwd("C:/Users/cleme/Documents/Education/RUG/Thesis/EMA-mindfulness/Data/ESM/mindcog_v202204")
#setwd("~/Documents/RUG/Thesis/EMA-mindfulness/Data/ESM/mindcog_v202204")
library(readxl)
library(tidyverse)
library(plyr)
library(dplyr)
library(Hmisc)
library(corrplot)
library(data.table)
library(ggplot2)
library(reshape)
library(ggpubr)
library(lubridate)
library(igraph)
library(qgraph)
library(gridExtra)
library(ggpubr)
#read in data
data <- read.csv('preprocessed_data.csv')
data$group <- factor(data$group, levels = c("controls", "remitted"))
data$intervention <- factor(data$intervention, levels = c("mindfulness", "fantasizing"))
data$phase <- factor(data$phase, levels = c("pre", "peri"))
################################# response-related measures #####################################
# #group by id and count the number on nonresponses
# participant_responses <- ddply(data, .(subject), plyr::summarise,
#                                numBeeped = length(mindcog_db_open_from),
#                                noResponse = length(unique(mindcog_db_non_response)),
#                                response = numBeeped - noResponse,
#                                responseRate = round(response/numBeeped,2))
#number of participants so far
length(unique(data$subject)) #38 associated with a group
#the mean response rate is ~66%
meanResponseRate <- mean(participant_responses$responseRate)
#sd of 20.28
sdResponseRate <- sd(participant_responses$responseRate)
View(subset(data[which(data$phaseAssessmentDay>7),],
select=c("group", "intervention", "id", "phase", "block",
"phaseAssessmentDay", "mindcog_db_open_from", "mindcog_db_non_response", "mindcog_db_date")))
#recreacting with assessment days per participant
participant_responses <- ddply(data, .(subject), plyr::summarise,
numCompleted = length(mindcog_db_open_from),
noResponse = length(unique(mindcog_db_non_response)),
response = numBeeped - noResponse,
responseRate = round(response/numBeeped,2),
numDays = max(assessmentDay))
responses_by_block <- ddply(data, .(group, intervention, phase, block, phaseAssessmentDay), plyr::summarise,
numCompleted = length(mindcog_db_open_from))
#recreacting with assessment days per group
group_responses <- ddply(data, .(group), plyr::summarise,
nSubj = length(unique(subject)),
numCompleted = length(mindcog_db_open_from),
noResponse = length(unique(mindcog_db_non_response)),
response = numBeeped - noResponse,
responseRate = round(response/numBeeped,2),
numDays = max(assessmentDay)) #6% higher response rate in controls
################################### Positive / Negative Affect ####################################
group_PANA <- ddply(data, .(group), plyr::summarize,
n_Subj = length(unique(subject)),
Pos = mean(sumPA, na.rm = TRUE),
sdPA = sd(sumPA, na.rm = TRUE),
Neg = mean(sumNA, na.rm = TRUE),
sdNA = sd(sumNA, na.rm = TRUE))
phase_PANA <- ddply(data, .(group, phase), plyr::summarize,
n_Subj = length(unique(subject)),
Pos = mean(sumPA, na.rm = TRUE),
sdPA = sd(sumPA, na.rm = TRUE),
Neg = mean(sumNA, na.rm = TRUE),
sdNA = sd(sumNA, na.rm = TRUE))
block_PANA <- ddply(data, .(group, block, intervention, phase), plyr::summarize,
n_Subj = length(unique(subject)),
Pos = mean(sumPA, na.rm = TRUE),
sdPA = sd(sumPA, na.rm = TRUE),
Neg = mean(sumNA, na.rm = TRUE),
sdNA = sd(sumNA, na.rm = TRUE))
#for some strange dplyr-ralted reason I need to do this to get melt() to work
data <- as.data.frame(data)
# check baseline assessment per group (Block 1, pre)
meltData1 <- melt(data[which((data$phase=="pre") & (data$block==1)), c("group", "sumPA", "sumNA")], na.rm = TRUE)
meltData2 <- melt(data[which((data$phase=="peri") & (data$block==1)), c("group", "sumPA", "sumNA")], na.rm = TRUE)
meltData3 <- melt(data[which((data$phase=="pre") & (data$block==2)), c("group", "sumPA", "sumNA")], na.rm = TRUE)
meltData4 <- melt(data[which((data$phase=="peri") & (data$block==2)), c("group", "sumPA", "sumNA")], na.rm = TRUE)
p1 <- ggplot(meltData1, aes(factor(variable), value, fill = group))
p1 <- p1 + geom_boxplot() + facet_wrap(~"block", scale="free") +
ggtitle("Block 1 - Pre") +
scale_fill_manual(values = c("green", "red")) +
theme(strip.text.x = element_text(margin = margin(2, 0, 2, 0)), legend.direction = "horizontal",
legend.position = c(1,1))
p2 <- ggplot(meltData2, aes(factor(variable), value, fill = group))
p2 <- p2 + geom_boxplot() + facet_wrap(~"block", scale="free") +
ggtitle("Block 1 - Peri") +
scale_fill_manual(values = c("green", "red")) +
theme(strip.text.x = element_text(margin = margin(2, 0, 2, 0)),
#strip.background = element_rect(fill = "lightblue"),
legend.position="None")
p3 <- ggplot(meltData3, aes(factor(variable), value, fill = group))
p3 <- p3 + geom_boxplot() + facet_wrap(~"block", scale="free") +
ggtitle("Block 2 - Pre") +
scale_fill_manual(values = c("green", "red")) +
theme(strip.text.x = element_text(margin = margin(2, 0, 2, 0)),
#strip.background = element_rect(fill = "lightblue"),
legend.position="None")
p4 <- ggplot(meltData4, aes(factor(variable), value, fill = group))
p4 <- p4 + geom_boxplot() + facet_wrap(~"block", scale="free") +
ggtitle("Block 2 - Peri") +
scale_fill_manual(values = c("green", "red")) +
theme(strip.text.x = element_text(margin = margin(2, 0, 2, 0)),
#strip.background = element_rect(fill = "lightblue"),
legend.position="None")
legend <- get_legend(p1)
p1 <- p1 + theme(legend.position="none")
grid.arrange(p1, p2, p3, p4, legend, ncol=2, nrow = 3)
#check per group, intervention and phase
meltData <- melt(data, id.vars=c("group", "intervention", "phase", "block"),
measure.vars = c("sumPA", "sumNA"), na.rm = TRUE)
meltData$groupByInt <- factor(paste(meltData$group, meltData$intervention),
levels = c("controls mindfulness", "controls fantasizing",
"remitted mindfulness", "remitted fantasizing"))
meltData$blockPhase <- factor(paste(meltData$phase, meltData$block, sep = " "),
levels = c("pre 1", "peri 1", "pre 2", "peri 2"))
ggplot(data = meltData, aes(variable, y = value, fill = factor(group))) +
geom_boxplot() + facet_grid(factor(intervention) ~ blockPhase, scale = "free") +
labs(title = "Levels of PA and NA",
subtitle = " by group, intervention, block and phase",
y = "Raw score", x = "") + scale_fill_manual(values = c("green", "red"))
#with change scores
# meltChange <- melt(data, id.vars=c("group", "intervention", "phase", "block"),
#                  measure.vars = c("sumPA_change", "sumNA_change"), na.rm = TRUE)
#
# meltChange$groupByInt <- factor(paste(meltChange$group, meltChange$intervention),
#                               levels = c("controls mindfulness", "controls fantasizing",
#                                          "remitted mindfulness", "remitted fantasizing"))
# meltChange$blockPhase <- factor(paste(meltChange$phase, meltChange$block, sep = " "),
#                               levels = c("pre 1", "peri 1", "pre 2", "peri 2"))
#
#
# ggplot(data = meltChange, aes(variable, y = value, fill = factor(group))) +
#   geom_boxplot() + facet_grid(factor(intervention) ~ blockPhase, scale = "free") +
#   labs(title = "Change Scores of PA and NA",
#        subtitle = " by group, intervention, block and phase",
#        y = "Raw score", x = "") + scale_fill_manual(values = c("green", "red"))
#Plotting changes against average baseline assessment values
#per phaseBeepNum
#create a df with only the relevant variables
meltChange <- melt(data[which(data$phase=="peri"),], id.vars=c("group", "intervention", "phase", "block", "phaseBeepNum"),
measure.vars = c("sumPA", "sumNA"), na.rm = TRUE)
#cacluate the average values per phaseBeepNum
meltChange_avg <- ddply(meltChange, .(group, intervention, phase, block, phaseBeepNum, variable), plyr::summarise,
n_values = length(group),
avgValue = mean(value))
#plot the average values of sumPA and sumNA (peri) against the average of the baseline assessment periods (pre)
for(b in 1:2){
for(g in c("controls", "remitted")){
for(intervention in c('mindfulness', 'fantasizing')){
for(v in c('sumPA', 'sumNA')){
if(v == 'sumPA'){
meanVal <- mean(data[which((data$phase=="pre") & (data$block==b) & (data$group==g) &
(data$intervention==intervention)),]$sumPA, na.rm=TRUE)
color <- "green"
lab_y <- "Avg change in PA"
main <- "Change in Positive Affect per individual assessment"
subtitle <- paste("(", g, ",", intervention, ",", "peri-intervention, block", b, ")")
}
if(v == 'sumNA'){
meanVal <- mean(data[which((data$phase=="pre") & (data$block==b) & (data$group==g) &
(data$intervention==intervention)),]$sumNA, na.rm=TRUE)
color <- "red"
lab_y <- "Avg change in NA"
main <- "Change in Negative Affect per individual assessment"
subtitle <- paste("(", g, ",", intervention, ",", "peri-intervention, block", b, ")")
}
px <- ggplot(data = meltChange_avg[which((meltChange_avg$group==g) &
(meltChange_avg$block==b) &
(meltChange_avg$variable==v) &
(meltChange_avg$intervention==intervention)),],
aes(x=phaseBeepNum, y=avgValue-meanVal)) +
geom_line(color = color) + geom_point() + scale_fill_manual(values=color) +
labs(title=main, subtitle=subtitle) + xlab('Phase Assessment Number') + ylab(lab_y)
print(px)
}
}
}
}
#per Assessment day
#create a df with only the relevant variables
meltChange <- melt(data[which(data$phase=="peri"),], id.vars=c("group", "intervention", "phase", "block", "phaseAssessmentDay"),
measure.vars = c("sumPA", "sumNA"), na.rm = TRUE)
#cacluate the average values per phaseBeepNum
meltChange_avg <- ddply(meltChange, .(group, intervention, phase, block, phaseAssessmentDay, variable), plyr::summarise,
n_values = length(group),
avgValue = mean(value))
#plot the average values of sumPA and sumNA (peri) against the average of the baseline assessment periods (pre)
for(b in 1:2){
for(g in c("controls", "remitted")){
for(intervention in c('mindfulness', 'fantasizing')){
for(v in c('sumPA', 'sumNA')){
if(v == 'sumPA'){
meanVal <- mean(data[which((data$phase=="pre") & (data$block==b) & (data$group==g) &
(data$intervention==intervention)),]$sumPA, na.rm=TRUE)
color <- "green"
lab_y <- "Avg change in PA"
main <- "Change in Positive Affect per Assessment Day"
subtitle <- paste("(", g, ",", intervention, ",", "peri-intervention, block", b, ")")
}
if(v == 'sumNA'){
meanVal <- mean(data[which((data$phase=="pre") & (data$block==b) & (data$group==g) &
(data$intervention==intervention)),]$sumNA, na.rm=TRUE)
color <- "red"
lab_y <- "Avg change in NA"
main <- "Change in Negative Affect per Assessment Day"
subtitle <- paste("(", g, ",", intervention, ",", "peri-intervention, block", b, ")")
}
px <- ggplot(data = meltChange_avg[which((meltChange_avg$group==g) &
(meltChange_avg$block==b) &
(meltChange_avg$variable==v) &
(meltChange_avg$intervention==intervention)),],
aes(x=phaseAssessmentDay, y=avgValue-meanVal)) +
geom_line(color = color) + geom_point() + scale_fill_manual(values=color) +
labs(title=main, subtitle=subtitle) + xlab('Phase Assessment Day') + ylab(lab_y)
print(px)
}
}
}
}
meltChange_avg <- ddply(meltChange, .(group, intervention, phase, phaseAssessmentDay, variable), plyr::summarise,
n_values = length(group),
avgValue = mean(value))
#combining both blocks
for(g in c("controls", "remitted")){
for(intervention in c('mindfulness', 'fantasizing')){
for(v in c('sumPA', 'sumNA')){
if(v == 'sumPA'){
meanVal <- mean(data[which((data$phase=="pre") & (data$group==g) &
(data$intervention==intervention)),]$sumPA, na.rm=TRUE)
color <- "green"
lab_y <- "Avg change in PA"
main <- "Change in Positive Affect per Assessment Day"
subtitle <- paste("(", g, ",", intervention, ",", "peri-intervention, both blocks)")
}
if(v == 'sumNA'){
meanVal <- mean(data[which((data$phase=="pre") & (data$group==g) &
(data$intervention==intervention)),]$sumNA, na.rm=TRUE)
color <- "red"
lab_y <- "Avg change in NA"
main <- "Change in Negative Affect per Assessment Day"
subtitle <- paste("(", g, ",", intervention, ",", "peri-intervention, both blocks)")
}
px <- ggplot(data = meltChange_avg[which((meltChange_avg$group==g) &
(meltChange_avg$variable==v) &
(meltChange_avg$intervention==intervention)),],
aes(x=phaseAssessmentDay, y=avgValue-meanVal)) +
geom_line(color = color) + geom_point() + scale_fill_manual(values=color) +
labs(title=main, subtitle=subtitle) + xlab('Phase Assessment Day') + ylab(lab_y)
print(px)
}
}
}

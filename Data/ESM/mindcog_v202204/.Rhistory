print('')
print('##########################################################')
print(paste(g, int, v, sep = " + "))
pre <- data[which((data$group==g) & (data$intervention==int) & (data$phase=="pre")),][[v]]
peri <- data[which((data$group==g) & (data$intervention==int) & (data$phase=="peri")),][[v]]
test <- t.test(peri, pre)
if(test$p.value<0.05){
print(test)
print(mean(peri))
print(mean(pre))
} else {
print("No significant difference")
}
}
}
}
for(g in groups){
for(int in interventions){
for(v in met.vars){
print('')
print('##########################################################')
print(paste(g, int, v, sep = " + "))
pre <- data[which((data$group==g) & (data$intervention==int) & (data$phase=="pre")),][[v]]
peri <- data[which((data$group==g) & (data$intervention==int) & (data$phase=="peri")),][[v]]
test <- t.test(peri, pre)
if(test$p.value<0.05){
print(test)
print(mean(peri, na.rm = TRUE))
print(mean(pre, na.rm = TRUE))
} else {
print("No significant difference")
}
}
}
}
for(g in groups){
for(int in interventions){
for(v in met.vars){
print('')
print('##########################################################')
print(paste(g, int, v, sep = " + "))
pre <- data[which((data$group==g) & (data$intervention==int) & (data$phase=="pre")),][[v]]
peri <- data[which((data$group==g) & (data$intervention==int) & (data$phase=="peri")),][[v]]
test <- t.test(pre, peri)
if(test$p.value<0.05){
print(test)
# print(mean(peri, na.rm = TRUE))
#print(mean(pre, na.rm = TRUE))
} else {
print("No significant difference")
}
}
}
}
##################################### Daily avg per individual ########################################
melt.dat <- melt(data, id.vars=c("subject", "group", "assessmentDay"),
measure.vars = c("ruminating", "sumPA", "sumNA"), na.rm = TRUE)
melt.dat <- aggregate(melt.dat$value, by=list(subject=melt.dat$subject, assessmentDay=melt.dat$assessmentDay,
group=melt.dat$group, variable=melt.dat$variable), FUN=mean)
ggplot(melt.dat[which((melt.dat$variable=="ruminating") & (melt.dat$assessmentDay<=7)),],
aes(x=assessmentDay, y=x, group=subject, color=group, fill = group)) + theme_bw() +
geom_line(alpha = 0.3) +#+ stat_summary(fun = mean, na.rm = TRUE, geom ='line', group="group", lwd = 1) +
stat_summary(fun = mean, na.rm = TRUE, geom = "point", lwd = 3, group = "") +
stat_summary(fun = mean, na.rm = TRUE, geom = "line", group = "group") + ylab("Rumination")
melt.dat <- melt(data, id.vars=c("subjB", "group", "intervention", "phase", "block", "phaseAssessmentDay"),
measure.vars = c("ruminating", "sumPA", "sumNA"), na.rm = TRUE)
melt.dat <- aggregate(melt.dat$value, by=list(subject=melt.dat$subjB, phaseAssessmentDay=melt.dat$phaseAssessmentDay,
group=melt.dat$group, intervention=melt.dat$intervention, block=melt.dat$block,
phase=melt.dat$phase, variable=melt.dat$variable), FUN=mean)
#same for baseline2 (pre2)
ggplot(melt.dat[which((melt.dat$variable=="ruminating") & (melt.dat$phase=="pre") & (melt.dat$block==2)),],
aes(x=phaseAssessmentDay, y=x, group=subject, color=group, fill = group)) + theme_bw() +
geom_line(alpha = 0.3) +#+ stat_summary(fun = mean, na.rm = TRUE, geom ='line', group="group", lwd = 1) +
stat_summary(fun = mean, na.rm = TRUE, geom = "point", lwd = 3, group = "") +
stat_summary(fun = mean, na.rm = TRUE, geom = "line", group = "group") + ylab("Rumination")
for(g in c("controls", "remitted")){
for(int in c("fantasizing", "mindfulness")){
dat <- data[which((data$group==g) & (data$intervention==int)),]
for(v in met.vars){
print('')
print('##########################################################')
print(paste(g, int, v, sep = " + "))
# one.way <- aov(dat[[v]] ~ phase, data = dat)
# anova <- TukeyHSD(one.way)
test <- var.test(dat[[v]] ~ phase, data = dat)
if(test$p.value<0.05){
print("pre")
print(var(dat[which(dat$phase=="pre"),][[v]], na.rm=TRUE))
print("peri")
print(var(dat[which(dat$phase=="peri"),][[v]], na.rm=TRUE))
print(test)
# print(anova)
# print(eta_squared(one.way))
} else {
print("No significant difference")
# print(anova)
}
}
}
}
rm(list = ls()) #clean all up
setwd("C:/Users/cleme/Documents/Education/RUG/Thesis/EMA-mindfulness/Data/ESM/mindcog_v202204")
#setwd("~/Documents/RUG/Thesis/EMA-mindfulness/Data/ESM/mindcog_v202204")
library(psychonetrics)
library(tidyverse)
library(plyr)
library(dplyr)
library(data.table)
library(ggplot2)
library(qgraph)          # Network estimation & inference       # Visualization
library(bootnet)         # Network stability        # Simplify R code
library(tidyr)           # Simplify R code
library(mgm)
library(mlVAR)
library(reshape)
library(viridis)
library(lm.beta)
#read in data
data <- read.csv('preprocessed_data.csv')
#same for sleepQuality
for(id in unique(data$subject)){
respondent_rows <- which(data$subject == id)
current_day <- 0
for(row in respondent_rows){
if((data$assessmentDay[row] != current_day) & (!is.na(data$sleepQuality[row]))){
sleep_quality <- data$sleepQuality[row]
current_day <- data$assessmentDay[row]
} else if((data$assessmentDay[row] == current_day) & (is.na(data$sleepQuality[row]))){
data$sleepQuality[row] <- sleep_quality
}
}
}
#same for sleepDuration
for(id in unique(data$subject)){
respondent_rows <- which(data$subject == id)
current_day <- 0
for(row in respondent_rows){
if((data$assessmentDay[row] != current_day) & (!is.na(data$sleepDuration[row]))){
sleep_duration <- data$sleepDuration[row]
current_day <- data$assessmentDay[row]
} else if((data$assessmentDay[row] == current_day) & (is.na(data$sleepDuration[row]))){
data$sleepDuration[row] <- sleep_duration
}
}
}
#aaaaaaand for sleepLatency
for(id in unique(data$subject)){
respondent_rows <- which(data$subject == id)
current_day <- 0
for(row in respondent_rows){
if((data$assessmentDay[row] != current_day) & (!is.na(data$sleepLatency[row]))){
sleep_latency <- data$sleepLatency[row]
current_day <- data$assessmentDay[row]
} else if((data$assessmentDay[row] == current_day) & (is.na(data$sleepLatency[row]))){
data$sleepLatency[row] <- sleep_latency
}
}
}
#aaaaaaand for restednessWakeup
for(id in unique(data$subject)){
respondent_rows <- which(data$subject == id)
current_day <- 0
for(row in respondent_rows){
if((data$assessmentDay[row] != current_day) & (!is.na(data$restednessWakeup[row]))){
restedness <- data$restednessWakeup[row]
current_day <- data$assessmentDay[row]
} else if((data$assessmentDay[row] == current_day) & (is.na(data$restednessWakeup[row]))){
data$restednessWakeup[row] <- restedness
}
}
}
responses_block <- ddply(data, .(subject), plyr::summarise,
numCompleted = length(mindcog_db_open_from),
noResponse = length(unique(mindcog_db_non_response)),
response = numCompleted - noResponse,
responseRate = round(response/numCompleted,2),
numDays = max(assessmentDay))
meanResponseRate_block <- mean(responses_block$responseRate) #the mean response rate is ~67.6%
length(unique(responses_block[which(responses_block$responseRate >= meanResponseRate_block),]$subject)) #20
length(unique(responses_block[which(responses_block$responseRate >= 0.6),]$subject)) #26
length(unique(responses_block[which(responses_block$responseRate >= 0.5),]$subject)) #33
#removing participants with a response rate lower than 60%
pp <- unique(responses_block[which(responses_block$responseRate >= 0.6),]$subject)
data <- data[which(data$subject %in% pp),]
node_cols <- c('ruminating', 'stickiness', 'wakeful', 'down', 'satisfied',
'irritated', 'energetic', 'restless', 'anxious', 'stressed', 'listless',
'thoughtsPleasant', 'distracted', 'restOfDayPos', 'posMax', 'posIntensity',
'negMax', 'negIntensity', "sleepQuality", "sleepLatency", "sleepDuration", "restednessWakeup",
"thoughtsTime", "thoughtsValence", "thoughtsObject", "aloneCompany", "companyPleasant",
"alonePleasant")
#"thinkingOf" removed --> not enought data for remitted-mindfulness-peri
types_list <- c("g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g",
"g", "g", "g", "g", "g", "g", "c", "c", "c", "c", "g", "g")
groups_list <- list(NegativeAffect = c(4,6,8,9), PositiveAffect = c(3,5,7),
Cognition = c(1,2,23,24,25), OtherNegative = c(10,11,13,17,18),
OtherPositive = c(12,14,15,16), Sleep = c(19,20,21,22), Social = c(26,27,28))
groups_colors <- c("#d60000", "#149F36", "#53B0CF", "#f66a6a", "#72CF53", "#0558ff", "#B94B7B")
levels_list <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 2, 1, 1)
data_copy <- data.table::copy(data)
data_copy <- data_copy[which(is.na(data_copy$mindcog_db_non_response)),]
data_copy <- data_copy[,node_cols]
# data_copy[which(is.na(data_copy$companyPleasant)),]$companyPleasant <- 0
# data_copy[which(is.na(data_copy$alonePleasant)),]$alonePleasant <- 0
data_copy <- data_copy[complete.cases(data_copy), ]
node_cols <- c('ruminating', 'stickiness', 'wakeful', 'down', 'satisfied',
'irritated', 'energetic', 'restless', 'anxious', 'stressed', 'listless',
'thoughtsPleasant', 'distracted', 'restOfDayPos', 'posMax', 'posIntensity',
'negMax', 'negIntensity', "sleepQuality", "sleepLatency", "sleepDuration", "restednessWakeup",
"thoughtsTime", "thoughtsValence", "thoughtsObject", "aloneCompany")
types_list <- c("g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g",
"g", "g", "g", "g", "g", "g", "c", "c", "c", "c")
groups_list <- list(NegativeAffect = c(4,6,8,9), PositiveAffect = c(3,5,7),
Cognition = c(1,2,23,24,25), OtherNegative = c(10,11,13,17,18),
OtherPositive = c(12,14,15,16), Sleep = c(19,20,21,22), Social = c(26))
groups_colors <- c("#d60000", "#149F36", "#53B0CF", "#f66a6a", "#72CF53", "#0558ff", "#B94B7B")
levels_list <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 2)
data_copy <- data.table::copy(data)
data_copy <- data_copy[which(is.na(data_copy$mindcog_db_non_response)),]
data_copy <- data_copy[,node_cols]
data_copy <- data_copy[complete.cases(data_copy), ]
nodeVars <- c('ruminating', 'wakeful', 'down', 'satisfied',
'irritated', 'energetic', 'restless', 'anxious', 'stressed', 'listless',
'thoughtsPleasant', 'distracted', 'restOfDayPos', 'posIntensity',
'negIntensity', "sleepQuality", "companyPleasant", "alonePleasant")
groups_list <- list(NegativeAffect = c(3,5,7,8), PositiveAffect = c(2,4,6),
Cognition = c(1), OtherNegative = c(9,10,12,15),
OtherPositive = c(11,13,14), Sleep=c(16), Social=c(17, 18))
groups_colors <- c("#d60000", "#149F36", "#53B0CF", "#f66a6a", "#72CF53", "#0558ff", "#B94B7B")
# Estimate network using multilevel VAR model
res <- mlVAR(data,
vars=nodeVars,
idvar="subject",
dayvar="assessmentDay",
beepvar="beepNum",
lags = 1,
temporal = "orthogonal",
contemporaneous = "orthogonal",
nCores = 8)
nodeVars <- c('ruminating', 'wakeful', 'down')#, 'satisfied',
# Estimate network using multilevel VAR model
res <- mlVAR(data,
vars=nodeVars,
idvar="subject",
dayvar="assessmentDay",
beepvar="beepNum",
lags = 1,
temporal = "orthogonal",
contemporaneous = "orthogonal",
nCores = 8)
# Get networks:
cont <- getNet(res, "contemporaneous", layout = "spring", nonsig = "hide", rule = "and")
bet  <- getNet(res, "between", nonsig = "hide", rule = "and")
temp <- getNet(res, "temporal", nonsig = "hide")
L <- averageLayout(cont, temp)
pdf(paste0(figs, "figure.pdf"), width=6, height=2.5)
layout(matrix(c(1,1,2,2,2), nc=5, byrow = TRUE)) # 40% vs 60% widths
n1 <- qgraph(cont, layout = L,
title="Contemporaneous network", theme='colorblind', negDashed=FALSE,
groups=groups_list, legend=FALSE, nodeNames = nodeVars, labels=c(1:16),
vsize=6, repulsion=1.1, esize=3)
n2 <- qgraph(temp, layout = L,
title="Temporal network", theme='colorblind', negDashed=FALSE, diag=FALSE,
groups=groups_list, legend.cex=0.5, legend=TRUE, nodeNames = nodeVars, labels=c(1:16),
vsize=6, asize=6, curve=0.75, curveAll=T, esize=3)
nodeVars <- c('ruminating', 'wakeful', 'down', 'satisfied',
'irritated', 'energetic', 'restless', 'anxious', 'stressed', 'listless',
'distracted', 'posIntensity', 'negIntensity', "sleepQuality", "companyPleasant",
"alonePleasant")
groups_list <- list(NegativeAffect = c(3,5,7,8), PositiveAffect = c(2,4,6),
Cognition = c(1), OtherNegative = c(9,10,12,15),
OtherPositive = c(14), Sleep=c(16), Social=c(17, 18))
groups_colors <- c("#d60000", "#149F36", "#53B0CF", "#f66a6a", "#72CF53", "#0558ff", "#B94B7B")
# Estimate network using multilevel VAR model
res <- mlVAR(data,
vars=nodeVars,
idvar="subject",
dayvar="assessmentDay",
beepvar="beepNum",
lags = 1,
temporal = "orthogonal",
contemporaneous = "orthogonal",
nCores = 8)
nodeVars <- c('ruminating', 'stickiness', 'wakeful', 'satisfied', 'energetic',
'down', 'irritated', 'restless', 'anxious',
'posIntensity',
'stressed', 'listless', 'distracted', 'negIntensity',
"sleepQuality", "companyPleasant")
groups_list <- list(Rumination = c(1, 2), PositiveAffect = c(3,4,5), NegativeAffect = c(6,7,8,9),
OtherPositive = c(10), OtherNegative = c(11,12,13,14),
Sleep=c(15), Social=c(16))
groups_colors <- c("#d60000", "#149F36", "#53B0CF", "#f66a6a", "#72CF53", "#0558ff", "#B94B7B")
# Estimate network using multilevel VAR model
res <- mlVAR(data,
vars=nodeVars,
idvar="subject",
dayvar="assessmentDay",
beepvar="beepNum",
lags = 1,
temporal = "orthogonal",
contemporaneous = "orthogonal",
nCores = 8)
# Get networks:
cont <- getNet(res, "contemporaneous", layout = "spring", nonsig = "hide", rule = "and")
bet  <- getNet(res, "between", nonsig = "hide", rule = "and")
temp <- getNet(res, "temporal", nonsig = "hide")
L <- averageLayout(cont, temp)
pdf(paste0(figs, "figure.pdf"), width=6, height=2.5)
layout(matrix(c(1,1,2,2,2), nc=5, byrow = TRUE)) # 40% vs 60% widths
n1 <- qgraph(cont, layout = L,
title="Contemporaneous network", theme='colorblind', negDashed=FALSE,
groups=groups_list, legend=FALSE, nodeNames = nodeVars, labels=c(1:16),
vsize=6, repulsion=1.1, esize=3)
n2 <- qgraph(temp, layout = L,
title="Temporal network", theme='colorblind', negDashed=FALSE, diag=FALSE,
groups=groups_list, legend.cex=0.5, legend=TRUE, nodeNames = nodeVars, labels=c(1:16),
vsize=6, asize=6, curve=0.75, curveAll=T, esize=3)
for(g in c("controls", "remitted")){
for(i in c("fantasizing", "mindfulness")){
for(p in c("pre", "peri")){
data_detrended_copy <- data.table::copy(data_detrended[which((data_detrended$group==g) &
(data_detrended$phase==p) &
(data_detrended$intervention==i)),])
data_detrended_copy <- data_detrended_copy[which(is.na(data_detrended_copy$mindcog_db_non_response)),]
#data_copy <- data_copy[complete.cases(data_copy), ]
res <- mlVAR(data_detrended_copy,
vars=nodeVars,
idvar="subject",
dayvar="assessmentDay",
beepvar="dayBeepNum",
lags = 1,
# temporal = "orthogonal",
# contemporaneous = "orthogonal",
nCores = 8)
cont <- getNet(res, "contemporaneous", layout = "spring", nonsig = "hide", rule = "and")
bet  <- getNet(res, "between", nonsig = "hide", rule = "and")
temp <- getNet(res, "temporal", nonsig = "hide")
L <- averageLayout(cont, temp)
pdf(paste0(figs, "figure.pdf"), width=6, height=2.5)
layout(matrix(c(1,1,2,2,2), nc=5, byrow = TRUE)) # 40% vs 60% widths
n1 <- qgraph(cont, layout = L,
title=paste("Contemporaneous network:",g,i,p, sep=" "), theme='colorblind', negDashed=FALSE,
groups=groups_list, legend=FALSE, nodeNames = nodeVars, labels=c(1:16),
vsize=6, repulsion=1.1, esize=3)
n2 <- qgraph(temp, layout = L,
title=paste("Temporal network:",g,i,p, sep=" "), theme='colorblind', negDashed=FALSE, diag=FALSE,
groups=groups_list, legend.cex=0.5, legend=TRUE, nodeNames = nodeVars, labels=c(1:16),
vsize=6, asize=6, curve=0.75, curveAll=T, esize=3)
}
}
}
for(g in c("controls", "remitted")){
for(i in c("fantasizing", "mindfulness")){
for(p in c("pre", "peri")){
# data_detrended_copy <- data.table::copy(data_detrended[which((data_detrended$group==g) &
#                                                                (data_detrended$phase==p) &
#                                                                (data_detrended$intervention==i)),])
# data_detrended_copy <- data_detrended_copy[which(is.na(data_detrended_copy$mindcog_db_non_response)),]
#data_copy <- data_copy[complete.cases(data_copy), ]
dat <- data.table::copy(data[which((data$group==g) &
(data$phase==p) &
(data$intervention==i)),])
dat <- dat[which(is.na(dat$mindcog_db_non_response)),]
res <- mlVAR(dat,
vars=nodeVars,
idvar="subject",
dayvar="assessmentDay",
beepvar="dayBeepNum",
lags = 1,
# temporal = "orthogonal",
# contemporaneous = "orthogonal",
nCores = 8)
cont <- getNet(res, "contemporaneous", layout = "spring", nonsig = "hide", rule = "and")
bet  <- getNet(res, "between", nonsig = "hide", rule = "and")
temp <- getNet(res, "temporal", nonsig = "hide")
L <- averageLayout(cont, temp)
pdf(paste0(figs, "figure.pdf"), width=6, height=2.5)
layout(matrix(c(1,1,2,2,2), nc=5, byrow = TRUE)) # 40% vs 60% widths
n1 <- qgraph(cont, layout = L,
title=paste("Contemporaneous network:",g,i,p, sep=" "), theme='colorblind', negDashed=FALSE,
groups=groups_list, legend=FALSE, nodeNames = nodeVars, labels=c(1:16),
vsize=6, repulsion=1.1, esize=3)
n2 <- qgraph(temp, layout = L,
title=paste("Temporal network:",g,i,p, sep=" "), theme='colorblind', negDashed=FALSE, diag=FALSE,
groups=groups_list, legend.cex=0.5, legend=TRUE, nodeNames = nodeVars, labels=c(1:16),
vsize=6, asize=6, curve=0.75, curveAll=T, esize=3)
}
}
}
gc()
rm(list = ls()) #clean all up
#read in data
data <- read.csv('preprocessed_data.csv')
#same for sleepQuality
for(id in unique(data$subject)){
respondent_rows <- which(data$subject == id)
current_day <- 0
for(row in respondent_rows){
if((data$assessmentDay[row] != current_day) & (!is.na(data$sleepQuality[row]))){
sleep_quality <- data$sleepQuality[row]
current_day <- data$assessmentDay[row]
} else if((data$assessmentDay[row] == current_day) & (is.na(data$sleepQuality[row]))){
data$sleepQuality[row] <- sleep_quality
}
}
}
#same for sleepDuration
for(id in unique(data$subject)){
respondent_rows <- which(data$subject == id)
current_day <- 0
for(row in respondent_rows){
if((data$assessmentDay[row] != current_day) & (!is.na(data$sleepDuration[row]))){
sleep_duration <- data$sleepDuration[row]
current_day <- data$assessmentDay[row]
} else if((data$assessmentDay[row] == current_day) & (is.na(data$sleepDuration[row]))){
data$sleepDuration[row] <- sleep_duration
}
}
}
#aaaaaaand for sleepLatency
for(id in unique(data$subject)){
respondent_rows <- which(data$subject == id)
current_day <- 0
for(row in respondent_rows){
if((data$assessmentDay[row] != current_day) & (!is.na(data$sleepLatency[row]))){
sleep_latency <- data$sleepLatency[row]
current_day <- data$assessmentDay[row]
} else if((data$assessmentDay[row] == current_day) & (is.na(data$sleepLatency[row]))){
data$sleepLatency[row] <- sleep_latency
}
}
}
#aaaaaaand for restednessWakeup
for(id in unique(data$subject)){
respondent_rows <- which(data$subject == id)
current_day <- 0
for(row in respondent_rows){
if((data$assessmentDay[row] != current_day) & (!is.na(data$restednessWakeup[row]))){
restedness <- data$restednessWakeup[row]
current_day <- data$assessmentDay[row]
} else if((data$assessmentDay[row] == current_day) & (is.na(data$restednessWakeup[row]))){
data$restednessWakeup[row] <- restedness
}
}
}
responses_block <- ddply(data, .(subject), plyr::summarise,
numCompleted = length(mindcog_db_open_from),
noResponse = length(unique(mindcog_db_non_response)),
response = numCompleted - noResponse,
responseRate = round(response/numCompleted,2),
numDays = max(assessmentDay))
meanResponseRate_block <- mean(responses_block$responseRate) #the mean response rate is ~67.6%
length(unique(responses_block[which(responses_block$responseRate >= meanResponseRate_block),]$subject)) #20
length(unique(responses_block[which(responses_block$responseRate >= 0.6),]$subject)) #26
length(unique(responses_block[which(responses_block$responseRate >= 0.5),]$subject)) #33
#removing participants with a response rate lower than 60%
pp <- unique(responses_block[which(responses_block$responseRate >= 0.6),]$subject)
data <- data[which(data$subject %in% pp),]
# Alpha to detrend:
alpha <- 0.05
nodeVars <- c('ruminating', 'wakeful', 'down', 'satisfied',
'irritated', 'energetic', 'restless', 'anxious', 'stressed',
'distracted', 'posIntensity',
'negIntensity')
nodeVars <- c('ruminating', 'stickiness', 'wakeful', 'satisfied', 'energetic',
'down', 'irritated', 'restless', 'anxious',
'posIntensity',
'stressed', 'listless', 'distracted', 'negIntensity',
"sleepQuality", "companyPleasant")
groups_list <- list(Rumination = c(1, 2), PositiveAffect = c(3,4,5), NegativeAffect = c(6,7,8,9),
OtherPositive = c(10), OtherNegative = c(11,12,13,14),
Sleep=c(15), Social=c(16))
groups_colors <- c("#d60000", "#149F36", "#53B0CF", "#f66a6a", "#72CF53", "#0558ff", "#B94B7B")
for(g in c("controls", "remitted")){
for(i in c("fantasizing", "mindfulness")){
for(p in c("pre", "peri")){
# data_detrended_copy <- data.table::copy(data_detrended[which((data_detrended$group==g) &
#                                                                (data_detrended$phase==p) &
#                                                                (data_detrended$intervention==i)),])
# data_detrended_copy <- data_detrended_copy[which(is.na(data_detrended_copy$mindcog_db_non_response)),]
#data_copy <- data_copy[complete.cases(data_copy), ]
dat <- data.table::copy(data[which((data$group==g) &
(data$phase==p) &
(data$intervention==i)),])
dat <- dat[which(is.na(dat$mindcog_db_non_response)),]
res <- mlVAR(dat,
vars=nodeVars,
idvar="subject",
dayvar="assessmentDay",
beepvar="dayBeepNum",
lags = 1,
# temporal = "orthogonal",
# contemporaneous = "orthogonal",
nCores = 8)
cont <- getNet(res, "contemporaneous", layout = "spring", nonsig = "hide", rule = "and")
bet  <- getNet(res, "between", nonsig = "hide", rule = "and")
temp <- getNet(res, "temporal", nonsig = "hide")
L <- averageLayout(cont, temp)
pdf(paste0(figs, "figure.pdf"), width=6, height=2.5)
layout(matrix(c(1,1,2,2,2), nc=5, byrow = TRUE)) # 40% vs 60% widths
qgraph(cont, layout = L,
title=paste("Contemporaneous network:",g,i,p, sep=" "), theme='colorblind', negDashed=FALSE,
groups=groups_list, legend=FALSE, nodeNames = nodeVars, labels=c(1:16),
vsize=6, repulsion=1.1, esize=3)
qgraph(temp, layout = L,
title=paste("Temporal network:",g,i,p, sep=" "), theme='colorblind', negDashed=FALSE, diag=FALSE,
groups=groups_list, legend.cex=0.5, legend=TRUE, nodeNames = nodeVars, labels=c(1:16),
vsize=6, asize=6, curve=0.75, curveAll=T, esize=3)
}
}
}

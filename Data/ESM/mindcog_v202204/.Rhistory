#add group
data$group <- NA
for(row in 1:nrow(data)) {
if(grepl("g1", data$id[row], fixed = TRUE)){
data$group[row] <- "controls"
}
if(grepl("g2", data$id[row], fixed = TRUE)){
data$group[row] <- "remitted"
}
}
#add new column "subject" -> extract all characters up until the first underscore in column "id"
data$subject <- str_extract(data$id, regex("^[^_]+(?=_)"))
#add phase
data$phase <- NA
for(row in 1:nrow(data)) {
if((grepl("m1", data$id[row], fixed = TRUE)) | (grepl("m3", data$id[row], fixed = TRUE))){
data$phase[row] <- "pre"
}
if((grepl("m2", data$id[row], fixed = TRUE)) | (grepl("m4", data$id[row], fixed = TRUE))){
data$phase[row] <- "peri"
}
}
#add block (1 = first intervention cycle, 2 = second intervention cycle)
data$block <- NA
for(row in 1:nrow(data)) {
if((grepl("m1", data$id[row], fixed = TRUE)) | (grepl("m2", data$id[row], fixed = TRUE))){
data$block[row] <- 1
} else {
data$block[row] <- 2
}
}
#Convert dates from characters to datetimes
data[['mindcog_db_open_from']] <- as.POSIXct(data[['mindcog_db_open_from']],
format = "%d-%m-%Y %H:%M:%S")
data[['mindcog_db_started_at']] <- as.POSIXct(data[['mindcog_db_started_at']],
format = "%d-%m-%Y %H:%M:%S")
data[['mindcog_db_completed_at']] <- as.POSIXct(data[['mindcog_db_completed_at']],
format = "%d-%m-%Y %H:%M:%S")
data[['mindcog_db_date']] <- format(as.POSIXct(data[['mindcog_db_date']],
format = "%d-%m-%Y %H:%M:%S"), format="%Y-%m-%d")
################################# What data are we missing? ###################################
missing_data <- ddply(data, .(patient_id, id, group, intervention), plyr::summarise,
numBeeped = length(mindcog_db_open_from),
responseRate = round((numBeeped - length(unique(mindcog_db_non_response)))/numBeeped,2))
na_data <- missing_data[(is.na(missing_data$patient_id)) |
is.na((missing_data$group)) |
is.na((missing_data$intervention)), ]
write.csv(na_data, file = "patientID_issues.csv")
#drop subjects without an assigned group
data <- drop_na(data, group)
data <- drop_na(data, patient_id)
#View(data[which(is.na(data$mindcog_db_date)),])
#View(data[which(is.na(data$phase)),])
############################# Handle issue with diverging dates ###########################
#fix problem with dates (whether entry belongs to pre- or peri-intervention phase)
# error_demo <- ddply(data[which(data$subject=="s3"),],
#                     .(subject, id, phase, block, mindcog_db_date, recordedStart, recordedEnd,
#                       baselineStart, baselineEnd, interventionStart, interventionEnd), plyr::summarise,
#                     nEntries <- length(subject))
#turning the recordedStart/-End, baselineStart/-End, ... into actual dates with corresponding year
for(row in 1:nrow(data)){ #first extract year from the mindcog_db_date column
y <- format(as.POSIXct(data$mindcog_db_open_from[row], format = "%Y-%m-%d %H:%M:%S"), format="%Y")
#if there is an entry for recordedStart and mindcog_db_date (i.e., if its not a non-response)
if((!is.na(data$recordedStart[row])) & (!is.na(data$mindcog_db_open_from[row]))){
#combine day-month from recordedStart (etc.) with extracted year and reformat to match other dates in df
data$recordedStart[row] <- format(as.POSIXct(paste(data$recordedStart[row], y, sep = "-"),
format = "%d-%m-%Y"), format = "%Y-%m-%d")
data$recordedEnd[row] <- format(as.POSIXct(paste(data$recordedEnd[row], y, sep = "-"),
format = "%d-%m-%Y"), format = "%Y-%m-%d")
}# repeat for other columns
if((!is.na(data$baselineStart[row])) & (!is.na(data$mindcog_db_open_from[row]))){
data$baselineStart[row] <- format(as.POSIXct(paste(data$baselineStart[row], y, sep = "-"),
format = "%d-%m-%Y"), format = "%Y-%m-%d")
data$baselineEnd[row] <- format(as.POSIXct(paste(data$baselineEnd[row], y, sep = "-"),
format = "%d-%m-%Y"), format = "%Y-%m-%d")
data$interventionStart[row] <- format(as.POSIXct(paste(data$interventionStart[row], y, sep = "-"),
format = "%d-%m-%Y"), format = "%Y-%m-%d")
data$interventionEnd[row] <- format(as.POSIXct(paste(data$interventionEnd[row], y, sep = "-"),
format = "%d-%m-%Y"), format = "%Y-%m-%d")
}
}
pre_to_peri <- c() #empty lists for row indices of faulty entries
peri_to_pre <- c()
i <- 1 #to add to the lists (in a computationally efficient way)
j <- 1
for(row in 1:nrow(data)){
#if there is a date in baselineStart (which means there is one in the other relevant columns too)
# and if it is not a non-response
if((!is.na(data$baselineStart[row])) & (!is.na(data$mindcog_db_open_from[row]))){
#if phase is "pre"
if((!is.na(data$phase[row])) & (data$phase[row] == "pre")){
#if the recorded mindcog date is greater than the end of baseline date
if((format(data$mindcog_db_open_from[row], format = "%Y-%m-%d") > data$baselineEnd[row])){
pre_to_peri[i] <- row #add row index to list
i <- i+1 #increment list index count
}
} #same for entries coded as peri that should be pre
if((!is.na(data$phase[row])) & (data$phase[row] == "peri")){
if((format(data$mindcog_db_open_from[row], format = "%Y-%m-%d") < data$interventionStart[row])){
peri_to_pre[j] <- row
j <- j+1
}
}
}
}
# View(data[pre_to_peri,])
# View(data[peri_to_pre,])
length(pre_to_peri)
length(peri_to_pre)
pre_to_peri_df <- (subset(data[pre_to_peri,], select=c("id", "mindcog_db_open_from", "phase", "baselineStart",
"baselineEnd", "interventionStart", "interventionEnd")))
peri_to_pre_df <- (subset(data[peri_to_pre,], select=c("id", "mindcog_db_open_from", "phase", "baselineStart",
"baselineEnd", "interventionStart", "interventionEnd")))
data[pre_to_peri,]$phase <- "peri"
for(row in pre_to_peri){
if((grepl("m1", data$id[row], fixed=TRUE))){
data$id[row] <- sub("m1", "\\m2", data$id[row])
}
if((grepl("m3", data$id[row], fixed=TRUE))){
data$id[row] <- sub("m3", "\\m4", data$id[row])
}
}
data[peri_to_pre,]$phase <- "pre"
for(row in peri_to_pre){
if((grepl("m2", data$id[row], fixed=TRUE))){
data$id[row] <- sub("m2", "\\m1", data$id[row])
}
if((grepl("m4", data$id[row], fixed=TRUE))){
data$id[row] <- sub("m4", "\\m3", data$id[row])
}
}
######################################## Changing ESM item names ##############################
#Get numbers of ESM item columns
item1 <- which( colnames(data)=="mindcog_db_1" ) #this is the first column that interests us
item33 <- which( colnames(data)=="mindcog_db_33" )#last item of interest
colNamesOld <- setNames(data.frame(colnames(data[, item1:item33])), "columns")
colNamesNew <- c('firstEntry', 'sleepQuality', 'toBedHour', 'toBedMinute', 'trySleepHour', 'trySleepMinute',
'sleepLatency', 'wakeupHour', 'wakeupMinute', 'restednessWakeup', 'wakeful',
'down', 'satisfied', 'irritated', 'energetic', 'restless', 'stressed', 'anxious',
'listless', 'thinkingOf', 'ruminating', 'stickiness', 'thoughtsPleasant',
'thoughtsTime', 'thoughtsValence', 'thoughtsObject', 'distracted',
'restOfDayPos', 'aloneCompany', 'companyPleasant', 'alonePleasant', 'posMax',
'posIntensity', 'negMax', 'negIntensity', 'comments')
setnames(data, old = colNamesOld$columns, new = colNamesNew)
View(data)
unique(data$trySleepHour)
unique(data$toBedHour)
data$wakeupHour
unique(data$toBedHour)
colnames(data)
##################################### Daily avg per individual ########################################
melt.dat <- melt(data, id.vars=c("subject", "group", "assessmentDay"),
measure.vars = c("ruminating", "sumPA", "sumNA"), na.rm = TRUE)
#################################### Set up ####################################
rm(list = ls()) #clean all up
setwd("C:/Users/cleme/Documents/Education/RUG/Thesis/EMA-mindfulness/Data/ESM/mindcog_v202204")
#setwd("~/Documents/RUG/Thesis/EMA-mindfulness/Data/ESM/mindcog_v202204")
library(readxl)
library(tidyverse)
library(plyr)
library(dplyr)
library(Hmisc)
library(corrplot)
library(data.table)
library(ggplot2)
library(reshape)
library(ggpubr)
library(lubridate)
library(igraph)
library(qgraph)
library(gridExtra)
library(ggpubr)
library(RColorBrewer)
library(broom)
library(effectsize)
library(languageR)
#read in data
data <- read.csv('preprocessed_data.csv')
data$group <- factor(data$group, levels = c("controls", "remitted"))
data$intervention <- factor(data$intervention, levels = c("mindfulness", "fantasizing"))
data$phase <- factor(data$phase, levels = c("pre", "peri"))
################################# response-related measures #####################################
# #group by id and count the number of nonresponses
participant_responses <- ddply(data, .(subject), plyr::summarise,
numCompleted = length(mindcog_db_open_from),
noResponse = length(unique(mindcog_db_non_response)),
response = numCompleted - noResponse,
responseRate = round(response/numCompleted,2),
numDays = max(assessmentDay))
#number of participants so far
length(unique(data$subject)) #39 associated with a group
#the mean response rate is ~67%
meanResponseRate <- mean(participant_responses$responseRate)
#sd of 18.63
sdResponseRate <- sd(participant_responses$responseRate)
# View(subset(data[which(data$phaseAssessmentDay>7),],
#             select=c("group", "intervention", "id", "phase", "block",
#                      "phaseAssessmentDay", "mindcog_db_open_from", "mindcog_db_non_response", "mindcog_db_date")))
#numDays = max(phaseAssessmentDay))
group_responses <- ddply(data, .(group), plyr::summarise,
nSubj = length(unique(subject)),
numCompleted = length(mindcog_db_open_from),
noResponse = length(unique(mindcog_db_non_response)),
response = numCompleted - noResponse,
responseRate = round(response/numCompleted,2))
#recreacting with assessment days per group
intervention_responses <- ddply(data, .(group, intervention), plyr::summarise,
nSubj = length(unique(subject)),
numCompleted = length(mindcog_db_open_from),
noResponse = length(unique(mindcog_db_non_response)),
response = numCompleted - noResponse,
responseRate = round(response/numCompleted,2))
responses_by_phase <- ddply(data, .(group, intervention, phase), plyr::summarise,
numCompleted = length(mindcog_db_open_from),
noResponse = length(unique(mindcog_db_non_response)),
response = numCompleted - noResponse,
responseRate = round(response/numCompleted,2))
##################################### Daily avg per individual ########################################
melt.dat <- melt(data, id.vars=c("subject", "group", "assessmentDay"),
measure.vars = c("ruminating", "sumPA", "sumNA"), na.rm = TRUE)
View(melt.dat)
?melt
melt.dat <- aggregate(melt.dat$value, by=list(melt.dat$subject, melt.dat$assessmentDay, melted$variable), FUN=mean)
melt.dat <- aggregate(melt.dat$value, by=list(melt.dat$subject, melt.dat$assessmentDay, melt.dat$variable), FUN=mean)
View(melt.dat)
melt.dat <- aggregate(melt.dat$value, by=list(subject=melt.dat$subject, assessmentDay=melt.dat$assessmentDay,
group=melt.dat$group, variable=melt.dat$variable), FUN=mean)
##################################### Daily avg per individual ########################################
melt.dat <- melt(data, id.vars=c("subject", "group", "assessmentDay"),
measure.vars = c("ruminating", "sumPA", "sumNA"), na.rm = TRUE)
melt.dat <- aggregate(melt.dat$value, by=list(subject=melt.dat$subject, assessmentDay=melt.dat$assessmentDay,
group=melt.dat$group, variable=melt.dat$variable), FUN=mean)
View(melt.dat)
ggplot(melt.dat, aes(x=assessmentDay, y=x, color=group)) +
geom_line()
ggplot(melt.dat, aes(x=factor(assessmentDay), y=x, color=group)) +
geom_line()
ggplot(melt.dat, aes(x=assessmentDay, y=x, color=group)) +
geom_line()
ggplot(melt.dat, aes(x=assessmentDay, y=x, color=group)) +
geom_line() + geom_point()
ggplot(melt.dat[which(melt.dat$variable=="ruminating"),], aes(x=assessmentDay, y=x, color=group)) +
geom_line() + geom_point()
ggplot(melt.dat[which(melt.dat$variable=="ruminating"),], aes(x=assessmentDay, y=x)) +
geom_line() + geom_point()
ggplot(melt.dat[which(melt.dat$variable=="ruminating"),], aes(x=assessmentDay, y=x, group=subject, color=group)) +
geom_line() + geom_point()
ggplot(melt.dat[which(melt.dat$variable=="ruminating"),], aes(x=assessmentDay, y=x, group=subject, color=group)) +
geom_line() + geom_point() + geom_vline(x=14)
ggplot(melt.dat[which(melt.dat$variable=="ruminating"),], aes(x=assessmentDay, y=x, group=subject, color=group)) +
geom_line() + geom_point() + geom_vline(aes(x=14))
ggplot(melt.dat[which(melt.dat$variable=="ruminating"),], aes(x=assessmentDay, y=x, group=subject, color=group)) +
geom_line() + geom_point() + geom_vline(v=14)
?geom_vline
ggplot(melt.dat[which(melt.dat$variable=="ruminating"),], aes(x=assessmentDay, y=x, group=subject, color=group)) +
geom_line() + geom_point() + geom_vline(14)
ggplot(melt.dat[which(melt.dat$variable=="ruminating"),], aes(x=assessmentDay, y=x, group=subject, color=group)) +
geom_line() + geom_point() + geom_vline(xintercept=14)
ggplot(melt.dat[which(melt.dat$variable=="ruminating"),], aes(x=assessmentDay, y=x, group=subject, color=subject)) +
geom_line() + geom_point() + geom_vline(xintercept=14)
ggplot(melt.dat[which((melt.dat$variable=="ruminating") & (melt.dat$assessmentDay<=7)),], aes(x=assessmentDay, y=x, group=subject, color=subject)) +
geom_line() + geom_point() + geom_vline(xintercept=14)
ggplot(melt.dat[which((melt.dat$variable=="ruminating") & (melt.dat$assessmentDay<=7)),], aes(x=1:7, y=x, group=subject, color=subject)) +
geom_line() + geom_point() + geom_vline(xintercept=14)
ggplot(melt.dat[which((melt.dat$variable=="ruminating") & (melt.dat$assessmentDay<=7)),], aes(y=x, group=subject, color=subject)) +
geom_line() + geom_point() #+ geom_vline(xintercept=14)
ggplot(melt.dat[which((melt.dat$variable=="ruminating") & (melt.dat$assessmentDay<=7)),], aes(x=assessmentDay, y=x, group=subject, color=subject)) +
geom_line() + geom_point() #+ geom_vline(xintercept=14)
ggplot(melt.dat[which((melt.dat$variable=="ruminating") & (melt.dat$assessmentDay<=7)),],
aes(x=assessmentDay, y=x, group=subject, color=group)) +
geom_line() + geom_point() #+ geom_vline(xintercept=14)
#################################### Set up ####################################
rm(list = ls()) #clean all up
setwd("C:/Users/cleme/Documents/Education/RUG/Thesis/EMA-mindfulness/Data/ESM/mindcog_v202204")
library(readxl)
library(tidyverse)
library(plyr)
library(dplyr)
library(Hmisc)
library(corrplot)
library(data.table)
library(ggplot2)
library(reshape)
library(ggpubr)
library(lubridate)
library(igraph)
library(qgraph)
#read in data
data <- read.csv('mindcog_db_2022-05-19.csv', sep = ";")
################################# load Medoq info and clean up #################################################
#get sheet names
#sheetnames <- excel_sheets('Medoq_informatie_2.xlsx')
mylist <- lapply(excel_sheets('Medoq_informatie_2.xlsx'), read_excel, path = 'Medoq_informatie_2.xlsx')
# name the dataframes
names(mylist) <- c("matchingMindfulness", "matchingFantasizing")
# Bring the dataframes to the global environment
list2env(mylist ,.GlobalEnv)
matchingMindfulness$intervention <- "mindfulness" #add intervention type per sheet
matchingFantasizing$intervention <- "fantasizing"
matchingData <- rbind(matchingMindfulness, matchingFantasizing) #bind into one df
#changing column names since spaces lead to weird errors
colnames(matchingData)[c(1,2,4,5,6)] <- c("id", "recordedDates", "meeting_id", "DatesBaseline", "DatesIntervention")
#turn all ids to lower case for easier error handling below
matchingData$id <- tolower(matchingData$id)
#fix various errors in id column
for(row in 1:nrow(matchingData)) { #some "s" are missing
if( ! (grepl("s", matchingData$id[row], fixed=TRUE)) & (!(is.na(matchingData$id[row])))){
matchingData$id[row] <- paste("s", matchingData$id[row], sep = "")
}
if( ! (grepl("_g", matchingData$id[row], fixed=TRUE))){ #some "_" prior to "g" are missing
matchingData$id[row] <- sub("g", "\\1_g", matchingData$id[row])
}
if( ! (grepl("_m", matchingData$id[row], fixed = TRUE))){ #some "_" prior to "m" are missing
matchingData$id[row] <- sub("m", "\\1_m", matchingData$id[row])
}
if( (grepl("meting", matchingData$id[row], fixed = TRUE))){#some had "meting" instead of just "m"
matchingData$id[row] <- sub("meting", "\\1m", matchingData$id[row])
}
}
#there are some duplicate entries that would cause issues later on
n_occur <- data.frame(table(matchingData$id))
#n_occur[n_occur$Freq > 1,]
duplicate_entries <- subset(matchingData[matchingData$id %in% n_occur$Var1[n_occur$Freq > 1],],
select = c(id, recordedDates, DatesBaseline, DatesIntervention))
#extract start and end dates from "Datum baseline" and "Datum interventie" columns
for(row in 1:nrow(matchingData)) { #change all "t/m" to "tm"
if( ! (grepl("tm", matchingData$DatesBaseline[row], fixed=TRUE))){
matchingData$DatesBaseline[row] <- sub("t/m", "\\tm", matchingData$DatesBaseline[row])
}
if( ! (grepl("tm", matchingData$DatesIntervention[row], fixed=TRUE))){
matchingData$DatesIntervention[row] <- sub("t/m", "\\tm", matchingData$DatesIntervention[row])
}
if( ! (grepl("tm", matchingData$recordedDates[row], fixed=TRUE))){
matchingData$recordedDates[row] <- sub("t/m", "\\tm", matchingData$recordedDates[row])
}
}
matchingData$baselineStart <- NA
matchingData$baselineEnd <- NA
matchingData$interventionStart <- NA
matchingData$interventionEnd <- NA
matchingData$recordedStart <- NA
matchingData$recordedEnd <- NA
for(row in 1:nrow(matchingData)){
if(! is.na(matchingData$DatesBaseline[row])){
matchingData$baselineStart[row] <- sub("\\ tm.*", "", matchingData$DatesBaseline[row]) #extract start date
matchingData$baselineEnd[row] <- sub(".* tm", "", matchingData$DatesBaseline[row]) #extract end date
#same for intervention dates
matchingData$interventionStart[row] <- sub("\\ tm.*", "", matchingData$DatesIntervention[row])
matchingData$interventionEnd[row] <- sub(".* tm", "", matchingData$DatesIntervention[row])
}
if(! is.na(matchingData$recordedDates[row])){
matchingData$recordedStart[row] <- sub("\\ tm.*", "", matchingData$recordedDates[row])
matchingData$recordedEnd[row] <- sub(".* tm", "", matchingData$recordedDates[row])
}
}
#s3_g1_m3 and s3_g1_m4 have duplicate entries in MatchingData (once without corrected dates) --> remove wrong one
#View(matchingData[which((matchingData$id=="s3_g1_m3") | (matchingData$id=="s3_g1_m4") ),])
matchingData <- matchingData[!(matchingData$id == "s3_g1_m3" & is.na(matchingData$recordedDates)),]
matchingData <- matchingData[!(matchingData$id == "s3_g1_m4" & is.na(matchingData$recordedDates)),]
##################################### combine data ####################################
#performing a "vlookup" of the md... numbers and adding corresponding columns
#from matchingData to data
data$id <- NA
data$intervention <- NA
data$baselineStart <- NA
data$baselineEnd <- NA
data$interventionStart <- NA
data$interventionEnd <- NA
data$recordedStart <- NA
data$recordedEnd <- NA
for(i in 1:nrow(data)){
for(j in 1:nrow(matchingData)){
if(data$patient_id[i] == matchingData$meeting_id[j]){
data$id[i] <- matchingData$id[j]
#data$recordedDates[i] <- matchingData$recordedDates[j]
data$intervention[i] <- matchingData$intervention[j]
#if(is.na(data$mindcog_db_non_response[i])){
data$baselineStart[i] = matchingData$baselineStart[j]
data$baselineEnd[i] = matchingData$baselineEnd[j]
data$interventionStart[i] <- matchingData$interventionStart[j]
data$interventionEnd[i] <- matchingData$interventionEnd[j]
data$recordedStart[i] <- matchingData$recordedStart[j]
data$recordedEnd[i] <- matchingData$recordedEnd[j]
#}
}
}
}
# View(subset(data, id=="s156_g2_m1" | id=="s156_g2_m2"))
# unique(subset(data, id=="s156_g2_m1" | id=="s156_g2_m2")$patient_id)
#################################### add variables  ####################################
#add group
data$group <- NA
for(row in 1:nrow(data)) {
if(grepl("g1", data$id[row], fixed = TRUE)){
data$group[row] <- "controls"
}
if(grepl("g2", data$id[row], fixed = TRUE)){
data$group[row] <- "remitted"
}
}
#add new column "subject" -> extract all characters up until the first underscore in column "id"
data$subject <- str_extract(data$id, regex("^[^_]+(?=_)"))
#add phase
data$phase <- NA
for(row in 1:nrow(data)) {
if((grepl("m1", data$id[row], fixed = TRUE)) | (grepl("m3", data$id[row], fixed = TRUE))){
data$phase[row] <- "pre"
}
if((grepl("m2", data$id[row], fixed = TRUE)) | (grepl("m4", data$id[row], fixed = TRUE))){
data$phase[row] <- "peri"
}
}
#read in data
data <- read.csv('mindcog_db_2022-05-19.csv', sep = ";")
################################# load Medoq info and clean up #################################################
#get sheet names
#sheetnames <- excel_sheets('Medoq_informatie_2.xlsx')
mylist <- lapply(excel_sheets('Medoq_informatie_2.xlsx'), read_excel, path = 'Medoq_informatie_2.xlsx')
# name the dataframes
names(mylist) <- c("matchingMindfulness", "matchingFantasizing")
# Bring the dataframes to the global environment
list2env(mylist ,.GlobalEnv)
#################################### Set up ####################################
rm(list = ls()) #clean all up
setwd("C:/Users/cleme/Documents/Education/RUG/Thesis/EMA-mindfulness/Data/ESM/mindcog_v202204")
library(readxl)
library(tidyverse)
library(plyr)
library(dplyr)
library(Hmisc)
library(corrplot)
library(data.table)
library(ggplot2)
library(reshape)
library(ggpubr)
library(lubridate)
library(igraph)
library(qgraph)
#read in data
data <- read.csv('mindcog_db_2022-05-19.csv', sep = ";")
################################# load Medoq info and clean up #################################################
#get sheet names
#sheetnames <- excel_sheets('Medoq_informatie_2.xlsx')
mylist <- lapply(excel_sheets('Medoq_informatie_2.xlsx'), read_excel, path = 'Medoq_informatie_2.xlsx')
# name the dataframes
names(mylist) <- c("matchingMindfulness", "matchingFantasizing")
# Bring the dataframes to the global environment
list2env(mylist ,.GlobalEnv)
View(mylist)
View(matchingFantasizing)
View(matchingMindfulness)
View(matchingMindfulness)
View(matchingFantasizing)
# name the dataframes
names(mylist) <- c("matchingFantasizing", "matchingMindfulness")
# Bring the dataframes to the global environment
list2env(mylist ,.GlobalEnv)
source('C:/Users/cleme/Documents/Education/RUG/Thesis/EMA-mindfulness/Data/preprocessing_ESM_v2.R', echo=TRUE)
View(data)
source('C:/Users/cleme/Documents/Education/RUG/Thesis/EMA-mindfulness/Data/descriptive_v2.R', echo=TRUE)
#Chi-squared tests
#group difference?
chisq.test(group_responses[,c("noResponse", "response")]) #significant difference
met.vars <- c('ruminating', 'stickiness', 'sumNA',  'down', 'irritated', 'restless', 'anxious',
'sumPA', 'wakeful', 'satisfied', 'energetic',
'stressed', 'listless',  'distracted',
'thoughtsPleasant', 'restOfDayPos',
'posMax', 'posIntensity', 'negMax', 'negIntensity',
"sleepQuality", "sleepLatency", "sleepDuration", "restednessWakeup")
cat.vars <- c( "thinkingOf", "thoughtsTime", "thoughtsValence", "thoughtsObject", "aloneCompany")
for(g in groups){
for(int in interventions){
for(v in met.vars){
print('')
print('##########################################################')
print(paste(g, int, v, sep = " + "))
pre <- data[which((data$group==g) & (data$intervention==int) & (data$phase=="pre")),][[v]]
peri <- data[which((data$group==g) & (data$intervention==int) & (data$phase=="peri")),][[v]]
test <- t.test(peri, pre)
if(test$p.value<0.05){
print(test)
} else {
print("No significant difference")
}
}
}
}
for(g in c("controls", "remitted")){
for(int in c("fantasizing", "mindfulness")){
dat <- data[which((data$group==g) & (data$intervention==int)),]
for(v in met.vars){
print('')
print('##########################################################')
print(paste(g, int, v, sep = " + "))
# one.way <- aov(dat[[v]] ~ phase, data = dat)
# anova <- TukeyHSD(one.way)
test <- var.test(dat[[v]] ~ phase, data = dat)
if(test$p.value<0.05){
print("pre")
print(var(dat[which(dat$phase=="pre"),][[v]], na.rm=TRUE))
print("peri")
print(var(dat[which(dat$phase=="peri"),][[v]], na.rm=TRUE))
print(test)
# print(anova)
# print(eta_squared(one.way))
} else {
print("No significant difference")
# print(anova)
}
}
}
}

contSum <- 0
tempSum <- 0
for(cl in clust){
contSum <- contSum + sum(real.cont[cl, clust[which(clust %nin% cl)]])
tempSum <- tempSum + sum(real.temp[cl, clust[which(clust %nin% cl)]])
}
localStrengths[[l]][[g]]$Contemporaneous[[1]] <- contSum
localStrengths[[l]][[g]]$Temporal[[1]] <- tempSum
testSummary[[g]]$Contemporaneous$LocalStrenghts[[l]] <- contSum
testSummary[[g]]$Temporal$LocalStrenghts[[l]] <- tempSum
}
}
}
}
#permutation test statistics
s_ids <- unique(real.dat[[idvar]])
print("Number of subjects:")
print(length(s_ids))
for(i in (prev_iter+1):(prev_iter+perms)){
print(paste("Permutation", i-1, sep = " "))
if(permuteSet == "network"){
#create permuted data set (shuffled node labels per subject)
perm.dat <- data.frame(matrix(ncol = length(c(idvar, dayvar, beepvar, nodeVars))))
colnames(perm.dat) <- c(idvar, dayvar, beepvar, nodeVars)
for(s in s_ids){
#subset for only one subject
s_df <- real.dat[which(real.dat[[idvar]]==s),]
#shuffle node lables for subject
perm.vars <- sample(nodeVars)
colnames(s_df)[(n_idVars + 1) : (n_nodeVars + n_idVars)] <- perm.vars
#add to permutation data set
perm.dat <- rbind(perm.dat, s_df)
pg.dat <- copy(perm.dat)
}
} else {
perm.dat <- data.frame(matrix(ncol = length(c(idvar, dayvar, beepvar, permuteBy, nodeVars))))
colnames(perm.dat) <- c(idvar, dayvar, beepvar, permuteBy, nodeVars)
for(s in s_ids){
# print(s)
#subset for only one subject
s_df <- data[which(data[[idvar]]==s),c(idvar, dayvar, beepvar, permuteBy, nodeVars)]
#shuffle node lables for subject
perm.group <- sample(permuteSet, 1)
s_df[[permuteBy]] <- perm.group
#add to permutation data set
perm.dat <- rbind(perm.dat, s_df)
}
#each group needs to have at least two subjects for mlVAR to run
n_g1 <- length(unique(perm.dat[which(perm.dat[[permuteBy]]==permuteSet[1]),][[idvar]]))
n_g2 <- length(unique(perm.dat[which(perm.dat[[permuteBy]]==permuteSet[2]),][[idvar]]))
print(n_g1)
print(n_g2)
if(n_g1 < 2){
print("Too few g1 samples")
if(n_g1 == 0){
n <- 2
} else if(n_g1 == 1){
n <- 1
}
rand.subj <- sample(perm.dat[which(perm.dat[[permuteBy]]==permuteSet[2]),][[idvar]], n)
perm.dat[which(perm.dat[[idvar]] %in% rand.subj),][[permuteBy]] <- permuteSet[1]
}
if(n_g2 < 2){
print("Too few g2 samples")
if(n_g2 == 0){
n <- 2
} else if(n_g2 == 1){
n <- 1
}
rand.subj <- sample(perm.dat[which(perm.dat[[permuteBy]]==permuteSet[1]),][[idvar]], n)
perm.dat[which(perm.dat[[idvar]] %in% rand.subj),][[permuteBy]] <- permuteSet[2]
}
s <- perm.dat[which(perm.dat[[permuteBy]]==permuteSet[1]),][[idvar]]
#in case only one group was assigned to all subjects
sampled.groups <- unique(perm.dat[[permuteBy]])
sampled.groups <- sampled.groups[!is.na(sampled.groups)]
# print("This is the sampled group:")
# print(sampled.groups)
# print(length(sampled.groups))
if(length(sampled.groups) < 2){ #to ensure we end up with two groups
print("Fixing issue")
y <- permuteSet[which(permuteSet != sampled.groups)]
print(y)
random.subj <- sample(s_ids, 1)
print(random.subj)
perm.dat[which(perm.dat[[idvar]] == random.subj),][[permuteBy]] <- y
print(unique(perm.dat[[permuteBy]]))
}
}
permuteSet <- permuteSet[!is.na(permuteSet)]
for(g in permuteSet){
print(g)
if(permuteSet[1] != "network"){
pg.dat <- perm.dat[which(perm.dat[[permuteBy]]==g),c(idvar, permuteBy, dayvar, beepvar, permuteBy, nodeVars)]
pg.dat[[idvar]] <- as.factor(pg.dat[[idvar]])
# print(unique(pg.dat[[idvar]]))
# print(levels(pg.dat[[idvar]]))
}
#fit permutated network
perm.net <- mlVAR(pg.dat,
vars=nodeVars,
estimator="lmer",
idvar=idvar,
dayvar=dayvar,
beepvar=beepvar,
lags = 1,
temporal = "orthogonal",
contemporaneous = "orthogonal",
nCores = nCores)
# print("Net created")
#  # Get mlVAR networks:
perm.cont <- getNet(perm.net, "contemporaneous", layout = "spring", nonsig = "hide", rule = "and")
perm.temp <- getNet(perm.net, "temporal", nonsig = "hide")
# print("Nets extracted")
edgeWeights[[g]]$Contemporaneous[[i]] <- perm.cont
edgeWeights[[g]]$Temporal[[i]] <- perm.temp
# print("Edge weights added")
#global strength
perm.gs.cont <- sum(abs(perm.cont[which(upper.tri(perm.cont))]))
perm.gs.temp <- sum(abs(perm.temp[which(upper.tri(perm.temp))]))
globalStrengths[[g]]$Contemporaneous[[i]] <- perm.gs.cont
globalStrengths[[g]]$Temporal[[i]] <- perm.gs.temp
# print("Global Strength added")
#get permuted centrality measures
perm.cont.cents <- centralityTable(perm.cont, weighted = TRUE, labels = nodeVars, standardized = FALSE)
perm.temp.cents <- centralityTable(perm.temp, weighted = TRUE, labels = nodeVars, standardized = FALSE)
# print("centrality tables created")
#add permuted centralities
for(n in nodeVars){
# print(n)
for(m in measures.cont){
# print(m)
val <- extract_cent(perm.cont.cents, n, m)
testStats[[g]]$Centrality[[n]][i,m] <- val
}
for(m in measures.temp){
# print(m)
val <- extract_cent(perm.temp.cents, n, m)
testStats[[g]]$Centrality[[n]][i,m] <- val
}
}
# print("Centrality added to testStats")
testStats[[g]]$EdgeWeights <- list(Temporal = edgeWeights[[g]]$Temporal,
Contemporaneous = edgeWeights[[g]]$Contemporaneous)
testStats[[g]]$GlobalStrength <- list(Temporal = globalStrengths[[g]]$Temporal,
Contemporaneous = globalStrengths[[g]]$Contemporaneous)
# print("EdgeWeigthts added to testStats")
#local strengths
if(length(localClustStrength)>0){
for(l in 1:n_local){
clust <- localClustStrength[[l]]
contSum <- 0
tempSum <- 0
for(cl in clust){
contSum <- contSum + sum(perm.cont[cl, clust[which(clust %nin% cl)]])
tempSum <- tempSum + sum(perm.temp[cl, clust[which(clust %nin% cl)]])
}
localStrengths[[l]][[g]]$Contemporaneous[[i]] <- contSum
localStrengths[[l]][[g]]$Temporal[[i]] <- tempSum
testStats[[g]]$LocalStrengths[[l]] <- list(Temporal = localStrengths[[l]][[g]]$Temporal,
Contemporaneous = localStrengths[[l]][[g]]$Contemporaneous)
}
}
}
# print(testStats$controls$GlobalStrength)
}
# print('TestStats (controls - ruminating):')
# print(testStats$controls$Centrality$ruminating)
if(permuteSet[1] != "network"){
print("Calculating difference scores")
diff.df <- data.frame(matrix(ncol = length(measures), nrow = (prev_iter + perms)))
colnames(diff.df) <- measures
testStats$difference <- list()
p_valBase <- "difference"
for(n in nodeVars){
testStats$difference$Centrality[[n]] <- diff.df
# print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
# print(paste("Iteration", i, sep = " "))
for(i in 1:(prev_iter+perms)){
# print(n)
# print(testStats$difference[[n]])
# print('----------------------------------------------------------------------------')
# print(testStats[[permuteSet[2]]]$Centrality[[n]][i,])
# print(testStats[[permuteSet[1]]]$Centrality[[n]][i,])
testStats$difference$Centrality[[n]][i,] <- testStats[[permuteSet[2]]]$Centrality[[n]][i,] - testStats[[permuteSet[1]]]$Centrality[[n]][i,]
# print(testStats$difference[[n]][i,])
}
# print('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
# print(testStats$difference)
}
# print("Centralities added")
for(i in 1:(prev_iter+perms)){
edgeWeights$difference$Contemporaneous[[i]] <- edgeWeights[[permuteSet[2]]]$Contemporaneous[[i]] -
edgeWeights[[permuteSet[1]]]$Contemporaneous[[i]]
edgeWeights$difference$Temporal[[i]] <- edgeWeights[[permuteSet[2]]]$Temporal[[i]] -
edgeWeights[[permuteSet[1]]]$Temporal[[i]]
globalStrengths$difference$Contemporaneous[[i]] <- globalStrengths[[permuteSet[2]]]$Contemporaneous[[i]] -
globalStrengths[[permuteSet[1]]]$Contemporaneous[[i]]
globalStrengths$difference$Temporal[[i]] <- globalStrengths[[permuteSet[2]]]$Temporal[[i]] -
globalStrengths[[permuteSet[1]]]$Temporal[[i]]
#local strengths
if(length(localClustStrength)>0){
for(l in 1:n_local){
localStrengths[[l]]$difference$Contemporaneous[[i]] <- localStrengths[[l]][[permuteSet[2]]]$Contemporaneous[[i]] -
localStrengths[[l]][[permuteSet[1]]]$Contemporaneous[[i]]
localStrengths[[l]]$difference$Temporal[[i]] <- localStrengths[[l]][[permuteSet[2]]]$Temporal[[i]] -
localStrengths[[l]][[permuteSet[1]]]$Temporal[[i]]
}
}
}
# print(edgeWeights)
# print(globalStrengths)
} else { p_valBase <- "network"}
testStats[[p_valBase]]$EdgeWeights <- list(Temporal = edgeWeights[[p_valBase]]$Temporal,
Contemporaneous = edgeWeights[[p_valBase]]$Contemporaneous)
testStats[[p_valBase]]$GlobalStrength <- list(Temporal = globalStrengths[[p_valBase]]$Temporal,
Contemporaneous = globalStrengths[[p_valBase]]$Contemporaneous)
#local strengths
if(length(localClustStrength)>0){
for(l in 1:n_local){
testStats[[p_valBase]]$LocalStrengths[[l]] <- list(Temporal = localStrengths[[l]][[p_valBase]]$Temporal,
Contemporaneous = localStrengths[[l]][[p_valBase]]$Contemporaneous)
}
}
#dataframe to store centrality measure p-vals
c.cent.df <- data.frame(matrix(ncol = length(measures.cont), nrow = length(nodeVars)))
colnames(c.cent.df) <- measures.cont
rownames(c.cent.df) <- nodeVars
t.cent.df <- data.frame(matrix(ncol = length(measures.temp), nrow = length(nodeVars)))
colnames(t.cent.df) <- measures.temp
rownames(t.cent.df) <- nodeVars
#dataframe for edge weight p-vals for contemporaneous and temporal
c.ew.df <- data.frame(matrix(ncol = length(nodeVars), nrow = length(nodeVars)))
colnames(c.ew.df) <- nodeVars
rownames(c.ew.df) <- nodeVars
t.ew.df <- data.frame(matrix(ncol = length(nodeVars), nrow = length(nodeVars)))
colnames(t.ew.df) <- nodeVars
rownames(t.ew.df) <- nodeVars
excluded.edges <- c(rep(NA, length(nodeVars)))
#print(testStats)
# print(p_valBase)
for(n in nodeVars){
# print(paste("++++++++++++++++++", n, "++++++++++++++++++", sep = " "))
# print(testStats[[p_valBase]]$Centrality[[n]])
for(m in measures.cont){
# print(paste("###", m, "###", sep = " "))
# print(testStats[[p_valBase]]$Centrality[[n]][m])
# pval <- mean(abs((testStats[[p_valBase]]$Centrality[[n]][m])) >= (abs(testStats[[p_valBase]]$Centrality[[n]][1,m])))
if(testStats[[p_valBase]]$Centrality[[n]][1,m] > 0){
pval <- mean((testStats[[p_valBase]]$Centrality[[n]][m]) >= (testStats[[p_valBase]]$Centrality[[n]][1,m]))
} else if(testStats[[p_valBase]]$Centrality[[n]][1,m] < 0){
pval <- mean((testStats[[p_valBase]]$Centrality[[n]][m]) <= (testStats[[p_valBase]]$Centrality[[n]][1,m]))
} else {
pval <- 1
}
c.cent.df[n,m] <- pval
# print(pval)
}
# print("Cont. cent pvals calculated")
for(m in measures.temp){
# pval <- mean(abs((testStats[[p_valBase]]$Centrality[[n]][m])) >= (abs(testStats[[p_valBase]]$Centrality[[n]][1,m])))
# print(paste("###", m, "###", sep = " "))
# print(testStats$Centrality[[n]][m])
if(testStats[[p_valBase]]$Centrality[[n]][1,m] > 0){
pval <- mean((testStats[[p_valBase]]$Centrality[[n]][m]) >= (testStats[[p_valBase]]$Centrality[[n]][1,m]))
} else if(testStats[[p_valBase]]$Centrality[[n]][1,m] < 0){
pval <- mean((testStats[[p_valBase]]$Centrality[[n]][m]) <= (testStats[[p_valBase]]$Centrality[[n]][1,m]))
} else {
pval <- 1
}
t.cent.df[n,m] <- pval
# print(pval)
}
}
# print("Temp cent pvals calculated")
# print(edgeWeights[[p_valBase]]$Contemporaneous)
j <- 1
for(n in nodeVars){
#now we add the current node to the excluded edges because in contemporaneous nets we do not have self-loops
excluded.edges[j] <- n
cont.weights <- c(rep(NA, prev_iter + perms))
cont.edges <- nodeVars[nodeVars %nin% excluded.edges]
j <- j + 1
for(e in cont.edges){
# print("++++++++++++++++++ Contemporaneous ++++++++++++++++++")
# print(paste(n, "--", e, sep = " "))
# print("+++++++++++++++++++++++++++++++++++++++++++++++++++++")
for(i in 1:(prev_iter + perms)){
cont.weights[i] <- edgeWeights[[p_valBase]]$Contemporaneous[[i]][n,e]
}
# pval <- mean(abs((cont.weights)) >= (abs(cont.weights[1])))
if(cont.weights[1] > 0){
pval <- mean((cont.weights) >= (cont.weights[1]))
} else if(cont.weights[1] < 0){
pval <- mean((cont.weights) <= (cont.weights[1]))
} else {
pval <- 1
}
# print(pval)
c.ew.df[n,e] <- pval
}
#in temporal networks we have directed edges
temp.weights <- c(rep(NA, prev_iter + perms))
temp.edges <- nodeVars
for(e in temp.edges){
# print("++++++++++++++++++ Temporal ++++++++++++++++++")
# print(paste(n, "-->", e, sep = " "))
# print("+++++++++++++++++++++++++++++++++++++++++++++++++++++")
for(i in 1:(prev_iter + perms)){
temp.weights[i] <- edgeWeights[[p_valBase]]$Temporal[[i]][n,e]
}
# pval <- mean(abs((temp.weights)) >= (abs(temp.weights[1])))
if(temp.weights[1] > 0){
pval <- mean((temp.weights) >= (temp.weights[1]))
} else if(temp.weights[1] < 0){
pval <- mean((temp.weights) <= (temp.weights[1]))
} else {
pval <- 1
}
# print(pval)
t.ew.df[n,e] <- pval
}
}
# print("Ew pvalues added")
gs.cont.vec <- c(rep(NA, prev_iter + perms))
gs.temp.vec <- c(rep(NA, prev_iter + perms))
for(i in 1:(prev_iter + perms)){
gs.cont.vec[i] <- globalStrengths[[p_valBase]]$Contemporaneous[[i]]
gs.temp.vec[i] <- globalStrengths[[p_valBase]]$Temporal[[i]]
}
gs.cont.pval <- mean((abs(gs.cont.vec)) >= ((abs(gs.cont.vec[1]))))
gs.temp.pval <- mean((abs(gs.temp.vec)) >= ((abs(gs.temp.vec[1]))))
#local strengths
if(length(localClustStrength)>0){
ls.cont.vec <- list()
ls.temp.vec <- list()
for(l in 1:n_local){
ls.cont.vec[[l]] <- c(rep(NA, prev_iter + perms))
ls.temp.vec[[l]] <- c(rep(NA, prev_iter + perms))
for(i in 1:(prev_iter + perms)){
ls.cont.vec[[l]][[i]] <- localStrengths[[l]][[p_valBase]]$Contemporaneous[[i]]
ls.temp.vec[[l]][[i]] <- localStrengths[[l]][[p_valBase]]$Temporal[[i]]
}
ls.cont.pval <- mean((abs(ls.cont.vec[[l]])) >= ((abs(ls.cont.vec[[l]][[1]]))))
ls.temp.pval <- mean((abs(ls.temp.vec[[l]])) >= ((abs(ls.temp.vec[[l]][[1]]))))
testSummary$p_values$Contemporaneous$LocalStrengths[[l]] <- ls.cont.pval
testSummary$p_values$Temporal$LocalStrengths[[l]] <- ls.temp.pval
}
}
# print("Global Strength pvalues added")
testSummary$p_values$Contemporaneous$Centrality <- c.cent.df
testSummary$p_values$Temporal$Centrality <- t.cent.df
testSummary$p_values$Contemporaneous$EdgeWeights <- c.ew.df
testSummary$p_values$Temporal$EdgeWeights <- t.ew.df
testSummary$p_values$Contemporaneous$GlobalStrength <- gs.cont.pval
testSummary$p_values$Temporal$GlobalStrength <- gs.temp.pval
# testStats[[p_valBase]]$EdgeWeights <- list(Temporal = edgeWeights[[p_valBase]]$Temporal,
#                                    Contemporaneous = edgeWeights[[p_valBase]]$Contemporaneous)
# testStats[[p_valBase]]$GlobalStrength <- list(Temporal = globalStrengths[[p_valBase]]$Temporal,
#                                       Contemporaneous = globalStrengths[[p_valBase]]$Contemporaneous)
testSummary$testStats <- testStats
permutationResults <- copy(testSummary)
save(permutationResults, file = filepath)
end.time <- Sys.time()
time.taken <- end.time - start.time
print(paste("Time elapsed:", round(time.taken, 2), sep = " "))
return(permutationResults)
}
colnames(data_t)[colnames(data_t) == 'sumNA'] <- 'NegativeAffect'
colnames(data_t)[colnames(data_t) == 'sumPA'] <- 'PositiveAffect'
colnames(data_t)[colnames(data_t) == 'negMax'] <- 'EventUnpleasantness'
colnames(data_t)[colnames(data_t) == 'posMax'] <- 'EventPleasantness'
alternativeNodes <- c('ruminating',
'PositiveAffect',
'NegativeAffect',
'EventUnpleasantness',
'distracted')
#grouping the variables --> for later use in network plotting
alt_list <- list(Rumination = c(1), Affect = c(2,3), Other = c(4,5))
alt_colors <- c("#d60000", "#149F36", "#53B0CF", "#72CF53")
#compare remitted fantasizing pre / peri
dat <- data_t[which((data_t$group=="remitted") & (data_t$intervention=="fantasizing")),]
compare_rem_fant_pre_peri_alt2 <- NPT(dat, nodes = alternativeNodes, iterations = 100, permuteBy = "phase", idvar = "subjP",
filepath = "network_permutations/compare_rem_fant_pre_peri_alt2.rda")
compare_rem_fant_pre_peri_final <- NPT(dat, nodes = alternativeNodes, iterations = 100, permuteBy = "phase", idvar = "subjP",
filepath = "network_permutations/compare_rem_fant_pre_peri_final.rda")
#compare remitted fantasizing pre / peri
dat <- data_t[which((data_t$group=="remitted") & (data_t$intervention=="fantasizing")),]
compare_rem_fant_pre_peri_final <- NPT(dat, nodes = alternativeNodes, iterations = 100, permuteBy = "phase", idvar = "subjP",
filepath = "network_permutations/compare_rem_fant_pre_peri_final.rda")
#compare remitted mindfulness pre / peri
dat <- data_t[which((data_t$group=="remitted") & (data_t$intervention=="mindfulness")),]
compare_rem_mind_pre_peri_final <- NPT(dat, nodes = alternativeNodes, iterations = 100, permuteBy = "phase", idvar = "subjP",
filepath = "network_permutations/compare_rem_mind_pre_peri_final.rda")
#compare remitted fantasizing pre / peri
dat <- data_t[which((data_t$group=="remitted") & (data_t$intervention=="fantasizing")),]
compare_rem_fant_pre_peri_final <- NPT(dat, nodes = alternativeNodes, iterations = 100, permuteBy = "phase", idvar = "subjP",
filepath = "network_permutations/compare_rem_fant_pre_peri_final.rda")
#compare remitted mindfulness pre / peri
dat <- data_t[which((data_t$group=="remitted") & (data_t$intervention=="mindfulness")),]
compare_rem_mind_pre_peri_final <- NPT(dat, nodes = alternativeNodes, iterations = 100, permuteBy = "phase", idvar = "subjP",
filepath = "network_permutations/compare_rem_mind_pre_peri_final.rda")
# baseline networks
cont_pre_test <- NPT(sc_data[which((sc_data$group == "controls") & (sc_data$phase == "pre")),], nodes = reducedNodes,
iterations = 1, filepath = "network_permutations/cont_pre_test.rda",
localClustStrength = list(c("energetic", "wakeful", "satisfied"), c("down", "irritated", "anxious", "restless")))
reducedNodes <- c('ruminating', #'stickiness',
'energetic', 'wakeful', 'satisfied',
'down', 'irritated', 'anxious', 'restless',
'EventUnpleasantness', 'EventPleasantness',
'distracted')
#grouping the variables --> for later use in network plotting
reduced_list <- list(Rumination = c(1), PositiveAffect = c(2,3,4), NegativeAffect = c(5,6,7,8), Events=c(9,10), Other=c(11))
#Events = c(10,11))
# Sleep=c(15))
reduced_colors <- c("#d60000", "#149F36", "#53B0CF", "#72CF53", "#0558ff" )
# baseline networks
cont_pre_test <- NPT(sc_data[which((sc_data$group == "controls") & (sc_data$phase == "pre")),], nodes = reducedNodes,
iterations = 1, filepath = "network_permutations/cont_pre_test.rda",
localClustStrength = list(c("energetic", "wakeful", "satisfied"), c("down", "irritated", "anxious", "restless")))
colnames(data_t)[colnames(data_t) == 'sumNA'] <- 'NegativeAffect'
colnames(data_t)[colnames(data_t) == 'sumPA'] <- 'PositiveAffect'
colnames(data_t)[colnames(data_t) == 'negMax'] <- 'EventUnpleasantness'
colnames(data_t)[colnames(data_t) == 'posMax'] <- 'EventPleasantness'
# baseline networks
cont_pre_test <- NPT(sc_data[which((sc_data$group == "controls") & (sc_data$phase == "pre")),], nodes = reducedNodes,
iterations = 1, filepath = "network_permutations/cont_pre_test.rda",
localClustStrength = list(c("energetic", "wakeful", "satisfied"), c("down", "irritated", "anxious", "restless")))
colnames(sc_data)[colnames(sc_data) == 'sumNA'] <- 'NegativeAffect'
colnames(sc_data)[colnames(sc_data) == 'sumPA'] <- 'PositiveAffect'
colnames(sc_data)[colnames(sc_data) == 'negMax'] <- 'EventUnpleasantness'
colnames(sc_data)[colnames(sc_data) == 'posMax'] <- 'EventPleasantness'
# baseline networks
cont_pre_test <- NPT(sc_data[which((sc_data$group == "controls") & (sc_data$phase == "pre")),], nodes = reducedNodes,
iterations = 1, filepath = "network_permutations/cont_pre_test.rda",
localClustStrength = list(c("energetic", "wakeful", "satisfied"), c("down", "irritated", "anxious", "restless")))
net1 <- cont_pre_test$network$Temporal$EdgeWeights
net2 <- cont_pre_test$network$Contemporaneous$EdgeWeights
layout(matrix(c(1,1,2,2,2), nc=5, byrow = TRUE)) # 40% vs 60% widths
#plot contemporaneous networks
L <- averageLayout(net1, net2)
n1 <- qgraph(net1, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=alt_list, legend=FALSE, nodeNames = alternativeNodes, labels=c(1:length(alternativeNodes)),
vsize=10, asize=8, curve=0.5, esize=3)
n2 <- qgraph(net2, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=alt_list, legend=T, nodeNames = alternativeNodes, labels=c(1:length(alternativeNodes)),
vsize=10, asize=8, curve=0.5, esize=3)
n1 <- qgraph(net1, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=reduced_list, legend=FALSE, nodeNames = reducedNodes, labels=c(1:length(reducedNodes)),
vsize=10, asize=8, curve=0.5, esize=3)
n2 <- qgraph(net2, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=reduced_list, legend=T, nodeNames = reducedNodes, labels=c(1:length(reducedNodes)),
vsize=10, asize=8, curve=0.5, esize=3)
rem_pre_test <- NPT(data_t[which((data_t$group == "remitted") & (data_t$phase == "pre")),], nodes = reducedNodes,
iterations = 1, filepath = "network_permutations/rem_pre_test.rda",
localClustStrength = list(c("energetic", "wakeful", "satisfied"), c("down", "irritated", "anxious", "restless")))
net1 <- cont_pre_test$network$Temporal$EdgeWeights
net2 <- rem_pre_test$network$Temporal$EdgeWeights
layout(matrix(c(1,1,2,2,2), nc=5, byrow = TRUE)) # 40% vs 60% widths
#plot contemporaneous networks
L <- averageLayout(net1, net2)
n1 <- qgraph(net1, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=reduced_list, legend=FALSE, nodeNames = reducedNodes, labels=c(1:length(reducedNodes)),
vsize=10, asize=8, curve=0.5, esize=3)
n2 <- qgraph(net2, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=reduced_list, legend=T, nodeNames = reducedNodes, labels=c(1:length(reducedNodes)),
vsize=10, asize=8, curve=0.5, esize=3)
net1 <- cont_pre_test$network$Contemporaneous$EdgeWeights
net2 <- rem_pre_test$network$Contemporaneous$EdgeWeights
layout(matrix(c(1,1,2,2,2), nc=5, byrow = TRUE)) # 40% vs 60% widths
#plot contemporaneous networks
L <- averageLayout(net1, net2)
n1 <- qgraph(net1, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=reduced_list, legend=FALSE, nodeNames = reducedNodes, labels=c(1:length(reducedNodes)),
vsize=10, asize=8, curve=0.5, esize=3)
n2 <- qgraph(net2, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=reduced_list, legend=T, nodeNames = reducedNodes, labels=c(1:length(reducedNodes)),
vsize=10, asize=8, curve=0.5, esize=3)
#remitted fantasizing pre / peri
rem_pre_fant_final <- NPT(sc_data[which((sc_data$group == "remitted") & (sc_data$phase == "pre") & (sc_data$intervention == "fantasizing")),],
nodes = alternativeNodes, iterations = 300, filepath = "network_permutations/rem_pre_fant_test.rda")
#remitted fantasizing pre / peri
rem_pre_fant_final <- NPT(sc_data[which((sc_data$group == "remitted") & (sc_data$phase == "pre") & (sc_data$intervention == "fantasizing")),],
nodes = alternativeNodes, iterations = 300, filepath = "network_permutations/rem_pre_fant_final.rda")
rem_peri_fant_final <- NPT(data_t[which((data_t$group == "remitted") & (data_t$phase == "peri") & (data_t$intervention == "fantasizing")),],
nodes = alternativeNodes, iterations = 300, filepath = "network_permutations/rem_peri_fant_final.rda")
#remitted mindfulness pre / peri
rem_pre_mind_final <- NPT(data_t[which((data_t$group == "remitted") & (data_t$phase == "pre") & (data_t$intervention == "mindfulness")),],
nodes = alternativeNodes, iterations = 300, filepath = "network_permutations/rem_pre_mind_final.rda")
rem_peri_mind_final <- NPT(data_t[which((data_t$group == "remitted") & (data_t$phase == "peri") & (data_t$intervention == "mindfulness")),],
nodes = alternativeNodes, iterations = 300, filepath = "network_permutations/rem_peri_mind_final.rda")
#compare remitted fantasizing pre / peri
dat <- data_t[which((data_t$group=="remitted") & (data_t$intervention=="fantasizing")),]
compare_rem_fant_pre_peri_final <- NPT(dat, nodes = alternativeNodes, iterations = 100, permuteBy = "phase", idvar = "subjP",
filepath = "network_permutations/compare_rem_fant_pre_peri_final.rda")
#compare remitted mindfulness pre / peri
dat <- data_t[which((data_t$group=="remitted") & (data_t$intervention=="mindfulness")),]
compare_rem_mind_pre_peri_final <- NPT(dat, nodes = alternativeNodes, iterations = 100, permuteBy = "phase", idvar = "subjP",
filepath = "network_permutations/compare_rem_mind_pre_peri_final.rda")
#compare groups at baseline
dat <- data_t[which((data_t$phase=="pre")),]
compare_group_pre_final <- NPT(dat, nodes = reducedNodes, iterations = 200, permuteBy = "group",
filepath = "network_permutations/compare_group_pre_final.rda",
localClustStrength = list(c("energetic", "wakeful", "satisfied"), c("down", "irritated", "anxious", "restless")))

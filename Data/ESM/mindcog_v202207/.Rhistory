n2 <- qgraph(net, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=groups_list, legend.cex=1, legend=T, nodeNames = nodeVars, labels=c(1:length(nodeVars)),
vsize=6, asize=3, curve=0.5, esize=3, color = groups_colors)
netAll <- cont_pre_final
sum((netAll$p_values$Temporal$EdgeWeights < 0.025), na.rm = T)
sum((netAll$p_values$Temporal$EdgeWeights != 1), na.rm = T)
net <- cont_pre_final[["network"]][["Temporal"]][["EdgeWeights"]]
n2 <- qgraph(net, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=groups_list, legend.cex=1, legend=T, nodeNames = nodeVars, labels=c(1:length(nodeVars)),
vsize=6, asize=3, curve=0.5, esize=3, color = groups_colors)
net_pvals <- netAll[["p_values"]][["Temporal"]][["EdgeWeights"]]
# net <- copy(netAll)
net[which(net_pvals > 0.025)] <- 0
n2 <- qgraph(net, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=groups_list, legend.cex=1, legend=T, nodeNames = nodeVars, labels=c(1:length(nodeVars)),
vsize=6, asize=3, curve=0.5, esize=3, color = groups_colors)
View(compare_groups_final[["p_values"]][["Temporal"]][["Centrality"]])
View(compare_groups_final[["p_values"]][["Temporal"]][["EdgeWeights"]])
View(compare_groups_final[["p_values"]][["Temporal"]][["Centrality"]])
View(rem_pre_final[["network"]][["Temporal"]][["Centrality"]])
View(rem_pre_final[["network"]][["Temporal"]][["Centrality"]])
View(cont_pre_final)
View(cont_pre_final[["network"]][["Temporal"]][["Centrality"]])
mean(data_t[which((data_t$group == "remitted") & (data_t$phase == "pre")),]$satisfied)
data_t[which((data_t$group == "remitted") & (data_t$phase == "pre")),]$satisfied
View(data_t)
ou
mean(data[which((data$group == "remitted") & (data$phase == "pre")),]$satisfied)
mean(data[which((data$group == "remitted") & (data$phase == "pre")),]$satisfied, na.rm = T)
mean(data[which((data$group == "controsl") & (data$phase == "pre")),]$satisfied, na.rm = T)
mean(data[which((data$group == "controls") & (data$phase == "pre")),]$satisfied, na.rm = T)
var(data[which((data$group == "remitted") & (data$phase == "pre")),]$satisfied, na.rm = T)
var(data[which((data$group == "controls") & (data$phase == "pre")),]$satisfied, na.rm = T)
sd(data[which((data$group == "remitted") & (data$phase == "pre")),]$satisfied, na.rm = T)
sd(data[which((data$group == "controls") & (data$phase == "pre")),]$satisfied, na.rm = T)
var.test(data[which((data$group == "remitted") & (data$phase == "pre")),]$satisfied, data[which((data$group == "controls") & (data$phase == "pre")),]$satisfied)
t.test(data[which((data$group == "remitted") & (data$phase == "pre")),]$satisfied, data[which((data$group == "controls") & (data$phase == "pre")),]$satisfied)
for(v in met.vars){
print('')
print('##########################################################')
print(v)
preCon <- subset(data[which((data$group=="controls") & (data$block==1) & (data$phase=="pre")),], select = c("subject", v))
colnames(preCon) <-  c("subject", "variable")
preRem <- subset(data[which((data$group=="remitted") & (data$block==1) & (data$phase=="pre")),], select = c("subject", v))
colnames(preRem) <-  c("subject", "variable")
meansCon <- ddply(preCon, .(subject), plyr::summarise,
controls = mean(variable, na.rm=T))
meansRem <- ddply(preRem, .(subject), plyr::summarise,
remitted = mean(variable, na.rm=T))
# pre <- data[which((data$group==g) & (data$intervention==int) & (data$phase=="pre")),][[v]]
# peri <- data[which((data$group==g) & (data$intervention==int) & (data$phase=="peri")),][[v]]
test <- t.test(meansCon$controls, meansRem$remitted)
print(test)
if(test$p.value>0.05){
print("No significant difference")
# print(mean(peri, na.rm = TRUE))
#print(mean(pre, na.rm = TRUE))
}
}
for(g in c("controls", "remitted")){
for(int in c("fantasizing", "mindfulness")){
dat <- data[which((data$group==g) & (data$intervention==int)),]
for(v in met.vars){
print('')
print('##########################################################')
print(paste(g, int, v, sep = " + "))
# one.way <- aov(dat[[v]] ~ phase, data = dat)
# anova <- TukeyHSD(one.way)
test <- var.test(dat[[v]] ~ phase, data = dat)
if(test$p.value<0.05){
print("pre")
print(var(dat[which(dat$phase=="pre"),][[v]], na.rm=TRUE))
print("peri")
print(var(dat[which(dat$phase=="peri"),][[v]], na.rm=TRUE))
print(test)
# print(anova)
# print(eta_squared(one.way))
} else {
print("No significant difference")
# print(anova)
}
}
}
}
dat <- data[which((data$phase=="pre")),]
for(v in met.vars){
print('')
print('##########################################################')
print(paste(g, v, sep = " + "))
# one.way <- aov(dat[[v]] ~ phase, data = dat)
# anova <- TukeyHSD(one.way)
test <- var.test(dat[[v]] ~ group, data = dat)
if(test$p.value<0.05){
print(test)
# print(anova)
# print(eta_squared(one.way))
} else {
print("No significant difference")
# print(anova)
}
}
dat <- data[which((data$phase=="pre")),]
for(v in met.vars){
print('')
print('##########################################################')
print(paste(g, v, sep = " + "))
# one.way <- aov(dat[[v]] ~ phase, data = dat)
# anova <- TukeyHSD(one.way)
test <- var.test(dat[[v]] ~ group, data = dat)
if(test$p.value<0.05){
print("controls")
print(var(dat[which(dat$group=="controls"),][[v]], na.rm=TRUE))
print("remitted")
print(var(dat[which(dat$phase=="remitted"),][[v]], na.rm=TRUE))
print(test)
# print(anova)
# print(eta_squared(one.way))
} else {
print("No significant difference")
# print(anova)
}
}
dat <- data[which((data$phase=="pre")),]
for(v in met.vars){
print('')
print('##########################################################')
print(paste(g, v, sep = " + "))
# one.way <- aov(dat[[v]] ~ phase, data = dat)
# anova <- TukeyHSD(one.way)
test <- var.test(dat[[v]] ~ group, data = dat)
if(test$p.value<0.05){
print("controls")
print(var(dat[which(dat$group=="controls"),][[v]], na.rm=TRUE))
print("remitted")
print(var(dat[which(dat$group=="remitted"),][[v]], na.rm=TRUE))
print(test)
# print(anova)
# print(eta_squared(one.way))
} else {
print("No significant difference")
# print(anova)
}
}
load("network_permutations/all_pre_fant_final.rda")
all_pre_fant_final <- copy(permutationResults)
netAll <- all_pre_fant_final
sum((netAll$p_values$Temporal$EdgeWeights < 0.025), na.rm = T)
sum((netAll$p_values$Temporal$EdgeWeights != 1), na.rm = T)
net <- cont_pre_final[["network"]][["Temporal"]][["EdgeWeights"]]
n2 <- qgraph(net, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=groups_list, legend.cex=1, legend=T, nodeNames = nodeVars, labels=c(1:length(nodeVars)),
vsize=6, asize=3, curve=0.5, esize=3, color = groups_colors)
net_pvals <- netAll[["p_values"]][["Temporal"]][["EdgeWeights"]]
# net <- copy(netAll)
net[which(net_pvals > 0.025)] <- 0
n2 <- qgraph(net, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=groups_list, legend.cex=1, legend=T, nodeNames = nodeVars, labels=c(1:length(nodeVars)),
vsize=6, asize=3, curve=0.5, esize=3, color = groups_colors)
load("C:/Users/cleme/Documents/Education/RUG/Thesis/EMA-mindfulness/Data/ESM/mindcog_v202207/network_permutations/compare_all_fant_final.rda")
load("network_permutations/compare_all_fant_final.rda")
compare_all_fant_final <- copy(permutationResults)
View(compare_all_fant_final)
View(compare_all_fant_final[["p_values"]][["Contemporaneous"]][["Centrality"]])
View(compare_all_fant_final[["p_values"]][["Contemporaneous"]][["EdgeWeights"]])
View(compare_all_fant_final[["p_values"]][["Temporal"]][["Centrality"]])
View(compare_all_fant_final[["p_values"]][["Temporal"]][["Centrality"]])
View(compare_all_fant_final[["p_values"]][["Temporal"]][["EdgeWeights"]])
load("network_permutations/compare_all_mind_final.rda")
compare_all_mind_final <- copy(permutationResults)
View(compare_all_mind_final)
View(compare_all_mind_final[["p_values"]][["Contemporaneous"]][["Centrality"]])
View(compare_all_mind_final[["p_values"]][["Contemporaneous"]][["EdgeWeights"]])
View(compare_all_mind_final[["p_values"]][["Temporal"]][["Centrality"]])
View(compare_all_mind_final[["p_values"]][["Temporal"]][["EdgeWeights"]])
View(compare_all_mind_final[["p_values"]][["Contemporaneous"]][["Centrality"]])
load("network_permutations/all_pre_mind_final.rda")
all_pre_mind_final <- copy(permutationResults)
netAll <- all_pre_mind_final
View(all_pre_mind_final)
View(compare_all_mind_final[["p_values"]][["Contemporaneous"]][["Centrality"]])
View(all_pre_mind_final[["network"]][["Contemporaneous"]][["Centrality"]])
load("network_permutations/all_peri_mind_final.rda")
all_peri_mind_final <- copy(permutationResults)
netAll <- all_peri_mind_final
View(all_peri_mind_final)
View(all_peri_mind_final[["network"]][["Contemporaneous"]][["Centrality"]])
netAll <- all_pre_mind_final
netAll <- all_pre_mind_final
sum((netAll$p_values$Contemporaneous$EdgeWeights < 0.025), na.rm = T)
sum((netAll$p_values$Contemporaneous$EdgeWeights != 1), na.rm = T)
net <- cont_pre_final[["network"]][["Contemporaneous"]][["EdgeWeights"]]
n2 <- qgraph(net, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=groups_list, legend.cex=1, legend=T, nodeNames = nodeVars, labels=c(1:length(nodeVars)),
vsize=6, asize=3, curve=0.5, esize=3, color = groups_colors)
net_pvals <- netAll[["p_values"]][["Contemporaneous"]][["EdgeWeights"]]
# net <- copy(netAll)
net[which(net_pvals > 0.025)] <- 0
net <- mirror_matrix(net)
n2 <- qgraph(net, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=groups_list, legend.cex=1, legend=T, nodeNames = nodeVars, labels=c(1:length(nodeVars)),
vsize=6, asize=3, curve=0.5, esize=3, color = groups_colors)
load("network_permutations/all_pre_mind_final.rda")
all_pre_mind_final <- copy(permutationResults)
netAll <- all_pre_mind_final
sum((netAll$p_values$Contemporaneous$EdgeWeights < 0.025), na.rm = T)
sum((netAll$p_values$Contemporaneous$EdgeWeights != 1), na.rm = T)
net <- cont_pre_final[["network"]][["Contemporaneous"]][["EdgeWeights"]]
n2 <- qgraph(net, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=groups_list, legend.cex=1, legend=T, nodeNames = nodeVars, labels=c(1:length(nodeVars)),
vsize=6, asize=3, curve=0.5, esize=3, color = groups_colors)
net_pvals <- netAll[["p_values"]][["Contemporaneous"]][["EdgeWeights"]]
# net <- copy(netAll)
net[which(net_pvals > 0.025)] <- 0
net <- mirror_matrix(net)
n2 <- qgraph(net, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=groups_list, legend.cex=1, legend=T, nodeNames = nodeVars, labels=c(1:length(nodeVars)),
vsize=6, asize=3, curve=0.5, esize=3, color = groups_colors)
load("network_permutations/all_peri_mind_final.rda")
all_peri_mind_final <- copy(permutationResults)
netAll <- all_peri_mind_final
sum((netAll$p_values$Contemporaneous$EdgeWeights < 0.025), na.rm = T)
sum((netAll$p_values$Contemporaneous$EdgeWeights != 1), na.rm = T)
net <- cont_pre_final[["network"]][["Contemporaneous"]][["EdgeWeights"]]
n2 <- qgraph(net, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=groups_list, legend.cex=1, legend=T, nodeNames = nodeVars, labels=c(1:length(nodeVars)),
vsize=6, asize=3, curve=0.5, esize=3, color = groups_colors)
net_pvals <- netAll[["p_values"]][["Contemporaneous"]][["EdgeWeights"]]
# net <- copy(netAll)
net[which(net_pvals > 0.025)] <- 0
net <- mirror_matrix(net)
n2 <- qgraph(net, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=groups_list, legend.cex=1, legend=T, nodeNames = nodeVars, labels=c(1:length(nodeVars)),
vsize=6, asize=3, curve=0.5, esize=3, color = groups_colors)
load("network_permutations/all_pre_fant_final.rda")
all_pre_fant_final <- copy(permutationResults)
netAll <- all_pre_fant_final
sum((netAll$p_values$Contemporaneous$EdgeWeights < 0.025), na.rm = T)
sum((netAll$p_values$Contemporaneous$EdgeWeights != 1), na.rm = T)
net <- cont_pre_final[["network"]][["Contemporaneous"]][["EdgeWeights"]]
n2 <- qgraph(net, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=groups_list, legend.cex=1, legend=T, nodeNames = nodeVars, labels=c(1:length(nodeVars)),
vsize=6, asize=3, curve=0.5, esize=3, color = groups_colors)
net_pvals <- netAll[["p_values"]][["Contemporaneous"]][["EdgeWeights"]]
# net <- copy(netAll)
net[which(net_pvals > 0.025)] <- 0
net <- mirror_matrix(net)
n2 <- qgraph(net, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=groups_list, legend.cex=1, legend=T, nodeNames = nodeVars, labels=c(1:length(nodeVars)),
vsize=6, asize=3, curve=0.5, esize=3, color = groups_colors)
load("network_permutations/all_peri_fant_final.rda")
all_peri_fant_final <- copy(permutationResults)
netAll <- all_peri_fant_final
sum((netAll$p_values$Contemporaneous$EdgeWeights < 0.025), na.rm = T)
sum((netAll$p_values$Contemporaneous$EdgeWeights != 1), na.rm = T)
net <- cont_pre_final[["network"]][["Contemporaneous"]][["EdgeWeights"]]
n2 <- qgraph(net, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=groups_list, legend.cex=1, legend=T, nodeNames = nodeVars, labels=c(1:length(nodeVars)),
vsize=6, asize=3, curve=0.5, esize=3, color = groups_colors)
net_pvals <- netAll[["p_values"]][["Contemporaneous"]][["EdgeWeights"]]
# net <- copy(netAll)
net[which(net_pvals > 0.025)] <- 0
net <- mirror_matrix(net)
n2 <- qgraph(net, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=groups_list, legend.cex=1, legend=T, nodeNames = nodeVars, labels=c(1:length(nodeVars)),
vsize=6, asize=3, curve=0.5, esize=3, color = groups_colors)
netAll <- all_peri_mind_final
sum((netAll$p_values$Contemporaneous$EdgeWeights < 0.025), na.rm = T)
sum((netAll$p_values$Contemporaneous$EdgeWeights != 1), na.rm = T)
net <- cont_pre_final[["network"]][["Contemporaneous"]][["EdgeWeights"]]
n2 <- qgraph(net, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=groups_list, legend.cex=1, legend=T, nodeNames = nodeVars, labels=c(1:length(nodeVars)),
vsize=6, asize=3, curve=0.5, esize=3, color = groups_colors)
net_pvals <- netAll[["p_values"]][["Contemporaneous"]][["EdgeWeights"]]
# net <- copy(netAll)
net[which(net_pvals > 0.025)] <- 0
net <- mirror_matrix(net)
n2 <- qgraph(net, layout = L, #title=paste("mlVAR: Contemporaneous network", g, i, "Baseline", sep = " - "),
theme='colorblind', negDashed=FALSE, diag=T, #title=paste("Controls: Temporal - Baseline")
groups=groups_list, legend.cex=1, legend=T, nodeNames = nodeVars, labels=c(1:length(nodeVars)),
vsize=6, asize=3, curve=0.5, esize=3, color = groups_colors)
######################################## Calculate PA / NA Strength ###################################################
pa_nodes <- c("Energy", "Wakefulness", "Satisfaction")
na_nodes <- c("Sadness", "Irritation", "Anxiety", "Restlessness")
nodeVars <- c('Rumination',
'Energy', 'Wakefulness', 'Satisfaction',
'Sadness', 'Irritation', 'Anxiety', 'Restlessness',
'EventUnpleasantness', 'EventPleasantness',
'Distraction')#, 'NegativeAffect', 'PositiveAffect')
non_pa_nodes <- vars[which(vars %nin% pa_nodes)]
non_na_nodes <- vars[which(vars %nin% na_nodes)]
nets <- compare_all_fant_final$testStats$difference$EdgeWeights$Contemporaneous
lenDat <- length(nets)
pa_results <- list()
na_results <- list()
pa_results[["Strength"]] <- c(rep(NA, lenDat))
pa_results[["InStrength"]] <- c(rep(NA, lenDat))
pa_results[["OutStrength"]] <- c(rep(NA, lenDat))
na_results[["Strength"]] <- c(rep(NA, lenDat))
na_results[["InStrength"]] <- c(rep(NA, lenDat))
na_results[["OutStrength"]] <- c(rep(NA, lenDat))
for(i in 1:lenDat){
current_net <- nets[[i]]
if(isSymmetric(current_net)){
pa_strength <-  sum(abs(current_net[pa_nodes, non_pa_nodes])) # [rows, columns]
pa_results$Strength[i] <- pa_strength
na_strength <-  sum(abs(current_net[na_nodes, non_na_nodes])) # [rows, columns]
na_results$Strength[i] <- na_strength
} else {
pa_out_strength <- sum(abs(current_net[pa_nodes, non_pa_nodes])) #outstrength
pa_in_strength <- sum(abs(current_net[non_pa_nodes, pa_nodes])) #instrength
pa_results$InStrength[i] <- pa_in_strength
pa_results$OutStrength[i] <- pa_out_strength
na_out_strength <- sum(abs(current_net[na_nodes, non_na_nodes])) #outstrength
na_in_strength <- sum(abs(current_net[non_na_nodes, na_nodes])) #instrength
na_results$InStrength[i] <- na_in_strength
na_results$OutStrength[i] <- na_out_strength
}
}
View(compare_all_fant_final)
######################################## Calculate PA / NA Strength ###################################################
pa_nodes <- c("Energy", "Wakefulness", "Satisfaction")
na_nodes <- c("Sadness", "Irritation", "Anxiety", "Restlessness")
nodeVars <- c('Rumination',
'Energy', 'Wakefulness', 'Satisfaction',
'Sadness', 'Irritation', 'Anxiety', 'Restlessness',
'EventUnpleasantness', 'EventPleasantness',
'Distraction')#, 'NegativeAffect', 'PositiveAffect')
non_pa_nodes <- vars[which(vars %nin% pa_nodes)]
non_na_nodes <- vars[which(vars %nin% na_nodes)]
nets <- compare_all_fant_final$testStats$difference$EdgeWeights$Contemporaneous
lenDat <- length(nets)
pa_results <- list()
na_results <- list()
pa_results[["Strength"]] <- c(rep(NA, lenDat))
pa_results[["InStrength"]] <- c(rep(NA, lenDat))
pa_results[["OutStrength"]] <- c(rep(NA, lenDat))
na_results[["Strength"]] <- c(rep(NA, lenDat))
na_results[["InStrength"]] <- c(rep(NA, lenDat))
na_results[["OutStrength"]] <- c(rep(NA, lenDat))
for(i in 1:lenDat){
current_net <- nets[[i]]
if(isSymmetric(current_net)){
pa_strength <-  sum(abs(current_net[pa_nodes, non_pa_nodes])) # [rows, columns]
pa_results$Strength[i] <- pa_strength
na_strength <-  sum(abs(current_net[na_nodes, non_na_nodes])) # [rows, columns]
na_results$Strength[i] <- na_strength
} else {
pa_out_strength <- sum(abs(current_net[pa_nodes, non_pa_nodes])) #outstrength
pa_in_strength <- sum(abs(current_net[non_pa_nodes, pa_nodes])) #instrength
pa_results$InStrength[i] <- pa_in_strength
pa_results$OutStrength[i] <- pa_out_strength
na_out_strength <- sum(abs(current_net[na_nodes, non_na_nodes])) #outstrength
na_in_strength <- sum(abs(current_net[non_na_nodes, na_nodes])) #instrength
na_results$InStrength[i] <- na_in_strength
na_results$OutStrength[i] <- na_out_strength
}
}
pa_nodes
non_pa_nodes
View(coefficients)
View(compare_all_fant_final)
qgraph(compare_all_fant_final[["pre"]][["Contemporaneous"]][["EdgeWeights"]])
compare_all_fant_final[["testStats"]][["pre"]][["EdgeWeights"]]
nets[[1]]
vars <- c('Rumination',
'Energy', 'Wakefulness', 'Satisfaction',
'Sadness', 'Irritation', 'Anxiety', 'Restlessness',
'EventUnpleasantness', 'EventPleasantness',
'Distraction')#, 'NegativeAffect', 'PositiveAffect')
pa_nodes <- c("energetic", "wakeful", "satisfied")
na_nodes <- c("down", "irritated", "anxious", "restless")
######################################## Calculate PA / NA Strength ###################################################
pa_nodes <- c("Energy", "Wakefulness", "Satisfaction")
na_nodes <- c("Sadness", "Irritation", "Anxiety", "Restlessness")
non_pa_nodes <- vars[which(vars %nin% pa_nodes)]
non_na_nodes <- vars[which(vars %nin% na_nodes)]
nets <- compare_all_fant_final$testStats$difference$EdgeWeights$Contemporaneous
lenDat <- length(nets)
pa_results <- list()
na_results <- list()
pa_results[["Strength"]] <- c(rep(NA, lenDat))
pa_results[["InStrength"]] <- c(rep(NA, lenDat))
pa_results[["OutStrength"]] <- c(rep(NA, lenDat))
na_results[["Strength"]] <- c(rep(NA, lenDat))
na_results[["InStrength"]] <- c(rep(NA, lenDat))
na_results[["OutStrength"]] <- c(rep(NA, lenDat))
for(i in 1:lenDat){
current_net <- nets[[i]]
if(isSymmetric(current_net)){
pa_strength <-  sum(abs(current_net[pa_nodes, non_pa_nodes])) # [rows, columns]
pa_results$Strength[i] <- pa_strength
na_strength <-  sum(abs(current_net[na_nodes, non_na_nodes])) # [rows, columns]
na_results$Strength[i] <- na_strength
} else {
pa_out_strength <- sum(abs(current_net[pa_nodes, non_pa_nodes])) #outstrength
pa_in_strength <- sum(abs(current_net[non_pa_nodes, pa_nodes])) #instrength
pa_results$InStrength[i] <- pa_in_strength
pa_results$OutStrength[i] <- pa_out_strength
na_out_strength <- sum(abs(current_net[na_nodes, non_na_nodes])) #outstrength
na_in_strength <- sum(abs(current_net[non_na_nodes, na_nodes])) #instrength
na_results$InStrength[i] <- na_in_strength
na_results$OutStrength[i] <- na_out_strength
}
}
if(isSymmetric(current_net)){
print("Contemporaneous Network")
pa_pval <- mean((pa_results$Strength) >= (pa_results$Strength[1]), na.rm = TRUE)
na_pval <- mean((na_results$Strength) >= (na_results$Strength[1]), na.rm = TRUE)
print("PA Strength p-value:")
print(pa_pval)
print(pa_results$Strength[1])
print("NA Strength p-value:")
print(na_pval)
print(na_results$Strength[1])
} else {
print("Temporal Network")
pa_in_pval <- mean((pa_results$InStrength) >= (pa_results$InStrength[1]), na.rm = TRUE)
pa_out_pval <- mean((pa_results$OutStrength) >= (pa_results$OutStrength[1]), na.rm = TRUE)
na_in_pval <- mean((na_results$InStrength) >= (na_results$InStrength[1]), na.rm = TRUE)
na_out_pval <- mean((na_results$OutStrength) >= (na_results$OutStrength[1]), na.rm = TRUE)
print("PA InStrength p-value:")
print(pa_in_pval)
print(pa_results$InStrength[1])
print("PA OutStrength p-value:")
print(pa_out_pval)
print(pa_results$OutStrength[1])
print("NA InStrength p-value:")
print(na_in_pval)
print(na_results$InStrength[1])
print("NA OutStrength p-value:")
print(na_out_pval)
print(na_results$OutStrength[1])
}
nets <- compare_all_mind_final$testStats$difference$EdgeWeights$Contemporaneous
lenDat <- length(nets)
pa_results <- list()
na_results <- list()
pa_results[["Strength"]] <- c(rep(NA, lenDat))
pa_results[["InStrength"]] <- c(rep(NA, lenDat))
pa_results[["OutStrength"]] <- c(rep(NA, lenDat))
na_results[["Strength"]] <- c(rep(NA, lenDat))
na_results[["InStrength"]] <- c(rep(NA, lenDat))
na_results[["OutStrength"]] <- c(rep(NA, lenDat))
for(i in 1:lenDat){
current_net <- nets[[i]]
if(isSymmetric(current_net)){
pa_strength <-  sum(abs(current_net[pa_nodes, non_pa_nodes])) # [rows, columns]
pa_results$Strength[i] <- pa_strength
na_strength <-  sum(abs(current_net[na_nodes, non_na_nodes])) # [rows, columns]
na_results$Strength[i] <- na_strength
} else {
pa_out_strength <- sum(abs(current_net[pa_nodes, non_pa_nodes])) #outstrength
pa_in_strength <- sum(abs(current_net[non_pa_nodes, pa_nodes])) #instrength
pa_results$InStrength[i] <- pa_in_strength
pa_results$OutStrength[i] <- pa_out_strength
na_out_strength <- sum(abs(current_net[na_nodes, non_na_nodes])) #outstrength
na_in_strength <- sum(abs(current_net[non_na_nodes, na_nodes])) #instrength
na_results$InStrength[i] <- na_in_strength
na_results$OutStrength[i] <- na_out_strength
}
}
if(isSymmetric(current_net)){
print("Contemporaneous Network")
pa_pval <- mean((pa_results$Strength) >= (pa_results$Strength[1]), na.rm = TRUE)
na_pval <- mean((na_results$Strength) >= (na_results$Strength[1]), na.rm = TRUE)
print("PA Strength p-value:")
print(pa_pval)
print(pa_results$Strength[1])
print("NA Strength p-value:")
print(na_pval)
print(na_results$Strength[1])
} else {
print("Temporal Network")
pa_in_pval <- mean((pa_results$InStrength) >= (pa_results$InStrength[1]), na.rm = TRUE)
pa_out_pval <- mean((pa_results$OutStrength) >= (pa_results$OutStrength[1]), na.rm = TRUE)
na_in_pval <- mean((na_results$InStrength) >= (na_results$InStrength[1]), na.rm = TRUE)
na_out_pval <- mean((na_results$OutStrength) >= (na_results$OutStrength[1]), na.rm = TRUE)
print("PA InStrength p-value:")
print(pa_in_pval)
print(pa_results$InStrength[1])
print("PA OutStrength p-value:")
print(pa_out_pval)
print(pa_results$OutStrength[1])
print("NA InStrength p-value:")
print(na_in_pval)
print(na_results$InStrength[1])
print("NA OutStrength p-value:")
print(na_out_pval)
print(na_results$OutStrength[1])
}
build_up <- rem_pre_final[["network"]][["Contemporaneous"]][["EdgeWeights"]]
View(compare_groups_final)
View(compare_groups_final[["controls"]][["Contemporaneous"]][["Centrality"]])
View(compare_groups_final[["remitted"]][["Contemporaneous"]][["Centrality"]])
View(compare_groups_final[["controls"]][["Temporal"]][["Centrality"]])
View(compare_groups_final[["remitted"]][["Temporal"]][["Centrality"]])

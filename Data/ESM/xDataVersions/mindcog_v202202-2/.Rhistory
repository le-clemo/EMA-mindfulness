rm(list = ls()) #clean all up
setwd("C:/Users/cleme/Documents/Education/RUG/Thesis/EMA-mindfulness/Data/ESM/mindcog_v202202-2")
#setwd("~/Documents/RUG/Thesis/EMA-mindfulness/Data/ESM/mindcog_v202202-2")
library(readxl)
library(tidyverse)
library(plyr)
library(dplyr)
library(Hmisc)
library(corrplot)
library(data.table)
library(ggplot2)
library(reshape)
library(ggpubr)
library(lubridate)
library(igraph)
library(qgraph)
#read in data
data <- read_xlsx('mindcog_db_2022-02-14.xlsx')
################################# load Medoq info and clean up #################################################
#get sheet names
#sheetnames <- excel_sheets('Medoq_informatie_2.xlsx')
mylist <- lapply(excel_sheets('Medoq_informatie_2.xlsx'), read_excel, path = 'Medoq_informatie_2.xlsx')
# name the dataframes
names(mylist) <- c("matchingMindfulness", "matchingFantasizing")
# Bring the dataframes to the global environment
list2env(mylist ,.GlobalEnv)
matchingMindfulness$intervention <- "mindfulness" #add intervention type per sheet
matchingFantasizing$intervention <- "fantasizing"
matchingData <- rbind(matchingMindfulness, matchingFantasizing) #bind into one df
#changing column names since spaces lead to weird errors
colnames(matchingData)[c(1,2,4,5,6)] <- c("id", "recordedDates", "meeting_id", "DatesBaseline", "DatesIntervention")
#turn all ids to lower case for easier error handling below
matchingData$id <- tolower(matchingData$id)
#fix various errors in id column
for(row in 1:nrow(matchingData)) { #some "s" are missing
if( ! (grepl("s", matchingData$id[row], fixed=TRUE)) & (!(is.na(matchingData$id[row])))){
matchingData$id[row] <- paste("s", matchingData$id[row], sep = "")
}
if( ! (grepl("_g", matchingData$id[row], fixed=TRUE))){ #some "_" prior to "g" are missing
matchingData$id[row] <- sub("g", "\\1_g", matchingData$id[row])
}
if( ! (grepl("_m", matchingData$id[row], fixed = TRUE))){ #some "_" prior to "m" are missing
matchingData$id[row] <- sub("m", "\\1_m", matchingData$id[row])
}
if( (grepl("meting", matchingData$id[row], fixed = TRUE))){#some had "meting" instead of just "m"
matchingData$id[row] <- sub("meting", "\\1m", matchingData$id[row])
}
}
#there are some duplicate entries that would cause issues later on
n_occur <- data.frame(table(matchingData$id))
#n_occur[n_occur$Freq > 1,]
duplicate_entries <- subset(matchingData[matchingData$id %in% n_occur$Var1[n_occur$Freq > 1],],
select = c(id, recordedDates, DatesBaseline, DatesIntervention))
#extract start and end dates from "Datum baseline" and "Datum interventie" columns
for(row in 1:nrow(matchingData)) { #change all "t/m" to "tm"
if( ! (grepl("tm", matchingData$DatesBaseline[row], fixed=TRUE))){
matchingData$DatesBaseline[row] <- sub("t/m", "\\tm", matchingData$DatesBaseline[row])
}
if( ! (grepl("tm", matchingData$DatesIntervention[row], fixed=TRUE))){
matchingData$DatesIntervention[row] <- sub("t/m", "\\tm", matchingData$DatesIntervention[row])
}
if( ! (grepl("tm", matchingData$recordedDates[row], fixed=TRUE))){
matchingData$recordedDates[row] <- sub("t/m", "\\tm", matchingData$recordedDates[row])
}
}
matchingData$baselineStart <- NA
matchingData$baselineEnd <- NA
matchingData$interventionStart <- NA
matchingData$interventionEnd <- NA
matchingData$recordedStart <- NA
matchingData$recordedEnd <- NA
for(row in 1:nrow(matchingData)){
if(! is.na(matchingData$DatesBaseline[row])){
matchingData$baselineStart[row] <- sub("\\ tm.*", "", matchingData$DatesBaseline[row]) #extract start date
matchingData$baselineEnd[row] <- sub(".* tm", "", matchingData$DatesBaseline[row]) #extract end date
#same for intervention dates
matchingData$interventionStart[row] <- sub("\\ tm.*", "", matchingData$DatesIntervention[row])
matchingData$interventionEnd[row] <- sub(".* tm", "", matchingData$DatesIntervention[row])
}
if(! is.na(matchingData$recordedDates[row])){
matchingData$recordedStart[row] <- sub("\\ tm.*", "", matchingData$recordedDates[row])
matchingData$recordedEnd[row] <- sub(".* tm", "", matchingData$recordedDates[row])
}
}
##################################### combine data ####################################
#performing a "vlookup" of the md... numbers and adding corresponding columns
#from matchingData to data
data$id <- NA
data$intervention <- NA
data$baselineStart <- NA
data$baselineEnd <- NA
data$interventionStart <- NA
data$interventionEnd <- NA
data$recordedStart <- NA
data$recordedEnd <- NA
for(i in 1:nrow(data)){
for(j in 1:nrow(matchingData)){
if(data$patient_id[i] == matchingData$meeting_id[j]){
data$id[i] <- matchingData$id[j]
#data$recordedDates[i] <- matchingData$recordedDates[j]
data$intervention[i] <- matchingData$intervention[j]
if(is.na(data$mindcog_db_non_response[i])){
data$baselineStart[i] = matchingData$baselineStart[j]
data$baselineEnd[i] = matchingData$baselineEnd[j]
data$interventionStart[i] <- matchingData$interventionStart[j]
data$interventionEnd[i] <- matchingData$interventionEnd[j]
data$recordedStart[i] <- matchingData$recordedStart[j]
data$recordedEnd[i] <- matchingData$recordedEnd[j]
}
}
}
}
# View(subset(data, id=="s156_g2_m1" | id=="s156_g2_m2"))
# unique(subset(data, id=="s156_g2_m1" | id=="s156_g2_m2")$patient_id)
#################################### add variables  ####################################
#add group
data$group <- NA
for(row in 1:nrow(data)) {
if(grepl("g1", data$id[row], fixed = TRUE)){
data$group[row] <- "controls"
}
if(grepl("g2", data$id[row], fixed = TRUE)){
data$group[row] <- "remitted"
}
}
#add new column "subject" -> extract all characters up until the first underscore in column "id"
data$subject <- str_extract(data$id, regex("^[^_]+(?=_)"))
#add phase
data$phase <- NA
for(row in 1:nrow(data)) {
if((grepl("m1", data$id[row], fixed = TRUE)) | (grepl("m3", data$id[row], fixed = TRUE))){
data$phase[row] <- "pre"
}
if((grepl("m2", data$id[row], fixed = TRUE)) | (grepl("m4", data$id[row], fixed = TRUE))){
data$phase[row] <- "peri"
}
}
#add block (1 = first intervention cycle, 2 = second intervention cycle)
data$block <- NA
for(row in 1:nrow(data)) {
if((grepl("m1", data$id[row], fixed = TRUE)) | (grepl("m2", data$id[row], fixed = TRUE))){
data$block[row] <- 1
} else {
data$block[row] <- 2
}
}
#Convert dates from characters to datetimes
data[['mindcog_db_open_from']] <- as.POSIXct(data[['mindcog_db_open_from']],
format = "%d/%m/%Y %H:%M")
data[['mindcog_db_started_at']] <- as.POSIXct(data[['mindcog_db_started_at']],
format = "%d/%m/%Y %H:%M")
data[['mindcog_db_completed_at']] <- as.POSIXct(data[['mindcog_db_completed_at']],
format = "%d/%m/%Y %H:%M")
data[['mindcog_db_date']] <- format(as.POSIXct(data[['mindcog_db_date']],
format = "%d/%m/%Y %H:%M"), format="%Y-%m-%d")
################################# What data are we missing? ###################################
missing_data <- ddply(data, .(patient_id, id, group, intervention), plyr::summarise,
numBeeped = length(mindcog_db_open_from),
responseRate = round((numBeeped - length(unique(mindcog_db_non_response)))/numBeeped,2))
na_data <- missing_data[(is.na(missing_data$patient_id)) |
is.na((missing_data$group)) |
is.na((missing_data$intervention)), ]
write.csv(na_data, file = "patientID_issues.csv")
#drop subjects without an assigned group
data <- drop_na(data, group)
data <- drop_na(data, patient_id)
#View(data[which(is.na(data$mindcog_db_date)),])
############################# Handle issue with diverging dates ###########################
#fix problem with dates (whether entry belongs to pre- or peri-intervention phase)
error_demo <- ddply(data[which(data$subject=="s3"),],
.(subject, id, phase, block, mindcog_db_date, recordedStart, recordedEnd,
baselineStart, baselineEnd, interventionStart, interventionEnd), plyr::summarise,
nEntries <- length(subject))
#turning the recordedStart/-End, baselineStart/-End, ... into actual dates with corresponding year
for(row in 1:nrow(data)){ #first extract year from the mindcog_db_date column
y <- format(as.POSIXct(data$mindcog_db_date[row], format = "%Y-%m-%d"), format="%Y")
#if there is an entry for recordedStart and mindcog_db_date (i.e., if its not a non-response)
if((!is.na(data$recordedStart[row])) & (!is.na(data$mindcog_db_date[row]))){
#combine day-month from recordedStart (etc.) with extracted year and reformat to match other dates in df
data$recordedStart[row] <- format(as.POSIXct(paste(data$recordedStart[row], y, sep = "-"),
format = "%d-%m-%Y"), format = "%Y-%m-%d")
data$recordedEnd[row] <- format(as.POSIXct(paste(data$recordedEnd[row], y, sep = "-"),
format = "%d-%m-%Y"), format = "%Y-%m-%d")
}# repeat for other columns
if((!is.na(data$baselineStart[row])) & (!is.na(data$mindcog_db_date[row]))){
data$baselineStart[row] <- format(as.POSIXct(paste(data$baselineStart[row], y, sep = "-"),
format = "%d-%m-%Y"), format = "%Y-%m-%d")
data$baselineEnd[row] <- format(as.POSIXct(paste(data$baselineEnd[row], y, sep = "-"),
format = "%d-%m-%Y"), format = "%Y-%m-%d")
data$interventionStart[row] <- format(as.POSIXct(paste(data$interventionStart[row], y, sep = "-"),
format = "%d-%m-%Y"), format = "%Y-%m-%d")
data$interventionEnd[row] <- format(as.POSIXct(paste(data$interventionEnd[row], y, sep = "-"),
format = "%d-%m-%Y"), format = "%Y-%m-%d")
}
}
pre_to_peri <- c() #empty lists for row indices of faulty entries
peri_to_pre <- c()
i <- 1 #to add to the lists (in a computationally efficient way)
j <- 1
for(row in 1:nrow(data)){
#if there is a date in baselineStart (which means there is one in the other relevant columns too)
# and if it is not a non-response
if((!is.na(data$baselineStart[row])) & (!is.na(data$mindcog_db_date[row]))){
#if phase is "pre"
if((!is.na(data$phase[row])) & (data$phase[row] == "pre")){
#if the recorded mindcog date is greater than the end of baseline date
if((data$mindcog_db_date[row] > data$baselineEnd[row])){
pre_to_peri[i] <- row #add row index to list
i <- i+1 #increment list index count
}
} #same for entries coded as peri that should be pre
if((!is.na(data$phase[row])) & (data$phase[row] == "peri")){
if((data$mindcog_db_date[row] < data$interventionStart[row])){
peri_to_pre[j] <- row
j <- j+1
}
}
}
}
length(pre_to_peri) + length(peri_to_pre)
data$phase[pre_to_peri,] <- "peri"
data$phase[pre_to_peri,]
data[pre_to_peri]$phase
data[pre_to_peri,]$phase
data[pre_to_peri,]$phase <- "peri"
data[pre_to_peri,]$phase
for(row in 1:nrow(data[pre_to_peri,])){
if((grepl("m1", data$id[row], fixed=TRUE))){
data$id[row] <- sub("m1", "\\1_m2", matchingData$id[row])
}
if((grepl("m3", data$id[row], fixed=TRUE))){
data$id[row] <- sub("m3", "\\1_m4", matchingData$id[row])
}
}
data[peri_to_pre,]$phase <- "pre"
for(row in 1:nrow(data[peri_to_pre,])){
if((grepl("m2", data$id[row], fixed=TRUE))){
data$id[row] <- sub("m2", "\\1_m1", matchingData$id[row])
}
if((grepl("m4", data$id[row], fixed=TRUE))){
data$id[row] <- sub("m4", "\\1_m3", matchingData$id[row])
}
}
pre_to_peri <- c() #empty lists for row indices of faulty entries
peri_to_pre <- c()
i <- 1 #to add to the lists (in a computationally efficient way)
j <- 1
for(row in 1:nrow(data)){
#if there is a date in baselineStart (which means there is one in the other relevant columns too)
# and if it is not a non-response
if((!is.na(data$baselineStart[row])) & (!is.na(data$mindcog_db_date[row]))){
#if phase is "pre"
if((!is.na(data$phase[row])) & (data$phase[row] == "pre")){
#if the recorded mindcog date is greater than the end of baseline date
if((data$mindcog_db_date[row] > data$baselineEnd[row])){
pre_to_peri[i] <- row #add row index to list
i <- i+1 #increment list index count
}
} #same for entries coded as peri that should be pre
if((!is.na(data$phase[row])) & (data$phase[row] == "peri")){
if((data$mindcog_db_date[row] < data$interventionStart[row])){
peri_to_pre[j] <- row
j <- j+1
}
}
}
}
pre_to_peri
peri_to_pre
